{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aktuelle Trends der IKT \u00b6 Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT ! Grober Inhalt \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 12.-16.04.2021 Einf\u00fchrung und Organisatorisches - - - 2. 19.-23.04.2021 Grundger\u00fcst und Application Manifest \u00dcbung 1 - 30.04.2021 3. 26.-30.04.2021 Service workers \u00dcbung 2 - 07.05.2021 4. 03.-07.05.2021 Promises und Fetch API \u00dcbung 3 - 14.05.2021 5. 10.-14.05.2021 Service workers und Caching - - 21.05.2021 6. 17.-21.05.2021 Entwicklungsinfrastruktur \u00dcbung 4 - 28.05.2021 7. 24.-28.05.2021 Datenbank und Backend \u00dcbung 5 - 04.06.2021 8. 31.-04.06.2021 Frontend mit Backend-Anbindung \u00dcbung 6 - 11.06.2021 9. 07.-11.06.2021 Caching dynamische Daten mit IndexDB \u00dcbung 7 - 18.06.2021 10. 14.-18.06.2021 Hintergrundsynchronisation - Datenbank - 11. 21.-25.06.2021 Push-Notifikationen - Backend - 12. 28.-02.07.2021 Kamera und Geolocation - Frontend - Abgabe 1.PZ 21.07.2021 - Abgabe 2.PZ 01.10.2021 - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Inhalte \u00b6 Woche 1 (Grundger\u00fcst) \u00b6 Woche 1 - Grundger\u00fcst eigentlich wollten wir diese Woche auch das Application Manifest machen, aber da wir am Mittwoch an einem Antirassismus-Seminar teilnehmen und somit die Vorlesung ausf\u00e4llt, fangen wir ganz langsam an und betrachten nur das Grundger\u00fcst . Dazu auch folgendes Video: Bearbeiten Sie bitte au\u00dferdem \u00dcbung 1 . Fragen dazu kl\u00e4ren wir in der \u00dcbung am Donnerstag um 12:15 Uhr . Die \u00dcbung um 9:45 Uhr am Donnerstag findet nicht statt, da um diese Zeit das gemeinsame Plenum zum Thema Design Research in der Veranstaltung Usability stattfindet. Woche 2 (Manifest) \u00b6 Woche 2 - Manifest Diese Woche wird unsere App mithilfe des Application Manifest installierbar . Arbeiten Sie bitte den Abschnitt dazu durch. Dazu gibt es folgendes Video: Bearbeiten Sie bitte zu diesem Thema \u00dcbung 2 . Leider m\u00fcssen diesen Donnerstag aufgrund einer gro\u00dfen Veranstaltung in unserem Forschungsprojekt beide \u00dcbungen entfallen - tut mir wirklich leid, wird aber die kommenden Wochen (hoffentlich!!) besser! Fragen m\u00fcssen wir deshalb leider \u00fcber Slack kl\u00e4ren. Woche 3 (Promises und Fetch API) \u00b6 Woche 3 - Promises und Fetch API Diese Woche betrachten wir den Lebenszyklus eines Service Workers, schauen uns Promises und die Fetch API an. In der Vorlesung wird ein Video erstellt, das hier hochgeladen wird. Die relevanten Abschnitte im Skript sind Service Workers und Promises und die Fetch-API . Bearbeiten Sie bitte zu diesem Thema \u00dcbung 3 . Video zur Vorlesung am 05.05.2021 Sourcecode zur Vorlesung am 05.05.2021 hier zum Herunterladen Woche 4 (Caching) \u00b6 Woche 4 - Caching Diese Woche wird die App mithilfe von Caching auch offline nutzbar. Die \u00dcbung entf\u00e4llt diese Woche wegen des Feiertages. Arbeiten Sie aber das Caching -Kapitel durch. Video zur Vorlesung am 12.05.2021 Sourcecode zur Vorlesung am 12.05.2021 hier zum Herunterladen Woche 6 (Datenbank und Backend) \u00b6 Woche 6 - Datenbank und Backend Diese Woche bereiten wir zun\u00e4chst die n\u00e4chsten Kapitel vor. Dazu ben\u00f6tigen wir eine Datenbank und ein Backend , das an die Datenbank angebunden ist. In der \u00dcbung soll das Backend um eine weitere Funktion erweiteret werden. Video zur Vorlesung am 26.05.2021 Woche 7 (Frontend und Backend-Anbindung) \u00b6 Woche 7 - Frontend und Backend-Anbindung Diese Woche erstellen wir uns mithilfe von Angular ein Frontend und binden dieses an das Backend an. Damit wird es uns m\u00f6glich, Daten in ein Formular einzugeben und diese Daten werden in der Datenbank gespeichert. In der \u00dcbung soll das Frontend um eine weitere Funktion und eine Komponente erweiteret werden. Video zur Vorlesung am 02.06.2021 Woche 8 (IndexedDB) \u00b6 Woche 8 - IndexedDB Diese Woche machen wir uns mit der IndexedDB vertraut und speichern dynamische Daten (die Posts -Datensa\u00e4tze) in die IndexedDB, um diese auszulesen, falls die Anwendung offline ist und somit das Backend nicht verf\u00fcgbar. In der \u00dcbung soll die Verwaltung der IndexedDB um eine weitere Funktion erweiteret werden. Video zur Vorlesung am 09.06.2021 Woche 9 (Hintergrundsynchronisation) \u00b6 Woche 9 - Hintergrundsynchronisation Diese Woche machen wir uns mit der Hintergrundsynchronisation vertraut. Diese verwenden wir, um Daten, die wir in der Webanwendung erstellt oder eingegeben haben, an das Backend zu senden. Die zu sendenden Daten werden zun\u00e4chst in der IndexedDB gesichert und verbleiben dort so lange, bis die \u00dcbersendung an das Backend erfolgreich war. Eine neue \u00dcbung gibt es nicht (mehr), sondern Sie k\u00f6nnen schonmal mit der Semesteraufgabe beginnen. Video zur Vorlesung am 16.06.2021 Woche 10 (Push-Benachrichtigungen) \u00b6 Woche 10 - Push-Benachrichtigungen Diese Woche machen wir uns mit der Push-benachrichtigung vertraut. Diese verwenden wir, um die Nutzerinnen zu informieren, dass es \u00c4nderungen (Updates/Aktuelles) in der Webanwendung gibt. Die Nutzerinnen werden so an die Anwendung gebunden, denn Push-Notifications erh\u00f6hen das Interesse daran, die Anwendung erneut zu \u00f6ffnen. Eine neue \u00dcbung gibt es nicht (mehr), sondern Sie k\u00f6nnen (schonmal) mit der Semesteraufgabe beginnen/weitermachen. Video zur Vorlesung am 23.06.2021 - kommt noch Woche 11 (Kamera und Geolocation) \u00b6 Woche 11 - Kamera und Geolocation Diese Woche machen wir uns mit der Anwendung der Kamera und der Geolocation-API vertraut. Wir streamen Videos und nehmen Fotos auf. Diese speichern wir im Backend. Wir haben dadurch nun auch aus der HTW-Insta -App die M\u00f6glichkeit, Posts zu speichern. Au\u00dferdem ermitteln wir mithilfe der Geolocation-API unseren aktuellen Standort. Diese Art der Ger\u00e4tezugriffe war lange aus Webanwendungen nicht m\u00f6glich, ist nun aber mit zunehmend mehr APIs und Browserunterst\u00fctzung auch f\u00fcr (progressive) Webanwendungen verf\u00fcgbar. Es gibt auch noch einen kurzen Abschnitt Zusammenfassung , der ein kurzes Tutorial enth\u00e4lt, wie eine Angular-Anwendung progressive gestaltet werden kann und auch einen kurzen Ausblick. Video zur Vorlesung am 30.06.2021 - kommt noch Semesteraufgabe \u00b6 Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend sollte responsive sein, ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (das kann auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden. Sollten wir es noch schaffen, kommen auch Push-Nachrichten in Betracht. Von den Punkten 5.-10. sollten 4 implementiert sein. Die soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Diese Liste wird noch um Hinweise zur Bewertung angepasst.","title":"Home"},{"location":"#aktuelle-trends-der-ikt","text":"Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT !","title":"Aktuelle Trends der IKT"},{"location":"#grober-inhalt","text":"Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 12.-16.04.2021 Einf\u00fchrung und Organisatorisches - - - 2. 19.-23.04.2021 Grundger\u00fcst und Application Manifest \u00dcbung 1 - 30.04.2021 3. 26.-30.04.2021 Service workers \u00dcbung 2 - 07.05.2021 4. 03.-07.05.2021 Promises und Fetch API \u00dcbung 3 - 14.05.2021 5. 10.-14.05.2021 Service workers und Caching - - 21.05.2021 6. 17.-21.05.2021 Entwicklungsinfrastruktur \u00dcbung 4 - 28.05.2021 7. 24.-28.05.2021 Datenbank und Backend \u00dcbung 5 - 04.06.2021 8. 31.-04.06.2021 Frontend mit Backend-Anbindung \u00dcbung 6 - 11.06.2021 9. 07.-11.06.2021 Caching dynamische Daten mit IndexDB \u00dcbung 7 - 18.06.2021 10. 14.-18.06.2021 Hintergrundsynchronisation - Datenbank - 11. 21.-25.06.2021 Push-Notifikationen - Backend - 12. 28.-02.07.2021 Kamera und Geolocation - Frontend - Abgabe 1.PZ 21.07.2021 - Abgabe 2.PZ 01.10.2021 -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#inhalte","text":"","title":"Inhalte"},{"location":"#woche-1-grundgerust","text":"Woche 1 - Grundger\u00fcst eigentlich wollten wir diese Woche auch das Application Manifest machen, aber da wir am Mittwoch an einem Antirassismus-Seminar teilnehmen und somit die Vorlesung ausf\u00e4llt, fangen wir ganz langsam an und betrachten nur das Grundger\u00fcst . Dazu auch folgendes Video: Bearbeiten Sie bitte au\u00dferdem \u00dcbung 1 . Fragen dazu kl\u00e4ren wir in der \u00dcbung am Donnerstag um 12:15 Uhr . Die \u00dcbung um 9:45 Uhr am Donnerstag findet nicht statt, da um diese Zeit das gemeinsame Plenum zum Thema Design Research in der Veranstaltung Usability stattfindet.","title":"Woche 1 (Grundger\u00fcst)"},{"location":"#woche-2-manifest","text":"Woche 2 - Manifest Diese Woche wird unsere App mithilfe des Application Manifest installierbar . Arbeiten Sie bitte den Abschnitt dazu durch. Dazu gibt es folgendes Video: Bearbeiten Sie bitte zu diesem Thema \u00dcbung 2 . Leider m\u00fcssen diesen Donnerstag aufgrund einer gro\u00dfen Veranstaltung in unserem Forschungsprojekt beide \u00dcbungen entfallen - tut mir wirklich leid, wird aber die kommenden Wochen (hoffentlich!!) besser! Fragen m\u00fcssen wir deshalb leider \u00fcber Slack kl\u00e4ren.","title":"Woche 2 (Manifest)"},{"location":"#woche-3-promises-und-fetch-api","text":"Woche 3 - Promises und Fetch API Diese Woche betrachten wir den Lebenszyklus eines Service Workers, schauen uns Promises und die Fetch API an. In der Vorlesung wird ein Video erstellt, das hier hochgeladen wird. Die relevanten Abschnitte im Skript sind Service Workers und Promises und die Fetch-API . Bearbeiten Sie bitte zu diesem Thema \u00dcbung 3 . Video zur Vorlesung am 05.05.2021 Sourcecode zur Vorlesung am 05.05.2021 hier zum Herunterladen","title":"Woche 3 (Promises und Fetch API)"},{"location":"#woche-4-caching","text":"Woche 4 - Caching Diese Woche wird die App mithilfe von Caching auch offline nutzbar. Die \u00dcbung entf\u00e4llt diese Woche wegen des Feiertages. Arbeiten Sie aber das Caching -Kapitel durch. Video zur Vorlesung am 12.05.2021 Sourcecode zur Vorlesung am 12.05.2021 hier zum Herunterladen","title":"Woche 4 (Caching)"},{"location":"#woche-6-datenbank-und-backend","text":"Woche 6 - Datenbank und Backend Diese Woche bereiten wir zun\u00e4chst die n\u00e4chsten Kapitel vor. Dazu ben\u00f6tigen wir eine Datenbank und ein Backend , das an die Datenbank angebunden ist. In der \u00dcbung soll das Backend um eine weitere Funktion erweiteret werden. Video zur Vorlesung am 26.05.2021","title":"Woche 6 (Datenbank und Backend)"},{"location":"#woche-7-frontend-und-backend-anbindung","text":"Woche 7 - Frontend und Backend-Anbindung Diese Woche erstellen wir uns mithilfe von Angular ein Frontend und binden dieses an das Backend an. Damit wird es uns m\u00f6glich, Daten in ein Formular einzugeben und diese Daten werden in der Datenbank gespeichert. In der \u00dcbung soll das Frontend um eine weitere Funktion und eine Komponente erweiteret werden. Video zur Vorlesung am 02.06.2021","title":"Woche 7 (Frontend und Backend-Anbindung)"},{"location":"#woche-8-indexeddb","text":"Woche 8 - IndexedDB Diese Woche machen wir uns mit der IndexedDB vertraut und speichern dynamische Daten (die Posts -Datensa\u00e4tze) in die IndexedDB, um diese auszulesen, falls die Anwendung offline ist und somit das Backend nicht verf\u00fcgbar. In der \u00dcbung soll die Verwaltung der IndexedDB um eine weitere Funktion erweiteret werden. Video zur Vorlesung am 09.06.2021","title":"Woche 8 (IndexedDB)"},{"location":"#woche-9-hintergrundsynchronisation","text":"Woche 9 - Hintergrundsynchronisation Diese Woche machen wir uns mit der Hintergrundsynchronisation vertraut. Diese verwenden wir, um Daten, die wir in der Webanwendung erstellt oder eingegeben haben, an das Backend zu senden. Die zu sendenden Daten werden zun\u00e4chst in der IndexedDB gesichert und verbleiben dort so lange, bis die \u00dcbersendung an das Backend erfolgreich war. Eine neue \u00dcbung gibt es nicht (mehr), sondern Sie k\u00f6nnen schonmal mit der Semesteraufgabe beginnen. Video zur Vorlesung am 16.06.2021","title":"Woche 9 (Hintergrundsynchronisation)"},{"location":"#woche-10-push-benachrichtigungen","text":"Woche 10 - Push-Benachrichtigungen Diese Woche machen wir uns mit der Push-benachrichtigung vertraut. Diese verwenden wir, um die Nutzerinnen zu informieren, dass es \u00c4nderungen (Updates/Aktuelles) in der Webanwendung gibt. Die Nutzerinnen werden so an die Anwendung gebunden, denn Push-Notifications erh\u00f6hen das Interesse daran, die Anwendung erneut zu \u00f6ffnen. Eine neue \u00dcbung gibt es nicht (mehr), sondern Sie k\u00f6nnen (schonmal) mit der Semesteraufgabe beginnen/weitermachen. Video zur Vorlesung am 23.06.2021 - kommt noch","title":"Woche 10 (Push-Benachrichtigungen)"},{"location":"#woche-11-kamera-und-geolocation","text":"Woche 11 - Kamera und Geolocation Diese Woche machen wir uns mit der Anwendung der Kamera und der Geolocation-API vertraut. Wir streamen Videos und nehmen Fotos auf. Diese speichern wir im Backend. Wir haben dadurch nun auch aus der HTW-Insta -App die M\u00f6glichkeit, Posts zu speichern. Au\u00dferdem ermitteln wir mithilfe der Geolocation-API unseren aktuellen Standort. Diese Art der Ger\u00e4tezugriffe war lange aus Webanwendungen nicht m\u00f6glich, ist nun aber mit zunehmend mehr APIs und Browserunterst\u00fctzung auch f\u00fcr (progressive) Webanwendungen verf\u00fcgbar. Es gibt auch noch einen kurzen Abschnitt Zusammenfassung , der ein kurzes Tutorial enth\u00e4lt, wie eine Angular-Anwendung progressive gestaltet werden kann und auch einen kurzen Ausblick. Video zur Vorlesung am 30.06.2021 - kommt noch","title":"Woche 11 (Kamera und Geolocation)"},{"location":"#semesteraufgabe","text":"Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend sollte responsive sein, ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (das kann auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden. Sollten wir es noch schaffen, kommen auch Push-Nachrichten in Betracht. Von den Punkten 5.-10. sollten 4 implementiert sein. Die soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Diese Liste wird noch um Hinweise zur Bewertung angepasst.","title":"Semesteraufgabe"},{"location":"backend/","text":"Backend - REST-Server \u00b6 Ehe wir uns der IndexedDB-API zuwenden, erstellen wir zun\u00e4chst eine \"richtige\" Datenbank f\u00fcr unsere Posts. F\u00fcr diese Datenbank stellen wir die Implementierung einer Schnittstelle bereit, so dass wir die wesentlichen Datenbankanfragen dar\u00fcber ausf\u00fchren k\u00f6nnen. Diese wesentlichen Datenbankfragen werden mit CRUD abgek\u00fcrzt, f\u00fcr **C**reate, **R**ead, **U**pdate und **D**elete. Das bedeutet, wir implementieren Funktionalit\u00e4ten, mit denen wir einen neuen post in die Datenbank einf\u00fcgen ( create ), aus der Datenbank auslesen ( read ), in der Datenbank aktualisieren ( update ) und aus der Datenbank l\u00f6schen ( delete ) k\u00f6nnen. Die Schnittstelle, die wir implementieren, ist eine sogenannte REST-API . REST steht f\u00fcr Representational State Transfer und basiert auf einigen wenigen Prinzipien: Alles wird als eine Ressource betrachtet, z.B. post . Jede Ressource ist durch URIs ( Uniform Resource Identifiers ) eindeutig identifizierbar, z.B. http://localhost/posts . Es werden die Standard-HTTP-Methoden verwendet, also GET , POST , PUT , UPDATE . Ressourcen k\u00f6nnen in verschiedenen Formaten vorliegen, z.B. in HTML , XML , JSON , ... Die Kommunikation ist zustandslos . Jede einzelne HTTP-Anfrage wird komplett isoliert bearbeitet. Es gibt keinerlei Anfragehistorie. Das bedeutet, wir erstellen ein Backend (einen REST-Server), an den HTTP-Anfragen mit der eindeutig identifizierbaren Ressource gestellt werden. Das Backend erstellt daraus die entsprechende SQL-Query. Das Resultat der Datenbankanfrage wird im JSON - oder HTML - oder XML - oder in einem anderen Format bereitsgestellt. Prinzipiell gibt es also ein Mapping von HTTP-Anfragen auf SQL-Anfragen: CRUD SQL HTTP create INSERT POST read SELECT GET update UPDATE PUT delete DELETE DELETE F\u00fcr das von uns hier zu erstellende Backend soll folgende REST-API umgesetzt werden: Methode URL Bedeutung GET /posts hole alle Datens\u00e4tze GET /posts/11 hole den Datensatz mit der id=11 POST /posts f\u00fcge einen neuen Datensatz hinzu PUT /posts/11 \u00e4ndere den Datensatz mit der id=11 DELETE /posts/11 l\u00f6sche den Datensatz mit der id=11 Dazu erstellen wir uns zun\u00e4chst die Datenbank. Die posts -Datenbank \u00b6 Die Datenbank ist simpel, sie besteht aus einer einzigen Tabelle posts , welche vier Attribute enth\u00e4lt: id , title , location und image . Die id ist der Prim\u00e4rschl\u00fcssel und das image ist vom Typ longblob . Es h\u00e4tte wohl auch mediumblob ausgereicht, denn damit k\u00f6nnen immerhin Bilder von 16 MB Gr\u00f6\u00dfe gespeichert werden. Das SQL-Skript zur Einrichtung der Datenbank posts kommt hier: posts.sql -- phpMyAdmin SQL Dump -- version 5.0.2 -- https://www.phpmyadmin.net/ -- -- Host: localhost -- Erstellungszeit: 14. Mai 2021 um 14:47 -- Server-Version: 8.0.17 -- PHP-Version: 7.3.24-(to be removed in future macOS) SET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\" ; START TRANSACTION ; SET time_zone = \"+00:00\" ; /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */ ; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */ ; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */ ; /*!40101 SET NAMES utf8mb4 */ ; -- -- Datenbank: `posts` -- -- -------------------------------------------------------- -- -- Tabellenstruktur f\u00fcr Tabelle `posts` -- CREATE TABLE ` posts ` ( ` id ` int ( 11 ) NOT NULL , ` title ` varchar ( 30 ) NOT NULL , ` location ` varchar ( 30 ) NOT NULL , ` image ` longblob NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Indizes der exportierten Tabellen -- -- -- Indizes f\u00fcr die Tabelle `posts` -- ALTER TABLE ` posts ` ADD PRIMARY KEY ( ` id ` ); -- -- AUTO_INCREMENT f\u00fcr exportierte Tabellen -- -- -- AUTO_INCREMENT f\u00fcr Tabelle `posts` -- ALTER TABLE ` posts ` MODIFY ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 3 ; COMMIT ; /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */ ; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */ ; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */ ; Die Datei k\u00f6nnen Sie auch hier herunterladen , um sie dann unter phpmyadmin zu importieren. Sie ist aber sehr lang, da sie auch bereits zwei Eintr\u00e4ge enth\u00e4lt und die base64 -Kodierung der Bilder sehr gro\u00df ist. MySQL auf dem Studi-Server \u00b6 Falls Sie MySQL vom Studi-Server verwenden, dann m\u00fcssen Sie COLLATE = utf8mb4_0900_ai_ci durch COLLATE = utf8mb4_general_ci ersetzen! Daf\u00fcr ist aber hier auch die entsprechende Datei zum Download . Wenn Sie den Studi-Server verwenden, k\u00f6nnen Sie in dieser Oberfl\u00e4che eine neue Datenbank erstellen: Klicken Sie auf Neue Datenbank erstellen und geben Sie dann posts ein (der Name Ihrer Datenbank). Beachten Sie, dass daraus ein neuer Name f\u00fcr Ihre Datenbank durch die Studi-Server-Webanwendung erzeugt wird, n\u00e4mlich _s05xxx__posts , also Unterstrich + ihreMatrikelnummer + 2 x Unterstrich + posts . Gehen Sie dann auf phpMyAdmin , w\u00e4hlen links die Datenbank aus ( _s05xxx__posts ), klicken Sie dann auf den Reiter Importieren und laden diese Datei hoch. Klicken Sie Ok . Die Datenbank sollte dann mit zwei Eintr\u00e4gen bef\u00fcllt sein. Die sp\u00e4tere Konfigurationsdatei f\u00fcr die Datenbank im Backend sieht auch anders aus. Wir schreiben es nur hier schonmal hin, weil es das hier behandelte Thema Studi-Server betrifft: Konfiguration f\u00fcr die lokale Datenbank module . exports = { HOST : \"localhost\" , USER : \"root\" , PASSWORD : \"IhrPasswort\" , DB : \"posts\" }; Studi_Server: Konfiguration f\u00fcr den Studi-Server\" module . exports = { HOST : \"db.f4.htw-berlin.de\" , USER : \"s05xxx\" , PASSWORD : \"IhrPassword\" , DB : \"_s05xxx__posts\" }; Wir haben nun eine Datenbank posts mit einer Tabelle posts , die 4 Attribute ( id , title , location und image )besitzt und 2 Eintr\u00e4ge enth\u00e4lt. Das Backend - der REST-Server \u00b6 Wir erzeugen uns das Backend mithilfe von Node.js . Insbesondere verwenden wir dabei einige Module, die uns die Arbeit mit HTTP und MySQl erleichtern. Dazu geh\u00f6rt zun\u00e4chst das Framework Express , welches uns einen HTTp_Server zur Verf\u00fcgung stellt und dar\u00fcber hinaus noch einige Funktionalit\u00e4ten, wie z.B. Routing . Node.js-Projekt erstellen und Express importieren \u00b6 Wir erstellen uns zun\u00e4chst einen Ordner backend und wechseln in diesen Ordner. mkdir backend cd backend Wir initialisieren das Node.js -Projekt, um uns eine package.json erstellen zu lassen, in der die Paketabh\u00e4ngigkeiten verwaltet werden: npm init Sie k\u00f6nnen im Prinzip alle Fragen mit Enter beantworten. Ich habe als entry point hier bereits server.js (anstelle von index.js ) gew\u00e4hlt. Das k\u00f6nnen wir aber auch gleich noch in der package.json \u00e4ndern. Hier die Ausgabe auf der Kommandozeile: This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See ` npm help init ` for definitive documentation on these fields and exactly what they do . Use ` npm install <pkg> ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: ( backend ) version: ( 1 .0.0 ) description: REST-Server f\u00fcr posts-Datenbank entry point: ( index.js ) server.js test command: git repository: keywords: IKT, PWA, REST-API, Backendend, posts author: J. Freiheit license: ( ISC ) About to write to /Users/jornfreiheit/Sites/PWA/backend/package.json: { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" } , \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ] , \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" } Is this OK? ( yes ) Bst\u00e4tigen Sie mit Enter . Nun \u00f6ffnen wir das backend -Projekt in einer IDE. Das gesamte Projekt enth\u00e4lt bis jetzt nur die package.json -Datei. Tragen Sie dort (falls es nicht bereits so konfiguriert ist) f\u00fcr die Eigenschaft \"main\" den Wert \"server.js\" ein: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" } Nun installieren wir Express und geben dazu im Terminal npm install express ein. Wenn Sie sich nun die package.json erneut anschauen, stellen Sie fest, dass darin nun eine Paketabh\u00e4ngigkeit zum express -Paket konfiguriert ist: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" } } server.js erstellen und implementieren \u00b6 Nun erzeugen wir uns im Verzeichnis backend eine Datei server.js . Diese Datei ist der Einstiegspunkt unseres Backends und wird ausgef\u00fchrt, wenn wir das backend -Projekt ausf\u00fchren. Die server.js implementieren wir zun\u00e4chst wie folgt: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import express from 'express' ; const app = express (); const PORT = 3000 ; app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Das bedeutet, wir importieren express (Zeile 1 ), erzeugen uns davon eine Objekt und speichern dieses in der Variablen app (Zeile 3 ). Wir legen in einer Konstanten PORT die Portnummer 3000 fest(Zeile 4 - die Portnummer k\u00f6nnen Sie w\u00e4hlen). Das backend ist somit unter http://localhost:3000 verf\u00fcgbar. Wenn wir diese URL aufrufen, dann wird ein request ausgel\u00f6st, den wir hier mit Hello FIW! als response beantworten (Zeilen 6-8 ). Das eigentliche Starten des Webservers erfolgt in den Zeilen 10-16 . \"type\":\"module\" in package.json einf\u00fcgen \u00b6 In Zeile 1 in der server.js haben wir das express -Paket mittels import express from 'express' ; importiert. Dies entspricht der \"neuen\" Syntax zum Importieren eines ES6 -Modules ( ES6 - ECMAScript 6). \"Fr\u00fcher\" hat man stattdessen const express = require ( 'express' ) ; geschrieben. Allerdings erfordert diese \"neue\" Syntax eine Erweiterung in der package.json : package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" } } Starten des Projektes und Installation von nodemon \u00b6 Das Projekt l\u00e4sst sich nun starten. Wir geben dazu im Terminal im backend -Ordner node server.js ein. Im Terminal erscheint Server started and listening on port 3000 ... und wenn Sie im Browser die URL http://localhost:3000/ eingeben, wird dort HELLO FIW! angezeigt. Wann immer wir jetzt jedoch etwas an der Implementierung \u00e4ndern, m\u00fcssen wir im Terminal zun\u00e4chst den Webserver mit Strg-C // bzw. Control-C stoppen, um ihn dann wieder mit node server.js zu starten. Um das zu umgehen, gibt es das Paket nodemon . Da es nur sinnvoll w\u00e4hrend der Entwicklung eingesetzt werden kann (und sollte), installieren wir es als eine development dependency : npm install --save-dev nodemon Die package.json sieht daraufhin so aus: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Zur Verwendung von nodemon f\u00fcgen wir in die package.json unter \"scripts\" noch die Eigenschaft watch (frei gew\u00e4hlt) und den dazugeh\u00f6rigen Wert nodemon server.js ein: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Nun l\u00e4sst sich die Anwendung mithilfe von nodemon per npm run watch starten und muss auch nicht mehr gestoppt und neu gestartet werden, wenn \u00c4nderungen an der Implementierungen durchgef\u00fchrt wurden. Die Ausgabe im Terminal nach Eingabe von npm run watch ist ungef\u00e4hr so: > backend@1.0.0 watch > nodemon ./server.js [ nodemon ] 2 .0.7 [ nodemon ] to restart at any time, enter ` rs ` [ nodemon ] watching path ( s ) : *.* [ nodemon ] watching extensions: js,mjs,json [ nodemon ] starting ` node ./server.js ` Server started and listening on port 3000 ... Konfiguration der Datenbank \u00b6 In diesem Abschnitt stellen wir die Verbindung zwischen backend und Datenbank her. Dazu ist es erforderlich, das mysql -Paket zu importieren (es enth\u00e4lt Funktionalit\u00e4ten f\u00fcr die Verbindung mit einer MySQL-Datenbank sowie f\u00fcr die SQL-Anfragen), die Zugangsdaten zu konfigurieren (Nutzer, Datenbankhost, Passwaort, Name der Datenbank), die eigentliche Verbindung herzustellen. Wir werden diese backend -Implementierung bewusst flach halten und verzichten deshalb auf strukturierende Ordner. Es w\u00e4re aber sehr sinnvoll und ist auch ratsam, hier unterschiedliche Ordner einzuf\u00fcgen (z.B. config , database , model usw.). Wir erzeugen uns im backend -Ordner eine db.config.js (da diese Datei auch Ihr Passowrt enth\u00e4lt, k\u00f6nnen Sie sie auch au\u00dferhalb des Projektes anlegen oder eine separate Passwortdatei au\u00dferhalb des Projektes): db.config.js /* * eine der beiden folgenden dbConfig-Objekte muessen auskommentiert werden! */ /* * Konfigurationsdaten fuer die Verbindung mit localhost */ export const dbConfig = { HOST: \"localhost\", USER: \"root\", PASSWORD: \"IhrPasswort\", DB: \"posts\" }; /* * Konfigurationsdaten fuer die Verbindung mit studi.f4.htw-berlin.de */ /* exports const dbConfig = { HOST: \"db.f4.htw-berlin.de\", USER: \"s05xxx\", PASSWORD: \"IhrPassword\", DB: \"_s05xxx__posts\" }; */ Nun erstellen wir noch ein Skript db.connection.js , mit dem wir die eigentliche Verbindung zur Datenbank herstellen. Dazu installieren wir zun\u00e4chst das mysql -Paket. Wir geben im backend -Ordner im Terminal npm install mysql ein. Die package.json wird daraufhin entsprechend erweitert: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Die db.connection.js sieht dann so aus: db.connection.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import mysql from 'mysql' ; import { dbConfig } from './db.config.js' ; export const connection = mysql . createConnection ({ host : dbConfig . HOST , user : dbConfig . USER , password : dbConfig . PASSWORD , database : dbConfig . DB , }); connection . connect (( error ) => { if ( error ) throw error ; console . log ( \"Connected with database ... \" ); }); Wir importieren in Zeile 1 das mysql -Modul und wir importieren in Zeile 2 die soeben festgelegten Zugangsdaten zur Datenbank. Mithilfe der createConnection() -Funktion aus dem mysql -Paket werden diese Zugangsdaten eingelesen (Zeilen 4-9 ). Die eigentliche Verbindung zur Datenbank wird dann mit connect() -Funktion des mysql -Paketes hergestellt. Ob dieses Skript tats\u00e4chlich funktioniert, k\u00f6nnten wir ausprobieren, indem wir im Terminal den Befehl node db.connection.js eingeben. Es sollte Connected with database ... ausgegeben werden. Implementieren der Datenbankanfragen \u00b6 Wir haben nun eine Verbindung zur Datenbank hergestellt. Nun wollen wir auch Anfragen an die Datenbank stellen. F\u00fcr Anfragen an die Datenbank stellt das mysql -Paket die Funktion query() zur Verf\u00fcgung. Diese Funktion bekommt als ersten Parameter die entsprechende SQL-Anfrage \u00fcbergeben. Die allgemeine Syntax der query() -Funktion ist wie folgt: . query ( sqlString , values , callback ) Der erste Parameter ist also der sqlString , z.B. \"DELETE FROM posts\" , was alle Eintr\u00e4ge in der posts -Tabelle l\u00f6scht. H\u00e4ufig enthalten diese SQL-Anfragen aber Platzhalter f\u00fcr Argumente, also z.B. \"DELETE FROM posts WHERE id = ?\" . Das ? steht f\u00fcr einen konkreten Wert f\u00fcr eine id . Diese Werte werden bei values angegeben, wobei es sich bei values um ein Array handelt. Die callback -Funktion kann drei Parameter enthalten, typischerweise werden aber nur die ersten beiden error und results abgefragt. error gibt den Fehler zur\u00fcck, falls er bei der Anfrage erzeugt wird. result gibt das Resultat der SQL-Anfrage zur\u00fcck, also entweder die angefragten Datens\u00e4tze oder die Anzahl der Zeilen, die von der Anfrage betroffen waren. Wir implementieren folgende Anfragen: sql.query(\"INSERT INTO posts SET ?\", newPost, (err, res) => {}); f\u00fcgt newPost in die Tabelle posts ein, sql.query(\"SELECT * FROM posts\", (err, res) => {}); fragt alle Eintr\u00e4ge aus der Tabelle posts ab, sql.query(\"UPDATE posts SET ? where id= ?\", [post, id], (err, res) => {}); aktualisiert den Eintrag mit der id==id und verwendet dazu die neuen Daten post , sql.query(\"DELETE FROM posts WHERE id = ?\", [id], (err, res) => {}); l\u00f6scht den Eintrag mit der id==id , sql.query(\"DELETE FROM posts\", (err, res) => {}); f\u00fcgt newPost in die Tabelle posts ein, Diese Anfragen implmentieren wir in einem JavaScript-Objekt, das wir PostService nennen und dessen Eigenschaften JavaScript-Funktionen sind. Dazu erstellen wir uns eine Datei db.sqlqueries.js mit folgendem Inhalt: db.sqlqueries.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import { connection as sql } from './db.connection.js' ; export const PostService = { create : async ( newPost , result ) => { sql . query ( \"INSERT INTO posts SET ?\" , newPost , ( err , res ) => { if ( err ) result ( err , null ); else result ( null , { id : res . postId , ... newPost }); }); }, findById : async ( postId , result ) => { sql . query ( `SELECT * FROM posts WHERE id = ?` , [ postId ], ( err , res ) => { if ( err ) result ( err , null ); else if ( res . length ) result ( null , res [ 0 ]); else result ({ message : \"post not found\" }, null ); } ); }, getAll : async ( result ) => { sql . query ( \"SELECT * FROM posts\" , ( err , res ) => { if ( err ) result ( null , err ); else result ( null , res ); }); }, updateById : async ( id , post , result ) => { sql . query ( \"UPDATE posts SET ? where id= ?\" , [ post , id ], ( err , res ) => { if ( err ) result ( null , err ); else if ( res . affectedRows == 0 ) result ({ message : \"post not found\" }, null ); else result ( null , { id : id , ... post }); } ); }, remove : async ( id , result ) => { sql . query ( \"DELETE FROM posts WHERE id = ?\" , id , ( err , res ) => { if ( err ) result ( null , err ); else if ( res . affectedRows == 0 ) result ({ message : \"post not found\" }, null ); else result ( null , res ); }); }, removeAll : async ( result ) => { sql . query ( \"DELETE FROM posts\" , ( err , res ) => { if ( err ) result ( null , err ); else result ( null , res ); }); }, }; Es werden also sechs Funktionen definiert, create() , findById() , getAll() , updateById() , remove() und removeAll() . F\u00fcr die Funktionen werden die entsprechenden, oben aufgelisteten, SQL-Anfragen ausgef\u00fchrt. Einige Besonderheiten bei den Resultaten sind noch erw\u00e4hnenswert: Die INSERT INTO... -Anfrage liefert als Resultat den gesamten eingef\u00fcgten Datensatz zur\u00fcck (Zeile 7 ). Die id wird jedoch automatisch durch die Datenbank vergeben ( auto-inkrement ). Das bedeutet, newPost enth\u00e4lt die Daten f\u00fcr title , location und image und das Resultat enth\u00e4lt dar\u00fcber hinaus die neue id . Die Syntax ...newPost steht f\u00fcr den spread operator und setzt dort im Prinzip das newPost -Objekt ein, separiert in die key-value-Paare. Die SELECT * FROM posts WHERE id = ? -Anfrage hat drei m\u00f6gliche Antworten (Zeilen 14-16 ). Entweder einen Fehler oder der Datensatz wird nicht gefunden, weil es die \u00fcbergebene id nicht gibt, oder den gefundenen Datensatz. SELECT * FROM -Anfragen leifern ein Array zur\u00fcck. Da die SELECT * FROM posts WHERE id = ? maximal genau einen Datensatz zur\u00fcckgeben kann, greifen wir direkt auf res[0] zu (Zeile 15 ). In den anderen Funktionen finden sich teilweise Kombinationen aus den beiden zuvor genannten Beispielen. Implementieren des Controllers \u00b6 Die Datenbankanfragen erwarten unterschiedliche Werte f\u00fcr die jeweiligen parameter. F\u00fcr manche Anfragen muss eine id \u00fcbergeben werden, f\u00fcr andere ein post -Objekt mit Werten f\u00fcr title , location und image , die updateById() -Funktion ben\u00f6tigt beides und die removeAll() -Funktion nichts davon. Diese unterschiedlichen Werte m\u00fcssen erst aus den Anfragen extrahiert werden. Dazu dient uns der Controller , den wir nun implementieren. Er stellt die Schnittstelle zwischen den REST-API-Anfragen und den Datenbankanfragen dar. Wir erzeugen uns eine posts.controller.js mit folgendem Inhalt: posts.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 import { PostService } from './db.sqlqueries.js' ; export const PostController = { readAll : ( req , res ) => { PostService . getAll (( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting all posts\" , }); else res . json ( result ); }); }, create : ( req , res ) => { if ( ! req . body ) { res . status ( 400 ). send ({ message : \"Content can not be empty!\" , }); } const post = {... req . body }; PostService . create ( post , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while creating the post.\" , }); else res . json ( result ); }); }, delete : ( req , res ) => { PostService . remove ( req . params . postId , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while delete the post\" , }); else res . json ( result ); }); }, update : ( req , res ) => { if ( ! req . body ) { res . status ( 400 ). send ({ message : \"Content can not be empty!\" , }); } const post = {... req . body }; PostService . updateById ( req . params . postId , post , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while update the post\" , }); else res . json ( result ); } ); }, readOne : ( req , res ) => { PostService . findById ( req . params . postId , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting one post\" , }); else res . json ( result ); }); }, }; Die grunds\u00e4tzliche Idee ist zun\u00e4chst die gleiche, wie bei PostService . Wir erstellen wiederum eine JavaScript-Objekt, dessen Eigenschaften Funktionen sind. In den Funktionen werden dann die entsprechenden Funktionen aus dem PostService aufgerufen. Die prinzipielle Idee des PostControllers ist, neben dem Aufruf der jeweiligen Funktion von PostService den Funktionsaufruf so vorzubereiten, dass die entsprechenden Daten korrekt und vollst\u00e4ndig \u00fcbergeben werden. Au\u00dferdem werden die resultate der Datenbank jeweils als JSON zur\u00fcckgesendet bzw. werden entsprechende Fehler gesendet, die durch die Auswertungen der Fehler aus dem postService generiert werden. Betrachten wir einige ausgew\u00e4hlte Funktionen aus dem PostController : Die readAll() -Funktion ruft die getAll() -Funktion, d.h. es sollen alle Datens\u00e4tze aus der posts -tabelle zur\u00fcckgeliefert werden. Liefert die getAll() -Funktionen einen Fehler, dann schickt die readAll() -Funktionen eine Fehlermeldung mit Statuscode 500 (siehe auch HTTP-Statuscode ) mit entweder der Fehler- message oder mit der Nachricht \"Some error occurred while getting all posts\" an den Aufrufer (Zeilen 7-10 ). Wenn alles korrekt l\u00e4uft, d.h. die Datens\u00e4tze von der getAll() -Funktion geliefert werden, dann erzeugt die readAll() -Funktion daraus ein JSON und schickt dieses an den Aufrufer zur\u00fcck (Zeile 11 ). Die create() -Funktion ruft die create() -Funktion des PostService auf. Dazu muss jedoch erst der Datensatz erstellt werden, der in die Datenbank eingef\u00fcgt werden soll. Dieser Datensatz wird aus dem body des requests extrahiert. Ist dieser body leer oder existiert gar nicht, wird eine Fehlermeldung mit Statuscode 400 als Response gesendet. Aus dem body des requests wird ansonsten ein neues post -Objekt erzeugt. Hier wird erneut der spread operator verwendet und somit alle Schl\u00fcssel-Werte-Paare aus body in das Objekt eingef\u00fcgt (Zeile 21 ). Dieses post -Objekt wird der Methode create() des PostService \u00fcbergeben. Das result der create() -Methode des PostService ist der gesamte \"neue\" Datensatz inkl. der von der Datenbank vergebenen id . Die update() -Methode ist \u00e4hnlich der create() -Funktion, aber hier wird zus\u00e4tzlich noch die id \u00fcbergeben, die verwendet werden soll, um den Datensatz zu identifiezieren, der aktualisiert werden soll. Diese id ist nicht Teil des req.body , sondern wird als Wert der URL mitgegeben, d.h. es erfolgt ein Aufruf der Form http://localhost:3000/posts/11 und die 11 wird als id verwendet. Mithilfe von params kann die URL des requests ausgelesen werden. Die postId wird gleich in der service.js definiert werden. Wir haben \u00fcbrigens keine Funktion im PostController definiert, die die Funktion removeAll() aus dem PostService aufruft, damit wir nicht ausversehen alle Datens\u00e4tze aus unserer Datenbank l\u00f6schen. server.js um Endpunkte erweitern \u00b6 Uns stehen jetzt die wesentlichen Funktionen zur Verf\u00fcgung, um CRUD-Anfragen durchzuf\u00fchren. Uns fehlt noch der letzte Schritt, n\u00e4mlich die Endpunkte unserer REST-API mit den entsprechenden Funktionen des Controllers zu verkn\u00fcpfen. Unter den Endpunkten der REST-API verstehen wir die URI der Ressource, die angefragt wird zusammen mit der HTTP-Anfragemethode, mit der diese Ressource angefragt wird. Wir definieren folgende Endpunkte: GET http://localhost:3000/posts - Aufruf von readAll() im PostController GET http://localhost:3000/posts/:postId - Aufruf von readOne() im PostController , postId bekommt einen konkreten Wert POST http://localhost:3000/posts - Aufruf von create() im PostController PUT http://localhost:3000/posts/:postId - Aufruf von update() im PostController , postId bekommt einen konkreten Wert DELETE http://localhost:3000/posts/:postId - Aufruf von delete() im PostController , postId bekommt einen konkreten Wert Die Erweiterung von server.js sieht dann so aus: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import express from 'express' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Das express -Modul liefert uns also entsprechende Funktionen f\u00fcr die einzelnen HTTP-Anfragen, d.h. .get() f\u00fcr GET -Anfragen, .post() f\u00fcr POST -Anfragen usw. Pro Endpunkt wird die entsprechende Funktion aus dem PostController aufgerufen. Dieser muss daf\u00fcr importiert werden (Zeile 2 ). Wenn wir nun im Browser http://localhost:3000/posts eingeben, dann entspricht das der Anfrage GET http://localhost:3000/posts und somit dem Aufruf von PostController.readAll() . Tats\u00e4chlich werden uns im Browser die beiden Datens\u00e4tze angezeigt (schalten Sie die Darstellung auf Raw ), allerdings sind die Werte f\u00fcr die Bilder leider sehr lang. Mit dem Browser k\u00f6nnen wir auch noch den zweiten GET -Endpunkt testen, n\u00e4mlich GET http://localhost:3000/posts/:postId . F\u00fcr id sind bis jetzt in der Datenbank die Werte 1 und 2 vergeben, d.h. wir k\u00f6nnten GET http://localhost:3000/posts/1 und GET http://localhost:3000/posts/2 testen. Wenn wir eine andere Zahl als 1 oder 2 versuchen, erhalten wir die in der findById() -Funktion im PostService definierte Fehlermeldung als JSON { message: \"post not found\" } . Backend f\u00fcr gr\u00f6\u00dfere Daten erweitern \u00b6 Wenn wir jetzt ausprobieren w\u00fcrden, einen neuen Datensatz in die Datenbank einzuf\u00fcgen (siehe Abschnitt Testen mit Postman ), erhalten wir einen Fehler, dass der Request gar nicht erst gesendet werden konnte. Der Grund daf\u00fcr ist, dass der Webserver in express in den Standardeinstellungen nicht mit so gro\u00dfen Daten im Request umgehen kann. Wir ben\u00f6tigen deshalb noch eine kleine Erweiterung in der server.js : server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import express from 'express' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Mit diesen beiden Anweisungen erh\u00f6hen wir die Gr\u00f6\u00dfe der zu \u00fcbetragenden daten in einem Request auf 20Mb . Sie k\u00f6nnen auch einen noch gr\u00f6\u00dferen Wert hier w\u00e4hlen. F\u00fcr unsere Bed\u00fcrfnisse gen\u00fcgt sogar die Anweisung in Zeile 8 , aber f\u00fcr den Fall, dass wir auch gro\u00dfe Datenmengen direkt in der URL \u00fcbertragen wollen (als GET dann), sehen wir bereits Anweisung in Zeile 7 vor. Cross-Origin Resource Sharing (CORS) \u00b6 Die Same Origin Policy (SOP) ist ein Sicherheitskonzept, das clientseitig Skriptsprachen (also z.B. JavaScript oder CSS) untersagt, Ressourcen aus verschiedenen Herkunften zu verwenden, also von verschiedenen Servern. Dadurch soll verhindert werden, dass fremde Skripte in die bestehende Client-Server-Kommunikation eingeschleust werden. Gleiche Herkunft (origin) bedeutet, dass das gleiche Protokoll (z.B. http oder https ), von der gleichen Domain (z.B. localhost oder htw-berlin ) sowie dem gleichen Port (z.B. 80 oder 4200 ) verwendet werden. Es m\u00fcssen alle drei Eigenschaften \u00fcbereinstimmen. Mit dem Aufkommen von Single Page Applications und dem darin ben\u00f6tigten AJAX kam jedoch der Bedarf auf, die SOP aufzuweichen. Es sollte m\u00f6glich sein, dass z.B. JavaScript sowohl client-seitig das DOM \u00e4ndert, als auch einen Request an den Server (das Backend) sendet. Der Kompromiss, der daf\u00fcr gefunden wurde, nennt sich Cross-Origin Resource Sharing (CORS) . Damit ist es m\u00f6glich, f\u00fcr einige oder alle Anfragen zu definieren, dass sie im Sinne der SOP trotzdem erlaubt sein sollen. Um CORS f\u00fcr Ihr Backend zu aktivieren, wechseln Sie im Terminal in Ihren backend -Ordner und geben dort npm install cors ein. Die package.json sieht danach so aus: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } \u00d6ffnen Sie dann die server.js und f\u00fcgen Sie die hervorgehobenen Zeilen ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import express from 'express' ; import cors from 'cors' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . use ( cors ()); app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Falls Sie z.B. nur die get -Anfrage teilen wollen, dann w\u00e4hlen Sie nicht app.use(cors()); , sondern app . get ( \"/\" , cors (), ( req , res ) => { res . json ({ message : \"HELLO FIW!\" }); }); Mehr zum CORS-Paket von node.js bzw. express finden Sie hier . Testen mit Postman \u00b6 Wenn die Datenbank eingerichtet ist und das Backend gestartet, k\u00f6nnen wir es mit Postman ausprobieren. Wir haben das \"kleine\" Problem, dass die Daten f\u00fcr ein Bild sehr lang sind. Prinzipiell sieht ein post im JSON-Format so aus: { \"title\" : \"first post\" , \"location\" : \"Berlin\" , \"image\" : \"/9j/4AAQSkZJRgAB/9k=\" } Das hei\u00dft, wir \u00fcbergeben einen Wert f\u00fcr title , einen f\u00fcr location und einen f\u00fcr image . Der Wert f\u00fcr image ist allerdings ein Bild im Base64 -Format. Sie k\u00f6nnen Bilder in das Base64 -Format online umwandeln lassen, z.B. hier . Der Wert beginnt dann immer mit data:image/jpeg;base64, Diesen Teilstring wollen jedoch gar nicht mitspeichern. Insgesamt ist der Umgang mit so langen Daten leider recht schwierig, so dass wir uns lieber noch ein Frontend erstellen, um Daten in die Datenbank einzuf\u00fcgen und wieder auszulesen. Sie k\u00f6nnen trotzdem einmal probieren, ob die Eintragung klappt. Rufen Sie in Postman dazu POST http://localhost:3000/posts auf und \u00fcbergeben im Body (als JSON ) folgenden Eintrag: POST http://localhost:3000/posts { \"title\" : \"third post\" , \"location\" : \"Gebaeude C\" , \"image\" : \"\" } Probieren Sie in Postman auch ruhig mal GET http://localhost:3000/posts/1 und/oder GET http://localhost:3000/posts aus. Sie werden sehen, dass das image ein eigenes JSON mit den Schl\u00fcssel-Wertepaaren \"image\" : { \"type\" : \"Buffer\" , \"data\" : [ ] } ist. Nachdem Sie den dritten Datensatz eingef\u00fcgt haben, k\u00f6nnen Sie ja auch mal versuchen, ihn wieder zu l\u00f6schen. Testen des Backends mit Mocha und Chai \u00b6 W\u00e4hrend wir mit Postman uns Ergebnisse der Anfragen nur stichprobenartig anschauen k\u00f6nnen, schreiben wir mithilfe von Mocha und Chai \"richtige\" Tests. Zur Installation geben wir im Terminal im backend -Ordner ein: npm install --save-dev mocha npm install --save-dev chai npm install --save-dev chai-http Danach sieht unsere package.json so aus (enth\u00e4lt auch schon eine weitere \u00c4nderung): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"mocha ./tests.js\" }, \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" }, \"devDependencies\" : { \"chai\" : \"^4.3.4\" , \"chai-http\" : \"^4.3.0\" , \"mocha\" : \"^8.4.0\" , \"nodemon\" : \"^2.0.7\" } } Unter den devDependencies wurden also die neu installierten Module hinzugef\u00fcgt. Beachten Sie auch die \u00c4nderung in Zeile 9 . Dort rufen wir nun mocha unter \"scripts\".\"tests\" auf, zusammen mit einer Datei tests.js , die unsere Testf\u00e4lle enth\u00e4lt. Diese Datei legen wir uns im Ordner backend an und bef\u00fcllen Sie zun\u00e4chst wie folgt: tests.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import chai from 'chai' ; import chaiHttp from 'chai-http' ; import { app as server } from './server.js' ; let should = chai . should (); chai . use ( chaiHttp ); describe ( 'Posts' , () => { /* * Test the /GET route */ describe ( '/GET /posts' , () => { it ( 'it should GET all the posts' , ( done ) => { chai . request ( server ) . get ( '/posts' ) . end (( err , res ) => { res . should . have . status ( 200 ); res . body . should . be . a ( 'array' ); res . body . length . should . be . eql ( 3 ); done (); }); }); }); }); In den Zeilen 1 und 2 importieren wir das chai - und chai-http -Modul. Damit wir auch app als Modul aus der server.js importieren k\u00f6nnen, muss dieses exportiert werden. Wir f\u00fcgen dazu in server.js vor const app = express(); noch export ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import express from 'express' ; import { PostController } from './posts.controller.js' ; export const app = express (); const PORT = 3000 ; app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'Hello FiW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listeneing on port ${ PORT } ...` ); } }); Zur\u00fcck zur tests.js : Mit describe() in Zeile 9 beginnt das Testen. Dieser Block enth\u00e4lt alle Tests. Derzeit ist nur ein Test implementiert. Dieser Test ist in den Zeilen 13-24 implementiert. Er testet die GET /posts -Anfrage, also das Lesen aller Datens\u00e4tze. Es wird darin definiert, dass die Anfrage mit dem Statuscode 200 beantwortet werden muss (Zeile 18 , die R\u00fcckgabe ein Array sein muss ( Zeile 19 ) und die Anzahl der Datens\u00e4tze (die L\u00e4nge des Arrays) 3 sein muss (Zeile 20 ). Gestartet wird der Test mit npm test im backend -Ordner. Die Ausgabe sieht so aus: > backend@1.0.0 test > mocha ./tests.js Server started and listeneing on port 3000 ... Posts /GET /posts Connected with database ... \u2713 it should GET all the posts ( 65ms ) 1 passing ( 75ms ) Das Connected with database ... st\u00f6rt dabei und sollte f\u00fcr das Testen wohl am besten aus der db.connection.js entfernt werden. Wir f\u00fcgen noch einen weiteren Test f\u00fcr POST /posts ein. Weil die Daten f\u00fcr image aber so gro\u00df sind, pr\u00fcfen wir stattdessen inen Fehlerfall, n\u00e4mlich, wenn wir versuchen einen unvollst\u00e4ndigen Datensatz einzuf\u00fcgen. Wir versuchen einen Datensatz einzuf\u00fcgen, bei dem die image -Eigenschaft fehlt. Daf\u00fcr erwarten wir einen Fehler. Die weitere Testfunktion dazu ist in den Zeilen 27-44 implementiert: tests.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import chai from 'chai' ; import chaiHttp from 'chai-http' ; import { app as server } from './server.js' ; let should = chai . should (); let expect = chai . expect ; chai . use ( chaiHttp ); describe ( 'Posts' , () => { /* * Test the /GET route */ describe ( '/GET /posts' , () => { it ( 'it should GET all the posts' , ( done ) => { chai . request ( server ) . get ( '/posts' ) . end (( err , res ) => { res . should . have . status ( 200 ); res . body . should . be . a ( 'array' ); res . body . length . should . be . eql ( 3 ); done (); }); }); }); describe ( '/POST /posts' , () => { it ( 'it should not POST a post without images field' , ( done ) => { let post = { title : \"another test post\" , location : \"Treskowallee 8\" } chai . request ( server ) . post ( '/posts' ) . send ( post ) . end (( err , res ) => { res . should . have . status ( 500 ); res . body . should . be . a ( 'object' ); res . body . should . have . property ( 'message' ); expect ( res . body . message ). to . include ( 'image' ); done (); }); }); }); }); Beachten Sie auch, dass wir Zeile 6 hinzugef\u00fcgt haben, um einmal nicht nur should , sondern auch expect auszuprobieren. Die Ausf\u00fchrung der Tests erzeugt folgende Ausgabe: > backend@1.0.0 test > mocha ./tests.js Server started and listeneing on port 3000 ... Posts /GET /posts Connected with database ... \u2713 it should GET all the posts ( 61ms ) /POST /posts \u2713 it should not POST a post without images field 2 passing ( 88ms ) Das sollte nur demonstrieren, dass die Implementierung von Testf\u00e4llen f\u00fcr das Backend m\u00f6glich ist. Die recht gute Dokumentationen f\u00fcr Chai hilft Ihnen sicher weiter.","title":"Backend"},{"location":"backend/#backend-rest-server","text":"Ehe wir uns der IndexedDB-API zuwenden, erstellen wir zun\u00e4chst eine \"richtige\" Datenbank f\u00fcr unsere Posts. F\u00fcr diese Datenbank stellen wir die Implementierung einer Schnittstelle bereit, so dass wir die wesentlichen Datenbankanfragen dar\u00fcber ausf\u00fchren k\u00f6nnen. Diese wesentlichen Datenbankfragen werden mit CRUD abgek\u00fcrzt, f\u00fcr **C**reate, **R**ead, **U**pdate und **D**elete. Das bedeutet, wir implementieren Funktionalit\u00e4ten, mit denen wir einen neuen post in die Datenbank einf\u00fcgen ( create ), aus der Datenbank auslesen ( read ), in der Datenbank aktualisieren ( update ) und aus der Datenbank l\u00f6schen ( delete ) k\u00f6nnen. Die Schnittstelle, die wir implementieren, ist eine sogenannte REST-API . REST steht f\u00fcr Representational State Transfer und basiert auf einigen wenigen Prinzipien: Alles wird als eine Ressource betrachtet, z.B. post . Jede Ressource ist durch URIs ( Uniform Resource Identifiers ) eindeutig identifizierbar, z.B. http://localhost/posts . Es werden die Standard-HTTP-Methoden verwendet, also GET , POST , PUT , UPDATE . Ressourcen k\u00f6nnen in verschiedenen Formaten vorliegen, z.B. in HTML , XML , JSON , ... Die Kommunikation ist zustandslos . Jede einzelne HTTP-Anfrage wird komplett isoliert bearbeitet. Es gibt keinerlei Anfragehistorie. Das bedeutet, wir erstellen ein Backend (einen REST-Server), an den HTTP-Anfragen mit der eindeutig identifizierbaren Ressource gestellt werden. Das Backend erstellt daraus die entsprechende SQL-Query. Das Resultat der Datenbankanfrage wird im JSON - oder HTML - oder XML - oder in einem anderen Format bereitsgestellt. Prinzipiell gibt es also ein Mapping von HTTP-Anfragen auf SQL-Anfragen: CRUD SQL HTTP create INSERT POST read SELECT GET update UPDATE PUT delete DELETE DELETE F\u00fcr das von uns hier zu erstellende Backend soll folgende REST-API umgesetzt werden: Methode URL Bedeutung GET /posts hole alle Datens\u00e4tze GET /posts/11 hole den Datensatz mit der id=11 POST /posts f\u00fcge einen neuen Datensatz hinzu PUT /posts/11 \u00e4ndere den Datensatz mit der id=11 DELETE /posts/11 l\u00f6sche den Datensatz mit der id=11 Dazu erstellen wir uns zun\u00e4chst die Datenbank.","title":"Backend - REST-Server"},{"location":"backend/#die-posts-datenbank","text":"Die Datenbank ist simpel, sie besteht aus einer einzigen Tabelle posts , welche vier Attribute enth\u00e4lt: id , title , location und image . Die id ist der Prim\u00e4rschl\u00fcssel und das image ist vom Typ longblob . Es h\u00e4tte wohl auch mediumblob ausgereicht, denn damit k\u00f6nnen immerhin Bilder von 16 MB Gr\u00f6\u00dfe gespeichert werden. Das SQL-Skript zur Einrichtung der Datenbank posts kommt hier: posts.sql -- phpMyAdmin SQL Dump -- version 5.0.2 -- https://www.phpmyadmin.net/ -- -- Host: localhost -- Erstellungszeit: 14. Mai 2021 um 14:47 -- Server-Version: 8.0.17 -- PHP-Version: 7.3.24-(to be removed in future macOS) SET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\" ; START TRANSACTION ; SET time_zone = \"+00:00\" ; /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */ ; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */ ; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */ ; /*!40101 SET NAMES utf8mb4 */ ; -- -- Datenbank: `posts` -- -- -------------------------------------------------------- -- -- Tabellenstruktur f\u00fcr Tabelle `posts` -- CREATE TABLE ` posts ` ( ` id ` int ( 11 ) NOT NULL , ` title ` varchar ( 30 ) NOT NULL , ` location ` varchar ( 30 ) NOT NULL , ` image ` longblob NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Indizes der exportierten Tabellen -- -- -- Indizes f\u00fcr die Tabelle `posts` -- ALTER TABLE ` posts ` ADD PRIMARY KEY ( ` id ` ); -- -- AUTO_INCREMENT f\u00fcr exportierte Tabellen -- -- -- AUTO_INCREMENT f\u00fcr Tabelle `posts` -- ALTER TABLE ` posts ` MODIFY ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 3 ; COMMIT ; /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */ ; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */ ; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */ ; Die Datei k\u00f6nnen Sie auch hier herunterladen , um sie dann unter phpmyadmin zu importieren. Sie ist aber sehr lang, da sie auch bereits zwei Eintr\u00e4ge enth\u00e4lt und die base64 -Kodierung der Bilder sehr gro\u00df ist.","title":"Die posts-Datenbank"},{"location":"backend/#mysql-auf-dem-studi-server","text":"Falls Sie MySQL vom Studi-Server verwenden, dann m\u00fcssen Sie COLLATE = utf8mb4_0900_ai_ci durch COLLATE = utf8mb4_general_ci ersetzen! Daf\u00fcr ist aber hier auch die entsprechende Datei zum Download . Wenn Sie den Studi-Server verwenden, k\u00f6nnen Sie in dieser Oberfl\u00e4che eine neue Datenbank erstellen: Klicken Sie auf Neue Datenbank erstellen und geben Sie dann posts ein (der Name Ihrer Datenbank). Beachten Sie, dass daraus ein neuer Name f\u00fcr Ihre Datenbank durch die Studi-Server-Webanwendung erzeugt wird, n\u00e4mlich _s05xxx__posts , also Unterstrich + ihreMatrikelnummer + 2 x Unterstrich + posts . Gehen Sie dann auf phpMyAdmin , w\u00e4hlen links die Datenbank aus ( _s05xxx__posts ), klicken Sie dann auf den Reiter Importieren und laden diese Datei hoch. Klicken Sie Ok . Die Datenbank sollte dann mit zwei Eintr\u00e4gen bef\u00fcllt sein. Die sp\u00e4tere Konfigurationsdatei f\u00fcr die Datenbank im Backend sieht auch anders aus. Wir schreiben es nur hier schonmal hin, weil es das hier behandelte Thema Studi-Server betrifft: Konfiguration f\u00fcr die lokale Datenbank module . exports = { HOST : \"localhost\" , USER : \"root\" , PASSWORD : \"IhrPasswort\" , DB : \"posts\" }; Studi_Server: Konfiguration f\u00fcr den Studi-Server\" module . exports = { HOST : \"db.f4.htw-berlin.de\" , USER : \"s05xxx\" , PASSWORD : \"IhrPassword\" , DB : \"_s05xxx__posts\" }; Wir haben nun eine Datenbank posts mit einer Tabelle posts , die 4 Attribute ( id , title , location und image )besitzt und 2 Eintr\u00e4ge enth\u00e4lt.","title":"MySQL auf dem Studi-Server"},{"location":"backend/#das-backend-der-rest-server","text":"Wir erzeugen uns das Backend mithilfe von Node.js . Insbesondere verwenden wir dabei einige Module, die uns die Arbeit mit HTTP und MySQl erleichtern. Dazu geh\u00f6rt zun\u00e4chst das Framework Express , welches uns einen HTTp_Server zur Verf\u00fcgung stellt und dar\u00fcber hinaus noch einige Funktionalit\u00e4ten, wie z.B. Routing .","title":"Das Backend - der REST-Server"},{"location":"backend/#nodejs-projekt-erstellen-und-express-importieren","text":"Wir erstellen uns zun\u00e4chst einen Ordner backend und wechseln in diesen Ordner. mkdir backend cd backend Wir initialisieren das Node.js -Projekt, um uns eine package.json erstellen zu lassen, in der die Paketabh\u00e4ngigkeiten verwaltet werden: npm init Sie k\u00f6nnen im Prinzip alle Fragen mit Enter beantworten. Ich habe als entry point hier bereits server.js (anstelle von index.js ) gew\u00e4hlt. Das k\u00f6nnen wir aber auch gleich noch in der package.json \u00e4ndern. Hier die Ausgabe auf der Kommandozeile: This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See ` npm help init ` for definitive documentation on these fields and exactly what they do . Use ` npm install <pkg> ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: ( backend ) version: ( 1 .0.0 ) description: REST-Server f\u00fcr posts-Datenbank entry point: ( index.js ) server.js test command: git repository: keywords: IKT, PWA, REST-API, Backendend, posts author: J. Freiheit license: ( ISC ) About to write to /Users/jornfreiheit/Sites/PWA/backend/package.json: { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" } , \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ] , \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" } Is this OK? ( yes ) Bst\u00e4tigen Sie mit Enter . Nun \u00f6ffnen wir das backend -Projekt in einer IDE. Das gesamte Projekt enth\u00e4lt bis jetzt nur die package.json -Datei. Tragen Sie dort (falls es nicht bereits so konfiguriert ist) f\u00fcr die Eigenschaft \"main\" den Wert \"server.js\" ein: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" } Nun installieren wir Express und geben dazu im Terminal npm install express ein. Wenn Sie sich nun die package.json erneut anschauen, stellen Sie fest, dass darin nun eine Paketabh\u00e4ngigkeit zum express -Paket konfiguriert ist: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" } }","title":"Node.js-Projekt erstellen und Express importieren"},{"location":"backend/#serverjs-erstellen-und-implementieren","text":"Nun erzeugen wir uns im Verzeichnis backend eine Datei server.js . Diese Datei ist der Einstiegspunkt unseres Backends und wird ausgef\u00fchrt, wenn wir das backend -Projekt ausf\u00fchren. Die server.js implementieren wir zun\u00e4chst wie folgt: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import express from 'express' ; const app = express (); const PORT = 3000 ; app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Das bedeutet, wir importieren express (Zeile 1 ), erzeugen uns davon eine Objekt und speichern dieses in der Variablen app (Zeile 3 ). Wir legen in einer Konstanten PORT die Portnummer 3000 fest(Zeile 4 - die Portnummer k\u00f6nnen Sie w\u00e4hlen). Das backend ist somit unter http://localhost:3000 verf\u00fcgbar. Wenn wir diese URL aufrufen, dann wird ein request ausgel\u00f6st, den wir hier mit Hello FIW! als response beantworten (Zeilen 6-8 ). Das eigentliche Starten des Webservers erfolgt in den Zeilen 10-16 .","title":"server.js erstellen und implementieren"},{"location":"backend/#typemodule-in-packagejson-einfugen","text":"In Zeile 1 in der server.js haben wir das express -Paket mittels import express from 'express' ; importiert. Dies entspricht der \"neuen\" Syntax zum Importieren eines ES6 -Modules ( ES6 - ECMAScript 6). \"Fr\u00fcher\" hat man stattdessen const express = require ( 'express' ) ; geschrieben. Allerdings erfordert diese \"neue\" Syntax eine Erweiterung in der package.json : package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" } }","title":"\"type\":\"module\" in package.json einf\u00fcgen"},{"location":"backend/#starten-des-projektes-und-installation-von-nodemon","text":"Das Projekt l\u00e4sst sich nun starten. Wir geben dazu im Terminal im backend -Ordner node server.js ein. Im Terminal erscheint Server started and listening on port 3000 ... und wenn Sie im Browser die URL http://localhost:3000/ eingeben, wird dort HELLO FIW! angezeigt. Wann immer wir jetzt jedoch etwas an der Implementierung \u00e4ndern, m\u00fcssen wir im Terminal zun\u00e4chst den Webserver mit Strg-C // bzw. Control-C stoppen, um ihn dann wieder mit node server.js zu starten. Um das zu umgehen, gibt es das Paket nodemon . Da es nur sinnvoll w\u00e4hrend der Entwicklung eingesetzt werden kann (und sollte), installieren wir es als eine development dependency : npm install --save-dev nodemon Die package.json sieht daraufhin so aus: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Zur Verwendung von nodemon f\u00fcgen wir in die package.json unter \"scripts\" noch die Eigenschaft watch (frei gew\u00e4hlt) und den dazugeh\u00f6rigen Wert nodemon server.js ein: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Nun l\u00e4sst sich die Anwendung mithilfe von nodemon per npm run watch starten und muss auch nicht mehr gestoppt und neu gestartet werden, wenn \u00c4nderungen an der Implementierungen durchgef\u00fchrt wurden. Die Ausgabe im Terminal nach Eingabe von npm run watch ist ungef\u00e4hr so: > backend@1.0.0 watch > nodemon ./server.js [ nodemon ] 2 .0.7 [ nodemon ] to restart at any time, enter ` rs ` [ nodemon ] watching path ( s ) : *.* [ nodemon ] watching extensions: js,mjs,json [ nodemon ] starting ` node ./server.js ` Server started and listening on port 3000 ...","title":"Starten des Projektes und Installation von nodemon"},{"location":"backend/#konfiguration-der-datenbank","text":"In diesem Abschnitt stellen wir die Verbindung zwischen backend und Datenbank her. Dazu ist es erforderlich, das mysql -Paket zu importieren (es enth\u00e4lt Funktionalit\u00e4ten f\u00fcr die Verbindung mit einer MySQL-Datenbank sowie f\u00fcr die SQL-Anfragen), die Zugangsdaten zu konfigurieren (Nutzer, Datenbankhost, Passwaort, Name der Datenbank), die eigentliche Verbindung herzustellen. Wir werden diese backend -Implementierung bewusst flach halten und verzichten deshalb auf strukturierende Ordner. Es w\u00e4re aber sehr sinnvoll und ist auch ratsam, hier unterschiedliche Ordner einzuf\u00fcgen (z.B. config , database , model usw.). Wir erzeugen uns im backend -Ordner eine db.config.js (da diese Datei auch Ihr Passowrt enth\u00e4lt, k\u00f6nnen Sie sie auch au\u00dferhalb des Projektes anlegen oder eine separate Passwortdatei au\u00dferhalb des Projektes): db.config.js /* * eine der beiden folgenden dbConfig-Objekte muessen auskommentiert werden! */ /* * Konfigurationsdaten fuer die Verbindung mit localhost */ export const dbConfig = { HOST: \"localhost\", USER: \"root\", PASSWORD: \"IhrPasswort\", DB: \"posts\" }; /* * Konfigurationsdaten fuer die Verbindung mit studi.f4.htw-berlin.de */ /* exports const dbConfig = { HOST: \"db.f4.htw-berlin.de\", USER: \"s05xxx\", PASSWORD: \"IhrPassword\", DB: \"_s05xxx__posts\" }; */ Nun erstellen wir noch ein Skript db.connection.js , mit dem wir die eigentliche Verbindung zur Datenbank herstellen. Dazu installieren wir zun\u00e4chst das mysql -Paket. Wir geben im backend -Ordner im Terminal npm install mysql ein. Die package.json wird daraufhin entsprechend erweitert: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Die db.connection.js sieht dann so aus: db.connection.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import mysql from 'mysql' ; import { dbConfig } from './db.config.js' ; export const connection = mysql . createConnection ({ host : dbConfig . HOST , user : dbConfig . USER , password : dbConfig . PASSWORD , database : dbConfig . DB , }); connection . connect (( error ) => { if ( error ) throw error ; console . log ( \"Connected with database ... \" ); }); Wir importieren in Zeile 1 das mysql -Modul und wir importieren in Zeile 2 die soeben festgelegten Zugangsdaten zur Datenbank. Mithilfe der createConnection() -Funktion aus dem mysql -Paket werden diese Zugangsdaten eingelesen (Zeilen 4-9 ). Die eigentliche Verbindung zur Datenbank wird dann mit connect() -Funktion des mysql -Paketes hergestellt. Ob dieses Skript tats\u00e4chlich funktioniert, k\u00f6nnten wir ausprobieren, indem wir im Terminal den Befehl node db.connection.js eingeben. Es sollte Connected with database ... ausgegeben werden.","title":"Konfiguration der Datenbank"},{"location":"backend/#implementieren-der-datenbankanfragen","text":"Wir haben nun eine Verbindung zur Datenbank hergestellt. Nun wollen wir auch Anfragen an die Datenbank stellen. F\u00fcr Anfragen an die Datenbank stellt das mysql -Paket die Funktion query() zur Verf\u00fcgung. Diese Funktion bekommt als ersten Parameter die entsprechende SQL-Anfrage \u00fcbergeben. Die allgemeine Syntax der query() -Funktion ist wie folgt: . query ( sqlString , values , callback ) Der erste Parameter ist also der sqlString , z.B. \"DELETE FROM posts\" , was alle Eintr\u00e4ge in der posts -Tabelle l\u00f6scht. H\u00e4ufig enthalten diese SQL-Anfragen aber Platzhalter f\u00fcr Argumente, also z.B. \"DELETE FROM posts WHERE id = ?\" . Das ? steht f\u00fcr einen konkreten Wert f\u00fcr eine id . Diese Werte werden bei values angegeben, wobei es sich bei values um ein Array handelt. Die callback -Funktion kann drei Parameter enthalten, typischerweise werden aber nur die ersten beiden error und results abgefragt. error gibt den Fehler zur\u00fcck, falls er bei der Anfrage erzeugt wird. result gibt das Resultat der SQL-Anfrage zur\u00fcck, also entweder die angefragten Datens\u00e4tze oder die Anzahl der Zeilen, die von der Anfrage betroffen waren. Wir implementieren folgende Anfragen: sql.query(\"INSERT INTO posts SET ?\", newPost, (err, res) => {}); f\u00fcgt newPost in die Tabelle posts ein, sql.query(\"SELECT * FROM posts\", (err, res) => {}); fragt alle Eintr\u00e4ge aus der Tabelle posts ab, sql.query(\"UPDATE posts SET ? where id= ?\", [post, id], (err, res) => {}); aktualisiert den Eintrag mit der id==id und verwendet dazu die neuen Daten post , sql.query(\"DELETE FROM posts WHERE id = ?\", [id], (err, res) => {}); l\u00f6scht den Eintrag mit der id==id , sql.query(\"DELETE FROM posts\", (err, res) => {}); f\u00fcgt newPost in die Tabelle posts ein, Diese Anfragen implmentieren wir in einem JavaScript-Objekt, das wir PostService nennen und dessen Eigenschaften JavaScript-Funktionen sind. Dazu erstellen wir uns eine Datei db.sqlqueries.js mit folgendem Inhalt: db.sqlqueries.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import { connection as sql } from './db.connection.js' ; export const PostService = { create : async ( newPost , result ) => { sql . query ( \"INSERT INTO posts SET ?\" , newPost , ( err , res ) => { if ( err ) result ( err , null ); else result ( null , { id : res . postId , ... newPost }); }); }, findById : async ( postId , result ) => { sql . query ( `SELECT * FROM posts WHERE id = ?` , [ postId ], ( err , res ) => { if ( err ) result ( err , null ); else if ( res . length ) result ( null , res [ 0 ]); else result ({ message : \"post not found\" }, null ); } ); }, getAll : async ( result ) => { sql . query ( \"SELECT * FROM posts\" , ( err , res ) => { if ( err ) result ( null , err ); else result ( null , res ); }); }, updateById : async ( id , post , result ) => { sql . query ( \"UPDATE posts SET ? where id= ?\" , [ post , id ], ( err , res ) => { if ( err ) result ( null , err ); else if ( res . affectedRows == 0 ) result ({ message : \"post not found\" }, null ); else result ( null , { id : id , ... post }); } ); }, remove : async ( id , result ) => { sql . query ( \"DELETE FROM posts WHERE id = ?\" , id , ( err , res ) => { if ( err ) result ( null , err ); else if ( res . affectedRows == 0 ) result ({ message : \"post not found\" }, null ); else result ( null , res ); }); }, removeAll : async ( result ) => { sql . query ( \"DELETE FROM posts\" , ( err , res ) => { if ( err ) result ( null , err ); else result ( null , res ); }); }, }; Es werden also sechs Funktionen definiert, create() , findById() , getAll() , updateById() , remove() und removeAll() . F\u00fcr die Funktionen werden die entsprechenden, oben aufgelisteten, SQL-Anfragen ausgef\u00fchrt. Einige Besonderheiten bei den Resultaten sind noch erw\u00e4hnenswert: Die INSERT INTO... -Anfrage liefert als Resultat den gesamten eingef\u00fcgten Datensatz zur\u00fcck (Zeile 7 ). Die id wird jedoch automatisch durch die Datenbank vergeben ( auto-inkrement ). Das bedeutet, newPost enth\u00e4lt die Daten f\u00fcr title , location und image und das Resultat enth\u00e4lt dar\u00fcber hinaus die neue id . Die Syntax ...newPost steht f\u00fcr den spread operator und setzt dort im Prinzip das newPost -Objekt ein, separiert in die key-value-Paare. Die SELECT * FROM posts WHERE id = ? -Anfrage hat drei m\u00f6gliche Antworten (Zeilen 14-16 ). Entweder einen Fehler oder der Datensatz wird nicht gefunden, weil es die \u00fcbergebene id nicht gibt, oder den gefundenen Datensatz. SELECT * FROM -Anfragen leifern ein Array zur\u00fcck. Da die SELECT * FROM posts WHERE id = ? maximal genau einen Datensatz zur\u00fcckgeben kann, greifen wir direkt auf res[0] zu (Zeile 15 ). In den anderen Funktionen finden sich teilweise Kombinationen aus den beiden zuvor genannten Beispielen.","title":"Implementieren der Datenbankanfragen"},{"location":"backend/#implementieren-des-controllers","text":"Die Datenbankanfragen erwarten unterschiedliche Werte f\u00fcr die jeweiligen parameter. F\u00fcr manche Anfragen muss eine id \u00fcbergeben werden, f\u00fcr andere ein post -Objekt mit Werten f\u00fcr title , location und image , die updateById() -Funktion ben\u00f6tigt beides und die removeAll() -Funktion nichts davon. Diese unterschiedlichen Werte m\u00fcssen erst aus den Anfragen extrahiert werden. Dazu dient uns der Controller , den wir nun implementieren. Er stellt die Schnittstelle zwischen den REST-API-Anfragen und den Datenbankanfragen dar. Wir erzeugen uns eine posts.controller.js mit folgendem Inhalt: posts.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 import { PostService } from './db.sqlqueries.js' ; export const PostController = { readAll : ( req , res ) => { PostService . getAll (( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting all posts\" , }); else res . json ( result ); }); }, create : ( req , res ) => { if ( ! req . body ) { res . status ( 400 ). send ({ message : \"Content can not be empty!\" , }); } const post = {... req . body }; PostService . create ( post , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while creating the post.\" , }); else res . json ( result ); }); }, delete : ( req , res ) => { PostService . remove ( req . params . postId , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while delete the post\" , }); else res . json ( result ); }); }, update : ( req , res ) => { if ( ! req . body ) { res . status ( 400 ). send ({ message : \"Content can not be empty!\" , }); } const post = {... req . body }; PostService . updateById ( req . params . postId , post , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while update the post\" , }); else res . json ( result ); } ); }, readOne : ( req , res ) => { PostService . findById ( req . params . postId , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting one post\" , }); else res . json ( result ); }); }, }; Die grunds\u00e4tzliche Idee ist zun\u00e4chst die gleiche, wie bei PostService . Wir erstellen wiederum eine JavaScript-Objekt, dessen Eigenschaften Funktionen sind. In den Funktionen werden dann die entsprechenden Funktionen aus dem PostService aufgerufen. Die prinzipielle Idee des PostControllers ist, neben dem Aufruf der jeweiligen Funktion von PostService den Funktionsaufruf so vorzubereiten, dass die entsprechenden Daten korrekt und vollst\u00e4ndig \u00fcbergeben werden. Au\u00dferdem werden die resultate der Datenbank jeweils als JSON zur\u00fcckgesendet bzw. werden entsprechende Fehler gesendet, die durch die Auswertungen der Fehler aus dem postService generiert werden. Betrachten wir einige ausgew\u00e4hlte Funktionen aus dem PostController : Die readAll() -Funktion ruft die getAll() -Funktion, d.h. es sollen alle Datens\u00e4tze aus der posts -tabelle zur\u00fcckgeliefert werden. Liefert die getAll() -Funktionen einen Fehler, dann schickt die readAll() -Funktionen eine Fehlermeldung mit Statuscode 500 (siehe auch HTTP-Statuscode ) mit entweder der Fehler- message oder mit der Nachricht \"Some error occurred while getting all posts\" an den Aufrufer (Zeilen 7-10 ). Wenn alles korrekt l\u00e4uft, d.h. die Datens\u00e4tze von der getAll() -Funktion geliefert werden, dann erzeugt die readAll() -Funktion daraus ein JSON und schickt dieses an den Aufrufer zur\u00fcck (Zeile 11 ). Die create() -Funktion ruft die create() -Funktion des PostService auf. Dazu muss jedoch erst der Datensatz erstellt werden, der in die Datenbank eingef\u00fcgt werden soll. Dieser Datensatz wird aus dem body des requests extrahiert. Ist dieser body leer oder existiert gar nicht, wird eine Fehlermeldung mit Statuscode 400 als Response gesendet. Aus dem body des requests wird ansonsten ein neues post -Objekt erzeugt. Hier wird erneut der spread operator verwendet und somit alle Schl\u00fcssel-Werte-Paare aus body in das Objekt eingef\u00fcgt (Zeile 21 ). Dieses post -Objekt wird der Methode create() des PostService \u00fcbergeben. Das result der create() -Methode des PostService ist der gesamte \"neue\" Datensatz inkl. der von der Datenbank vergebenen id . Die update() -Methode ist \u00e4hnlich der create() -Funktion, aber hier wird zus\u00e4tzlich noch die id \u00fcbergeben, die verwendet werden soll, um den Datensatz zu identifiezieren, der aktualisiert werden soll. Diese id ist nicht Teil des req.body , sondern wird als Wert der URL mitgegeben, d.h. es erfolgt ein Aufruf der Form http://localhost:3000/posts/11 und die 11 wird als id verwendet. Mithilfe von params kann die URL des requests ausgelesen werden. Die postId wird gleich in der service.js definiert werden. Wir haben \u00fcbrigens keine Funktion im PostController definiert, die die Funktion removeAll() aus dem PostService aufruft, damit wir nicht ausversehen alle Datens\u00e4tze aus unserer Datenbank l\u00f6schen.","title":"Implementieren des Controllers"},{"location":"backend/#serverjs-um-endpunkte-erweitern","text":"Uns stehen jetzt die wesentlichen Funktionen zur Verf\u00fcgung, um CRUD-Anfragen durchzuf\u00fchren. Uns fehlt noch der letzte Schritt, n\u00e4mlich die Endpunkte unserer REST-API mit den entsprechenden Funktionen des Controllers zu verkn\u00fcpfen. Unter den Endpunkten der REST-API verstehen wir die URI der Ressource, die angefragt wird zusammen mit der HTTP-Anfragemethode, mit der diese Ressource angefragt wird. Wir definieren folgende Endpunkte: GET http://localhost:3000/posts - Aufruf von readAll() im PostController GET http://localhost:3000/posts/:postId - Aufruf von readOne() im PostController , postId bekommt einen konkreten Wert POST http://localhost:3000/posts - Aufruf von create() im PostController PUT http://localhost:3000/posts/:postId - Aufruf von update() im PostController , postId bekommt einen konkreten Wert DELETE http://localhost:3000/posts/:postId - Aufruf von delete() im PostController , postId bekommt einen konkreten Wert Die Erweiterung von server.js sieht dann so aus: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import express from 'express' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Das express -Modul liefert uns also entsprechende Funktionen f\u00fcr die einzelnen HTTP-Anfragen, d.h. .get() f\u00fcr GET -Anfragen, .post() f\u00fcr POST -Anfragen usw. Pro Endpunkt wird die entsprechende Funktion aus dem PostController aufgerufen. Dieser muss daf\u00fcr importiert werden (Zeile 2 ). Wenn wir nun im Browser http://localhost:3000/posts eingeben, dann entspricht das der Anfrage GET http://localhost:3000/posts und somit dem Aufruf von PostController.readAll() . Tats\u00e4chlich werden uns im Browser die beiden Datens\u00e4tze angezeigt (schalten Sie die Darstellung auf Raw ), allerdings sind die Werte f\u00fcr die Bilder leider sehr lang. Mit dem Browser k\u00f6nnen wir auch noch den zweiten GET -Endpunkt testen, n\u00e4mlich GET http://localhost:3000/posts/:postId . F\u00fcr id sind bis jetzt in der Datenbank die Werte 1 und 2 vergeben, d.h. wir k\u00f6nnten GET http://localhost:3000/posts/1 und GET http://localhost:3000/posts/2 testen. Wenn wir eine andere Zahl als 1 oder 2 versuchen, erhalten wir die in der findById() -Funktion im PostService definierte Fehlermeldung als JSON { message: \"post not found\" } .","title":"server.js um Endpunkte erweitern"},{"location":"backend/#backend-fur-groere-daten-erweitern","text":"Wenn wir jetzt ausprobieren w\u00fcrden, einen neuen Datensatz in die Datenbank einzuf\u00fcgen (siehe Abschnitt Testen mit Postman ), erhalten wir einen Fehler, dass der Request gar nicht erst gesendet werden konnte. Der Grund daf\u00fcr ist, dass der Webserver in express in den Standardeinstellungen nicht mit so gro\u00dfen Daten im Request umgehen kann. Wir ben\u00f6tigen deshalb noch eine kleine Erweiterung in der server.js : server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import express from 'express' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Mit diesen beiden Anweisungen erh\u00f6hen wir die Gr\u00f6\u00dfe der zu \u00fcbetragenden daten in einem Request auf 20Mb . Sie k\u00f6nnen auch einen noch gr\u00f6\u00dferen Wert hier w\u00e4hlen. F\u00fcr unsere Bed\u00fcrfnisse gen\u00fcgt sogar die Anweisung in Zeile 8 , aber f\u00fcr den Fall, dass wir auch gro\u00dfe Datenmengen direkt in der URL \u00fcbertragen wollen (als GET dann), sehen wir bereits Anweisung in Zeile 7 vor.","title":"Backend f\u00fcr gr\u00f6\u00dfere Daten erweitern"},{"location":"backend/#cross-origin-resource-sharing-cors","text":"Die Same Origin Policy (SOP) ist ein Sicherheitskonzept, das clientseitig Skriptsprachen (also z.B. JavaScript oder CSS) untersagt, Ressourcen aus verschiedenen Herkunften zu verwenden, also von verschiedenen Servern. Dadurch soll verhindert werden, dass fremde Skripte in die bestehende Client-Server-Kommunikation eingeschleust werden. Gleiche Herkunft (origin) bedeutet, dass das gleiche Protokoll (z.B. http oder https ), von der gleichen Domain (z.B. localhost oder htw-berlin ) sowie dem gleichen Port (z.B. 80 oder 4200 ) verwendet werden. Es m\u00fcssen alle drei Eigenschaften \u00fcbereinstimmen. Mit dem Aufkommen von Single Page Applications und dem darin ben\u00f6tigten AJAX kam jedoch der Bedarf auf, die SOP aufzuweichen. Es sollte m\u00f6glich sein, dass z.B. JavaScript sowohl client-seitig das DOM \u00e4ndert, als auch einen Request an den Server (das Backend) sendet. Der Kompromiss, der daf\u00fcr gefunden wurde, nennt sich Cross-Origin Resource Sharing (CORS) . Damit ist es m\u00f6glich, f\u00fcr einige oder alle Anfragen zu definieren, dass sie im Sinne der SOP trotzdem erlaubt sein sollen. Um CORS f\u00fcr Ihr Backend zu aktivieren, wechseln Sie im Terminal in Ihren backend -Ordner und geben dort npm install cors ein. Die package.json sieht danach so aus: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } \u00d6ffnen Sie dann die server.js und f\u00fcgen Sie die hervorgehobenen Zeilen ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import express from 'express' ; import cors from 'cors' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . use ( cors ()); app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Falls Sie z.B. nur die get -Anfrage teilen wollen, dann w\u00e4hlen Sie nicht app.use(cors()); , sondern app . get ( \"/\" , cors (), ( req , res ) => { res . json ({ message : \"HELLO FIW!\" }); }); Mehr zum CORS-Paket von node.js bzw. express finden Sie hier .","title":"Cross-Origin Resource Sharing (CORS)"},{"location":"backend/#testen-mit-postman","text":"Wenn die Datenbank eingerichtet ist und das Backend gestartet, k\u00f6nnen wir es mit Postman ausprobieren. Wir haben das \"kleine\" Problem, dass die Daten f\u00fcr ein Bild sehr lang sind. Prinzipiell sieht ein post im JSON-Format so aus: { \"title\" : \"first post\" , \"location\" : \"Berlin\" , \"image\" : \"/9j/4AAQSkZJRgAB/9k=\" } Das hei\u00dft, wir \u00fcbergeben einen Wert f\u00fcr title , einen f\u00fcr location und einen f\u00fcr image . Der Wert f\u00fcr image ist allerdings ein Bild im Base64 -Format. Sie k\u00f6nnen Bilder in das Base64 -Format online umwandeln lassen, z.B. hier . Der Wert beginnt dann immer mit data:image/jpeg;base64, Diesen Teilstring wollen jedoch gar nicht mitspeichern. Insgesamt ist der Umgang mit so langen Daten leider recht schwierig, so dass wir uns lieber noch ein Frontend erstellen, um Daten in die Datenbank einzuf\u00fcgen und wieder auszulesen. Sie k\u00f6nnen trotzdem einmal probieren, ob die Eintragung klappt. Rufen Sie in Postman dazu POST http://localhost:3000/posts auf und \u00fcbergeben im Body (als JSON ) folgenden Eintrag: POST http://localhost:3000/posts { \"title\" : \"third post\" , \"location\" : \"Gebaeude C\" , \"image\" : \"\" } Probieren Sie in Postman auch ruhig mal GET http://localhost:3000/posts/1 und/oder GET http://localhost:3000/posts aus. Sie werden sehen, dass das image ein eigenes JSON mit den Schl\u00fcssel-Wertepaaren \"image\" : { \"type\" : \"Buffer\" , \"data\" : [ ] } ist. Nachdem Sie den dritten Datensatz eingef\u00fcgt haben, k\u00f6nnen Sie ja auch mal versuchen, ihn wieder zu l\u00f6schen.","title":"Testen mit Postman"},{"location":"backend/#testen-des-backends-mit-mocha-und-chai","text":"W\u00e4hrend wir mit Postman uns Ergebnisse der Anfragen nur stichprobenartig anschauen k\u00f6nnen, schreiben wir mithilfe von Mocha und Chai \"richtige\" Tests. Zur Installation geben wir im Terminal im backend -Ordner ein: npm install --save-dev mocha npm install --save-dev chai npm install --save-dev chai-http Danach sieht unsere package.json so aus (enth\u00e4lt auch schon eine weitere \u00c4nderung): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"mocha ./tests.js\" }, \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" }, \"devDependencies\" : { \"chai\" : \"^4.3.4\" , \"chai-http\" : \"^4.3.0\" , \"mocha\" : \"^8.4.0\" , \"nodemon\" : \"^2.0.7\" } } Unter den devDependencies wurden also die neu installierten Module hinzugef\u00fcgt. Beachten Sie auch die \u00c4nderung in Zeile 9 . Dort rufen wir nun mocha unter \"scripts\".\"tests\" auf, zusammen mit einer Datei tests.js , die unsere Testf\u00e4lle enth\u00e4lt. Diese Datei legen wir uns im Ordner backend an und bef\u00fcllen Sie zun\u00e4chst wie folgt: tests.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import chai from 'chai' ; import chaiHttp from 'chai-http' ; import { app as server } from './server.js' ; let should = chai . should (); chai . use ( chaiHttp ); describe ( 'Posts' , () => { /* * Test the /GET route */ describe ( '/GET /posts' , () => { it ( 'it should GET all the posts' , ( done ) => { chai . request ( server ) . get ( '/posts' ) . end (( err , res ) => { res . should . have . status ( 200 ); res . body . should . be . a ( 'array' ); res . body . length . should . be . eql ( 3 ); done (); }); }); }); }); In den Zeilen 1 und 2 importieren wir das chai - und chai-http -Modul. Damit wir auch app als Modul aus der server.js importieren k\u00f6nnen, muss dieses exportiert werden. Wir f\u00fcgen dazu in server.js vor const app = express(); noch export ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import express from 'express' ; import { PostController } from './posts.controller.js' ; export const app = express (); const PORT = 3000 ; app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'Hello FiW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listeneing on port ${ PORT } ...` ); } }); Zur\u00fcck zur tests.js : Mit describe() in Zeile 9 beginnt das Testen. Dieser Block enth\u00e4lt alle Tests. Derzeit ist nur ein Test implementiert. Dieser Test ist in den Zeilen 13-24 implementiert. Er testet die GET /posts -Anfrage, also das Lesen aller Datens\u00e4tze. Es wird darin definiert, dass die Anfrage mit dem Statuscode 200 beantwortet werden muss (Zeile 18 , die R\u00fcckgabe ein Array sein muss ( Zeile 19 ) und die Anzahl der Datens\u00e4tze (die L\u00e4nge des Arrays) 3 sein muss (Zeile 20 ). Gestartet wird der Test mit npm test im backend -Ordner. Die Ausgabe sieht so aus: > backend@1.0.0 test > mocha ./tests.js Server started and listeneing on port 3000 ... Posts /GET /posts Connected with database ... \u2713 it should GET all the posts ( 65ms ) 1 passing ( 75ms ) Das Connected with database ... st\u00f6rt dabei und sollte f\u00fcr das Testen wohl am besten aus der db.connection.js entfernt werden. Wir f\u00fcgen noch einen weiteren Test f\u00fcr POST /posts ein. Weil die Daten f\u00fcr image aber so gro\u00df sind, pr\u00fcfen wir stattdessen inen Fehlerfall, n\u00e4mlich, wenn wir versuchen einen unvollst\u00e4ndigen Datensatz einzuf\u00fcgen. Wir versuchen einen Datensatz einzuf\u00fcgen, bei dem die image -Eigenschaft fehlt. Daf\u00fcr erwarten wir einen Fehler. Die weitere Testfunktion dazu ist in den Zeilen 27-44 implementiert: tests.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import chai from 'chai' ; import chaiHttp from 'chai-http' ; import { app as server } from './server.js' ; let should = chai . should (); let expect = chai . expect ; chai . use ( chaiHttp ); describe ( 'Posts' , () => { /* * Test the /GET route */ describe ( '/GET /posts' , () => { it ( 'it should GET all the posts' , ( done ) => { chai . request ( server ) . get ( '/posts' ) . end (( err , res ) => { res . should . have . status ( 200 ); res . body . should . be . a ( 'array' ); res . body . length . should . be . eql ( 3 ); done (); }); }); }); describe ( '/POST /posts' , () => { it ( 'it should not POST a post without images field' , ( done ) => { let post = { title : \"another test post\" , location : \"Treskowallee 8\" } chai . request ( server ) . post ( '/posts' ) . send ( post ) . end (( err , res ) => { res . should . have . status ( 500 ); res . body . should . be . a ( 'object' ); res . body . should . have . property ( 'message' ); expect ( res . body . message ). to . include ( 'image' ); done (); }); }); }); }); Beachten Sie auch, dass wir Zeile 6 hinzugef\u00fcgt haben, um einmal nicht nur should , sondern auch expect auszuprobieren. Die Ausf\u00fchrung der Tests erzeugt folgende Ausgabe: > backend@1.0.0 test > mocha ./tests.js Server started and listeneing on port 3000 ... Posts /GET /posts Connected with database ... \u2713 it should GET all the posts ( 61ms ) /POST /posts \u2713 it should not POST a post without images field 2 passing ( 88ms ) Das sollte nur demonstrieren, dass die Implementierung von Testf\u00e4llen f\u00fcr das Backend m\u00f6glich ist. Die recht gute Dokumentationen f\u00fcr Chai hilft Ihnen sicher weiter.","title":"Testen des Backends mit Mocha und Chai"},{"location":"backgroundsync/","text":"Hintergrundsynchronisation \u00b6 Hintergrundsynchronisation erlaubt die Synchronisation von daten, selbst dann, wenn die Anwendung offline ist. Diese \"Synchronisation\" erfolgt nat\u00fcrlich \"asynchron\". Angenommen, Sie geben offline Daten in die Anwendung ein und wollen diese versenden, z.B. an das Backend, dann wird dieser Request so lange in Ihrer Anwendung gespeichert, bis Sie wieder online sind und erst dann ausgef\u00fchrt. Das Situation ist die Folgende: Es sollen Daten an das Backend gesendet werden, aber die Internetverbindung ist unterbrochen. Deshalb werden die Daten in die IndexedDB gespeichert und im Service Worker wird eine Sync Task registriert. Sobald die Verbindung wieder steht, wird ein Sync -Event im Service Worker ausgel\u00f6st und dieser sendet die Daten an das Backend ( POST-Request ). Dadurch, dass der Service Worker diesen POST-Request ausf\u00fchrt (und die Daten dabei mitsendet), kann die Hintergrundsynchronisation sogar dann stattfinden, wenn die Webanwendung bereits geschlossen ist! Deshalb sollten wir einfach immer beim Senden von Daten eine Sync Task registrieren, weil es sein kann, dass die Daten noch gar nicht vollst\u00e4ndig gesendet wurden, bevor wir den Browsertab schlie\u00dfen. Zun\u00e4chst ein bisschen mehr responsive \u00b6 Unser HTW Insta entwickelt sich langsam. Deshalb ist hier vielleicht ein guter Zeitpunkt, um die Anwendung noch etwas mehr responsive zu gestalten. Media Queries \u00b6 Zum Beispiel sind die Cards stets in fester Gr\u00f6\u00dfe, unabh\u00e4ngig davon, ob wir die Anwendung am Desktop betrachten oder am Mobilger\u00e4t. Dazu k\u00f6nnen wir in unsere feed.css ein paar Media queries einf\u00fcgen: /src/css/feed.css # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; visibility : hidden ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . whiteText { color : white ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } . shared-moment-card . mdl-card { margin : 10 px auto ; width : 80 % ; } @ media ( min-width : 600px ) { . shared-moment-card . mdl-card { width : 60 % ; } } @ media ( min-width : 1200px ) { . shared-moment-card . mdl-card { width : 45 % ; } } . shared-moment-card . mdl-card__title { height : 250 px ; } @ media ( min-height : 600px ) { . shared-moment-card . mdl-card__title { height : 300 px ; } } @ media ( min-height : 1200px ) { . shared-moment-card . mdl-card__title { height : 380 px ; } } Wir haben sowohl f\u00fcr die Viewport-H\u00f6he als auch f\u00fcr die Viewport-Breite zwei Breakpoints eingebaut. Bei jeweils 600px bzw. 1200px \u00e4ndern sich die Angaben zur H\u00f6he bzw. Breite der Bilder in den Cards . Achtung: In feed.js muss dazu die Zeile cardTitle.style.height = '180px'; gel\u00f6scht werden! Die H\u00f6he und Breite der Bilder in den Cards passt sich jetzt (besser) der Viewport-Breite und -H\u00f6he an. Bei den Breiten haben wir sogar %-Angaben verwendet (gut), bei den H\u00f6hen nur feste Pixel-Werte (nicht so gut). Sie k\u00f6nnen gerne damit herumspielen und es an Ihre Bed\u00fcrfnisse anpassen. Mehr zu Media Queries finden Sie z.B. hier und hier https://wiki.selfhtml.org/wiki/CSS/Media_Queries . srcset-Attribut f\u00fcr img \u00b6 Die Verwendung der Bilder k\u00f6nnen wir noch auf eine andere Art responsive gestalten. Je nach Viewport-Gr\u00f6\u00dfe k\u00f6nnen die Bilder eingebunden werden, deren Aufl\u00f6sung \"ausreicht\". In dem /public/src/images/ -Ordner haben wir f\u00fcr unser Hauptbild oben drei verschiedene Versionen: htw.jpg , mit der Aufl\u00f6sung 898 x 343 Pixel, htw-lg.jpg , mit der Aufl\u00f6sung 1199 x 457 Pixel und htw-sm.jpg , mit der Aufl\u00f6sung 480 x 183 Pixel. Es w\u00e4re unsinnig, beisielsweise das htw-lg.jp auf einem schmalen Viewport anzuzeigen, da daf\u00fcr die Aufl\u00f6sung des htw-sm.lpg v\u00f6llig gen\u00fcgt. Da Letzteres auch noch deutlich kleiner ist ( 43 KB ), als das htw-lg.jpg -Bild ( 170 KB ), lie\u00dfe sich auch die Ladezeit verringern, wenn f\u00fcr mobile Ger\u00e4te das kleiner Bild verwendet w\u00fcrde. Auf der anderen Seite sieht dieses Bild aufgrund seiner niedrigen Aufl\u00f6sung in gro\u00dfen Viewports (also am Desktop-Monitor) nicht gut aus. Dort ben\u00f6tigen wir das htw-lg.jpg . Um diesen Wechsel der Bilder je nach Viewport-Gr\u00f6\u00dfe zu vereinfachen, wurde in HTML5 f\u00fcr das img -Element das Attribut srcset hinzugef\u00fcgt (siehe z.B. hier oder hier ). In unserer index.html k\u00f6nnen wir also das Einbinden des img -Elementes wie folgt erweitern: /index.html 88 89 90 91 < img srcset = \"/src/images/htw-lg.jpg 1200w, /src/images/htw.jpg 900w, /src/images/htw-sm.jpg 480w\" src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > Zuvor stand dort einfach nur: <img src=\"/src/images/htw.jpg\" alt=\"HTW Wilhelminenhof\" class=\"main-image\"> . Wir haben also das srcset -Attribut hinzugef\u00fcgt. Das generelle Template daf\u00fcr sieht so aus: < img srcset = \"url size, url size, url size\" src = \"default url\" > Das hei\u00dft, nach den URLs auf die jeweiligen Bilder schreiben wir noch die Gr\u00f6\u00dfe des Viewports, ab denen die Bilder verwendet werden sollen, also 1200w, 900w, 480w . Dabei steht w f\u00fcr width . M\u00f6glich w\u00e4re auch noch, dass man statt w ein x angibt und dann die Anzahl der Pixel verwendet f\u00fcr die Viewportgr\u00f6\u00dfe. Das Laden der unterschiedlichen Images kann in den DeveloperTools unter Network beobachtet werden. Animationen \u00b6 Wenn wir auf der Hauptseite auf den + -Button klicken, dann \"erscheint\" das Formular zur Dateneingabe einfach. Das liegt daran, dass wir in der feed.js bei den Funktionen openCreatePostModal() und closeCreatePostModal() die Sichtbarkeit einfach an- und ausschalten. Wir k\u00f6nnten das aber auch etwas \"netter\" durch eine Animation gestalten. Dazu verwenden wir translateY und transition . translateY() verschiebt ein Element in y -Richtung (also rauf oder runter) und transition kann eine Zeit \u00fcbergeben werden, die angibt, wie lange der Wechsel von Werten einer Eigenschaft dauern soll - also eine Animation. In der feed.ccs \u00e4ndern wir f\u00fcr die id=create-post : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } Die Zeile 11 kann nat\u00fcrlich ganz raus. In der feed.js \u00e4ndern wir f\u00fcr die beiden Methoden: 1 2 3 4 5 6 7 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; } und danach \"slided\" das Formular von unten nach oben ein. vH ist eine Einheit in Relation zum Viewport. 100vH ist die gesamte Viewporth\u00f6he, 1vH ist der 100te Teil der Viewporth\u00f6he (siehe z.B. hier ). Daten senden \u00b6 In unserer HTW Insta -Anwendung sorgen wir nun zun\u00e4chst daf\u00fcr, dass wir auch Daten eingeben und diese versenden k\u00f6nnen. Ausgangspunkt ist dieser Stand des Projektes (noch ohne die responsiven Erweiterungen). Wir wollen dazu den Speichern -Button aus der index.html 76 77 78 < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > mit der feed.js verbinden. Dazu definieren wir uns zun\u00e4chst mithilfe von jQuery weitere Variablen f\u00fcr den direkten Zugriff auf Stuerelemente. Wir erweiteren die feed.js um die hervorgehobenen Zeilen: /src/js/feed.js 1 2 3 4 5 6 7 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); Nun k\u00f6nnen wir einfacher auf das submit -Ereignis des Speichern -Buttons reagieren. Wir melden dazu das Formular an den Ereignislistener f\u00fcr das submit -Ereignis in der feed.js an: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); }); Wir verhindern zun\u00e4chst das Standardverhalten beim submit -Ereignis, n\u00e4mlich das Absenden der Daten und das Neuladen der Seite (Zeile 80 ). In Zeile 82 pr\u00fcfen wir, ob beide input -Elemente, also sowohl f\u00fcr title , als auch f\u00fcr location einen Wert enthalten. Die JavaScript- trim() -Funktionen entfernt \"Leerzeichen\" aller Art am Ende des Strings (auch Tabs, Zeilenumbr\u00fcche etc.). Sollte eines der beiden (oder beide) Eingabefelder leer sein, beenden wir die Funktion mit einem alert und bleiben in dem Formular. alert ist nat\u00fcrlich nicht so toll, ein toast w\u00e4re viel besser, aber wir haben in unserer index.html nur einen toast f\u00fcr das erfolgreiche Speichern vordefiniert. Wenn beide Eingabefelder bef\u00fcllt sind, wird das Formularfenster verlassen. Wir erweitern diese Funktion nun um die Registrierung an die Sync Task . Sync-Task registrieren \u00b6 Wenn wir das Formular absenden und die in dem Formular eingegebenen Daten speichern wollen, steuern wir dies nun \u00fcber eine Sync Task . Diese Sync Task sorgt daf\u00fcr, dass die Daten (irgendwann) tats\u00e4chlich gespeichert werden, auch wenn wir gerade offline sind oder w\u00e4hrend des Speicherns offline geschaltet werden. F\u00fcr eine solche Sync Task existiert die SyncManager-API . Wenn Sie auf diesen Link klicken, dann sehen Sie, dass die SyncManager-API nur 2 Methoden besitzt, n\u00e4mlich register() und getTags() und dass sie bis jetzt leider nur von Chrome und Edge unterst\u00fctzt wird. Allerdings auch in allen Android-Ger\u00e4ten (mit Chrome oder WebView) und somit trotzdem eine gro\u00dfe Reichweite besitzt. Wir erweitern die Anmeldung an den Listener f\u00fcr das submit -Event zun\u00e4chst wie folgt: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { sw . sync . register ( 'sync-new-post' ); }); } }); In diesem kleinen Code-St\u00fcckchen sind einige Dinge beachtenswert. Erstens, wird die SyncManager-API vom Service Worker verwendet, aber wir sind hier ja in feed.js , also in der Webanwendung. Wir k\u00f6nnen die Registrierung an die Sync Task nicht einfach in die sw.js schreiben, da das ausl\u00f6sende Ereignis der Registrierung (n\u00e4mlich das Absenden des Formulars) in der Webanwendung stattfindet und wir dieses Ereignis in feed.js behandeln. Wir ben\u00f6tigen in feed.js also einen Zugriff auf den Service Worker. Dazu fragen wir zun\u00e4chst, ob der Service Worker \u00fcberhaupt durch den Browser unterst\u00fctzt wird und auch, ob die SyncManager-API durch den Browser unterst\u00fctzt wird. Dies geschieht in Zeile 89 . Dort f\u00e4llt auf, dass der Service Worker eine Eigenschaft von navigator ist, die SyncManager-API eine Eigenschaft von window . Window ist das Fenster, das ein DOM Dokument (also eine Webanwendung) enth\u00e4lt. Eine Eigenschaft von window ist navigator (also window.navigator ). Das Navigator -Objekt liefert Informationen \u00fcber den Browser, in dem die Anwendung ausgef\u00fchrt wird. Die ( readonly )-Eigenschaft ready eines Service Workers ist eine Promise, welche resolved ist, sobald der Service Worker active ist. Siehe hier f\u00fcr ready . \u00dcber diese Promise erlangen wir Zugriff auf den Service Worker in unserer Webanwendung. Die sync -Eigenschaft ist in dem Interface ServiceWorkerRegistration definiert. Die register() -Funktion ist eine der beiden Methoden aus der SyncManager-API und registriert eine Sync Task . Jeder Sync Task wird ein tag zugewiesen (\u00e4hnlich einer id ). \u00fcber diesen tag kann sp\u00e4ter auf diese Sync Task zugegriffen werden. Wir haben dieser Sync Task den tag 'sync-new-post' gegeben. Die Sync Task ist nun registriert. Allerdings wei\u00df der Service Worker noch gar nicht, was er bei dieser Sync Task \u00fcberhaupt synchronisieren soll. Das definieren wir jetzt. Daten in die IndexedDB speichern \u00b6 Die Daten, die (sp\u00e4ter) synchronisert werden sollen, werden zun\u00e4chst in der IndexedDB gespeichert. Dort k\u00f6nnen Sie so lange bleiben, bis die Webanwendung (wieder) online ist, um dann an das Backend durch den Service Worker gesendet zu werden. Dazu erzeugen wir uns ein passendes JavaScript-Objekt post : /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; sw . sync . register ( 'sync-new-post' ); }); } }); Die id wurde hinzugef\u00fcgt, um einen eindeutigen Identifier f\u00fcr den post in der IndexedDB zu haben ( keyPath ). Damit der Wert auch eindeutig ist, wird der Zeitstempel zum String umgewandelt und verwendet (Zeile 93 ). Diesen post wollen wir nun in die IndexedDB speichern. Dazu steht uns aus der db.js die Funktion writeData() zur Verf\u00fcgung. Diese Funktion erwartet als ersten Parameter den Store , in dem wir den post speichern wollen. Derzeit haben wir einen Store in unserer IndexedDB definiert, den Store posts : /src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); Diesen Store verwenden wir aber, um unsere Daten aus der Datenbank/dem Backend zu cachen . Wir verwenden ihn zum Schreiben und Lesen der Daten aus unserer Datenbank. F\u00fcr das Synchroniseren der neuen Daten ben\u00f6tigen wir deshalb einen weiteren Store . Dazu kopieren wir einfach die Store -Erstellung in der db.js und nennen den neuhinzugekommen Store sync-posts : /src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { db . createObjectStore ( 'posts' , { keyPath : 'id' , }). createIndex ( 'id' , 'id' ); db . createObjectStore ( 'sync-posts' , { keyPath : 'id' , }). createIndex ( 'id' , 'id' ); }, }); Gleichzeitig habe ich auch noch ein bisschen den Code gek\u00fcrzt. Die Kommentare sind raus und das autoIncrement: true ist auch Standard, deshalb muss es nicht mit angegeben werden. Wenn wir die Anwendung nun ausf\u00fchren, sehen wir unter IndexedDB , dass ein weiterer Store hinzugekommen ist: Diesen Store verwenden wir nun, um die neuen post -Daten in die IndexedDB zu schreiben: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; writeData ( 'sync-posts' , post ) . then ( () => { sw . sync . register ( 'sync-new-post' ); }); }); } }); Die Registrierung der Sync Task ist nur dann sinnvoll, wenn die Daten auch tats\u00e4chlich in der IndexedDB gespeichert wurden. Deshalb erfolgt die Registrierung in dem resolved -Pfad der writeData -Promise. Jetzt k\u00f6nnen wir noch unseren toast verwenden, den wir in der index.html definiert haben. Hierbei handelt es sich um eine Material Design Lite -Komponente Snackbar : /index.html 98 99 100 101 < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > In der feed.js verketten wir die Promise f\u00fcr das Schreiben der Daten in die IndexedDB weiter und best\u00e4tigen dies mit einer Snackbar-Nachricht: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 2000 }; snackbarContainer . showSnackbar ( data ); }); }); } }); Beachten Sie, dass Sie das return in Zeile 99 einf\u00fcgen, damit die Promise verkettet werden kann. Nachdem Sie nun Daten in das Formular eingegeben und auf Speichern geklickt haben, erscheint f\u00fcr 2 Sekunden unten eine Best\u00e4tigungsnachricht: Ein Fallback \u00b6 Wir haben festgelegt, was passieren soll, wenn der Browser Service Worker und die SyncManager-API unterst\u00fctzt. Wir sollten jedoch ein Fallback einbauen f\u00fcr den Fall, dass das nicht der Fall ist. Viel bleibt uns f\u00fcr diesen Fall nicht \u00fcbrig, zu tun. Wir k\u00f6nnen nur versuchen, die Daten, die wir in das Formular eingegeben haben, sofort an das Backend zu senden. Daten an das Backend senden, k\u00f6nnen wir bereits. Wir nutzen dazu die fetch() -Funktion und verwenden die POST -Methode. Wir f\u00fcgen dazu eine Funktion sendDataToBackend() in die feed.js ein und rufen diese im else -Fall f\u00fcr die Behandlung des submit -Ereignisses auf: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 function sendDataToBackend () { fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : titleInput . value , location : locationInput . value , image : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); updateUI ( Object . entries ( data )); }); } form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 8000 }; snackbarContainer . showSnackbar ( data ); }); }); } else { sendDataToBackend (); } }); So ganz toll ist die Fallback-Funktionalit\u00e4t nicht. Dazu m\u00fcsste die id nicht mit einem festen Wert belegt werden und die image -Eigenschaft mit einem richtigen Bild. Es l\u00e4sst sich aber einmal ausprobieren, indem man daf\u00fcr sorgt, dass die Bedingung if('serviceWorker' in navigator && 'SyncManager' in window) false ist (z.B. && false ), aber es geht hier zun\u00e4chst nur um das Prinzip und deshalb werden wir uns hier zun\u00e4chst nicht weiter darum k\u00fcmmern, dass dies vollst\u00e4ndig fehlerfrei durchgef\u00fchrt werden kann. Stattdessen k\u00fcmmern wir uns nun darum, dass das sync -Ereignis im Service Worker behandelt wird. Das geschieht immer dann, wenn der Service Worker erkennt, dass die Internetverbindung wieder hergestllt wurde. Ereignisbehandlung des sync -Events \u00b6 Wenn der Service Worker erkennt, dass die Verbindung zum Internet wieder hergestellt ist, wird automatisch das sync -Event ausgel\u00f6st. Dieses Ereignis wird auch dann ausgel\u00f6st, wenn die Internetverbindung besteht und eine Sync Task registriert wurde. Wir wollen in diesem Fall die Daten aus der IndexedDB an das Backend senden. Dazu erweitern wir die sw.js um die Behandlung des sync -Ereignisses. Wir f\u00fcgen diese Ereignisbehandlung an das Ende der sw.js ein: sw.js 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); // diese Daten an das Backend senden (siehe Fallback) } }) ); } }) Wir f\u00fcgen dem Service Worker also einen EventListener hinzu, wie wir das bereits von den anderen Ereignisbehandlungen im Service Worker kennen. Das sync -Ereignis gibt auch die tags zur\u00fcck, unter denen Sync Tasks gespeichert wurden. In unserem Fall war der verwendete tag sync-new-post . Wir verwenden auch erneut event.waitUntil() , um sicherzustellen, dass die Ereignisbehandlung nicht eher verlassen wird, bis alle definierten Anweisungen darin vollst\u00e4ndig abgearbeitet wurden. Als erstes greifen wir dann lesend auf die IndexedDB unter Verwendung der readAllData() -Methode aus der db.js . Diese Methode gibt ein Array aller gespeicherten Datens\u00e4tze in der IndexedDB im Store sync-posts zur\u00fcck. Mit einer for -Schleife betrachten wir jeden einzelnen Datensatz. Wir \"wissen\", dass ein solcher Datensatz ein JavaScript-Objekt mit den Eigenschaften id , title und location ist. Wir erweitern diese Behandlung nun um den Code, den wir zuvor f\u00fcr das Fallback verwendet haben. Wir senden die Daten an das Backend. Dazu k\u00f6nnen wir uns den Code von der Fallback-Implementierung kopieren und anpassen: sw.js 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : data . title , location : data . location , image : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) F\u00fcr die Daten, die an das Backend gesendet werden, wird nun, im gegensatz zum Fallback, auf data zugegriffen, da wir ja die Daten senden, die aus der IndexedDB ausgelesen werden. Wenn die Daten erfolgreich an das Backend \u00fcbertragen worden sind ( response.ok in Zeile 128 ), dann werden diese Daten mithilfe der deleteOneDate() -Funktion (aus db.js ) gel\u00f6scht, da sie in der IndexedDB nicht weiter ben\u00f6tigt werden. Der Store sync-posts ist ja \"nur\" dazu da, die Daten so lange zwischenzuspeichern, bis sie ins Backend (in die persistente Datenbank) gesendet sind. Sollte stattdessen ein Fehler auftreten, wird er mithilfe von catch() abgefangen und dort ausgegeben. Wenn wir nun neue Daten in das Formular eingeben und auf Speichern klicken, werden die Daten zum Backend gesendet (ohne einen Wert f\u00fcr die image -Eigenschaft - der Wert von id wird durch die Datenbank erstellt.) Das Ausprobieren der sp\u00e4teren Hintergrundsynchronisation erfolgt am Sichersten dadurch, dass Sie den Rechner komplett vom WLAN trennen. Das Offline-Schalten des Service Workers gen\u00fcgt dazu h\u00e4ufig nicht (bzw. wird beim Online-Schalten dann manchmal kein sync -Ereignis ausgel\u00f6st). Schalten Sie das WLAN an Ihrem Rechner aus. Geben Sie \u00fcber das Formular der Anwendung neue Daten ein und dr\u00fccken Sie auf den Speichern -Button. Schauen Sie in den Developer Tools unter IndexedDB in den Store sync-posts . Dort sollten die neuen Daten nun gespeichert sein. Schalten Sie das WLAN wieder ein. Auf der Konsole erscheint die fetch -Nachricht f\u00fcr POST \"http://localhost:3000/posts\" . In der persistenten Datenbank stehen die neuen Daten. Nach einem Reload der Anwendung werden diese Daten aus der Datenbank \u00fcber das Backend gelesen (ohne Bilder) und erscheinen als weitere Cards . Success Wir haben die Hintergrundsynchronisation implementiert! Das Senden der Daten an das Backend erfolgt \u00fcber das Registrieren einer Sync Task und dem (zwischen-)Speichern der zu sendenden Daten in der IndexedDB. Durch die Ereignisbehandlung des sync -Ereignisses werden diese Daten an das Backend (und dar\u00fcber in die Datenbank) geschrieben. Das sync -Ereignis wird ausgel\u00f6st, wenn der Service Worker online und eine Sync Task registriert ist. Wir k\u00f6nnen nun Daten eingeben und speichern, egal, ob wir online oder offline sind. Die Anwendung kann sogar geschlossen sein und trotzdem synchronisiert der Service Worker.","title":"Hintergrundsynchronisation"},{"location":"backgroundsync/#hintergrundsynchronisation","text":"Hintergrundsynchronisation erlaubt die Synchronisation von daten, selbst dann, wenn die Anwendung offline ist. Diese \"Synchronisation\" erfolgt nat\u00fcrlich \"asynchron\". Angenommen, Sie geben offline Daten in die Anwendung ein und wollen diese versenden, z.B. an das Backend, dann wird dieser Request so lange in Ihrer Anwendung gespeichert, bis Sie wieder online sind und erst dann ausgef\u00fchrt. Das Situation ist die Folgende: Es sollen Daten an das Backend gesendet werden, aber die Internetverbindung ist unterbrochen. Deshalb werden die Daten in die IndexedDB gespeichert und im Service Worker wird eine Sync Task registriert. Sobald die Verbindung wieder steht, wird ein Sync -Event im Service Worker ausgel\u00f6st und dieser sendet die Daten an das Backend ( POST-Request ). Dadurch, dass der Service Worker diesen POST-Request ausf\u00fchrt (und die Daten dabei mitsendet), kann die Hintergrundsynchronisation sogar dann stattfinden, wenn die Webanwendung bereits geschlossen ist! Deshalb sollten wir einfach immer beim Senden von Daten eine Sync Task registrieren, weil es sein kann, dass die Daten noch gar nicht vollst\u00e4ndig gesendet wurden, bevor wir den Browsertab schlie\u00dfen.","title":"Hintergrundsynchronisation"},{"location":"backgroundsync/#zunachst-ein-bisschen-mehr-responsive","text":"Unser HTW Insta entwickelt sich langsam. Deshalb ist hier vielleicht ein guter Zeitpunkt, um die Anwendung noch etwas mehr responsive zu gestalten.","title":"Zun\u00e4chst ein bisschen mehr responsive"},{"location":"backgroundsync/#media-queries","text":"Zum Beispiel sind die Cards stets in fester Gr\u00f6\u00dfe, unabh\u00e4ngig davon, ob wir die Anwendung am Desktop betrachten oder am Mobilger\u00e4t. Dazu k\u00f6nnen wir in unsere feed.css ein paar Media queries einf\u00fcgen: /src/css/feed.css # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; visibility : hidden ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . whiteText { color : white ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } . shared-moment-card . mdl-card { margin : 10 px auto ; width : 80 % ; } @ media ( min-width : 600px ) { . shared-moment-card . mdl-card { width : 60 % ; } } @ media ( min-width : 1200px ) { . shared-moment-card . mdl-card { width : 45 % ; } } . shared-moment-card . mdl-card__title { height : 250 px ; } @ media ( min-height : 600px ) { . shared-moment-card . mdl-card__title { height : 300 px ; } } @ media ( min-height : 1200px ) { . shared-moment-card . mdl-card__title { height : 380 px ; } } Wir haben sowohl f\u00fcr die Viewport-H\u00f6he als auch f\u00fcr die Viewport-Breite zwei Breakpoints eingebaut. Bei jeweils 600px bzw. 1200px \u00e4ndern sich die Angaben zur H\u00f6he bzw. Breite der Bilder in den Cards . Achtung: In feed.js muss dazu die Zeile cardTitle.style.height = '180px'; gel\u00f6scht werden! Die H\u00f6he und Breite der Bilder in den Cards passt sich jetzt (besser) der Viewport-Breite und -H\u00f6he an. Bei den Breiten haben wir sogar %-Angaben verwendet (gut), bei den H\u00f6hen nur feste Pixel-Werte (nicht so gut). Sie k\u00f6nnen gerne damit herumspielen und es an Ihre Bed\u00fcrfnisse anpassen. Mehr zu Media Queries finden Sie z.B. hier und hier https://wiki.selfhtml.org/wiki/CSS/Media_Queries .","title":"Media Queries"},{"location":"backgroundsync/#srcset-attribut-fur-img","text":"Die Verwendung der Bilder k\u00f6nnen wir noch auf eine andere Art responsive gestalten. Je nach Viewport-Gr\u00f6\u00dfe k\u00f6nnen die Bilder eingebunden werden, deren Aufl\u00f6sung \"ausreicht\". In dem /public/src/images/ -Ordner haben wir f\u00fcr unser Hauptbild oben drei verschiedene Versionen: htw.jpg , mit der Aufl\u00f6sung 898 x 343 Pixel, htw-lg.jpg , mit der Aufl\u00f6sung 1199 x 457 Pixel und htw-sm.jpg , mit der Aufl\u00f6sung 480 x 183 Pixel. Es w\u00e4re unsinnig, beisielsweise das htw-lg.jp auf einem schmalen Viewport anzuzeigen, da daf\u00fcr die Aufl\u00f6sung des htw-sm.lpg v\u00f6llig gen\u00fcgt. Da Letzteres auch noch deutlich kleiner ist ( 43 KB ), als das htw-lg.jpg -Bild ( 170 KB ), lie\u00dfe sich auch die Ladezeit verringern, wenn f\u00fcr mobile Ger\u00e4te das kleiner Bild verwendet w\u00fcrde. Auf der anderen Seite sieht dieses Bild aufgrund seiner niedrigen Aufl\u00f6sung in gro\u00dfen Viewports (also am Desktop-Monitor) nicht gut aus. Dort ben\u00f6tigen wir das htw-lg.jpg . Um diesen Wechsel der Bilder je nach Viewport-Gr\u00f6\u00dfe zu vereinfachen, wurde in HTML5 f\u00fcr das img -Element das Attribut srcset hinzugef\u00fcgt (siehe z.B. hier oder hier ). In unserer index.html k\u00f6nnen wir also das Einbinden des img -Elementes wie folgt erweitern: /index.html 88 89 90 91 < img srcset = \"/src/images/htw-lg.jpg 1200w, /src/images/htw.jpg 900w, /src/images/htw-sm.jpg 480w\" src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > Zuvor stand dort einfach nur: <img src=\"/src/images/htw.jpg\" alt=\"HTW Wilhelminenhof\" class=\"main-image\"> . Wir haben also das srcset -Attribut hinzugef\u00fcgt. Das generelle Template daf\u00fcr sieht so aus: < img srcset = \"url size, url size, url size\" src = \"default url\" > Das hei\u00dft, nach den URLs auf die jeweiligen Bilder schreiben wir noch die Gr\u00f6\u00dfe des Viewports, ab denen die Bilder verwendet werden sollen, also 1200w, 900w, 480w . Dabei steht w f\u00fcr width . M\u00f6glich w\u00e4re auch noch, dass man statt w ein x angibt und dann die Anzahl der Pixel verwendet f\u00fcr die Viewportgr\u00f6\u00dfe. Das Laden der unterschiedlichen Images kann in den DeveloperTools unter Network beobachtet werden.","title":"srcset-Attribut f\u00fcr img"},{"location":"backgroundsync/#animationen","text":"Wenn wir auf der Hauptseite auf den + -Button klicken, dann \"erscheint\" das Formular zur Dateneingabe einfach. Das liegt daran, dass wir in der feed.js bei den Funktionen openCreatePostModal() und closeCreatePostModal() die Sichtbarkeit einfach an- und ausschalten. Wir k\u00f6nnten das aber auch etwas \"netter\" durch eine Animation gestalten. Dazu verwenden wir translateY und transition . translateY() verschiebt ein Element in y -Richtung (also rauf oder runter) und transition kann eine Zeit \u00fcbergeben werden, die angibt, wie lange der Wechsel von Werten einer Eigenschaft dauern soll - also eine Animation. In der feed.ccs \u00e4ndern wir f\u00fcr die id=create-post : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } Die Zeile 11 kann nat\u00fcrlich ganz raus. In der feed.js \u00e4ndern wir f\u00fcr die beiden Methoden: 1 2 3 4 5 6 7 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; } und danach \"slided\" das Formular von unten nach oben ein. vH ist eine Einheit in Relation zum Viewport. 100vH ist die gesamte Viewporth\u00f6he, 1vH ist der 100te Teil der Viewporth\u00f6he (siehe z.B. hier ).","title":"Animationen"},{"location":"backgroundsync/#daten-senden","text":"In unserer HTW Insta -Anwendung sorgen wir nun zun\u00e4chst daf\u00fcr, dass wir auch Daten eingeben und diese versenden k\u00f6nnen. Ausgangspunkt ist dieser Stand des Projektes (noch ohne die responsiven Erweiterungen). Wir wollen dazu den Speichern -Button aus der index.html 76 77 78 < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > mit der feed.js verbinden. Dazu definieren wir uns zun\u00e4chst mithilfe von jQuery weitere Variablen f\u00fcr den direkten Zugriff auf Stuerelemente. Wir erweiteren die feed.js um die hervorgehobenen Zeilen: /src/js/feed.js 1 2 3 4 5 6 7 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); Nun k\u00f6nnen wir einfacher auf das submit -Ereignis des Speichern -Buttons reagieren. Wir melden dazu das Formular an den Ereignislistener f\u00fcr das submit -Ereignis in der feed.js an: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); }); Wir verhindern zun\u00e4chst das Standardverhalten beim submit -Ereignis, n\u00e4mlich das Absenden der Daten und das Neuladen der Seite (Zeile 80 ). In Zeile 82 pr\u00fcfen wir, ob beide input -Elemente, also sowohl f\u00fcr title , als auch f\u00fcr location einen Wert enthalten. Die JavaScript- trim() -Funktionen entfernt \"Leerzeichen\" aller Art am Ende des Strings (auch Tabs, Zeilenumbr\u00fcche etc.). Sollte eines der beiden (oder beide) Eingabefelder leer sein, beenden wir die Funktion mit einem alert und bleiben in dem Formular. alert ist nat\u00fcrlich nicht so toll, ein toast w\u00e4re viel besser, aber wir haben in unserer index.html nur einen toast f\u00fcr das erfolgreiche Speichern vordefiniert. Wenn beide Eingabefelder bef\u00fcllt sind, wird das Formularfenster verlassen. Wir erweitern diese Funktion nun um die Registrierung an die Sync Task .","title":"Daten senden"},{"location":"backgroundsync/#sync-task-registrieren","text":"Wenn wir das Formular absenden und die in dem Formular eingegebenen Daten speichern wollen, steuern wir dies nun \u00fcber eine Sync Task . Diese Sync Task sorgt daf\u00fcr, dass die Daten (irgendwann) tats\u00e4chlich gespeichert werden, auch wenn wir gerade offline sind oder w\u00e4hrend des Speicherns offline geschaltet werden. F\u00fcr eine solche Sync Task existiert die SyncManager-API . Wenn Sie auf diesen Link klicken, dann sehen Sie, dass die SyncManager-API nur 2 Methoden besitzt, n\u00e4mlich register() und getTags() und dass sie bis jetzt leider nur von Chrome und Edge unterst\u00fctzt wird. Allerdings auch in allen Android-Ger\u00e4ten (mit Chrome oder WebView) und somit trotzdem eine gro\u00dfe Reichweite besitzt. Wir erweitern die Anmeldung an den Listener f\u00fcr das submit -Event zun\u00e4chst wie folgt: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { sw . sync . register ( 'sync-new-post' ); }); } }); In diesem kleinen Code-St\u00fcckchen sind einige Dinge beachtenswert. Erstens, wird die SyncManager-API vom Service Worker verwendet, aber wir sind hier ja in feed.js , also in der Webanwendung. Wir k\u00f6nnen die Registrierung an die Sync Task nicht einfach in die sw.js schreiben, da das ausl\u00f6sende Ereignis der Registrierung (n\u00e4mlich das Absenden des Formulars) in der Webanwendung stattfindet und wir dieses Ereignis in feed.js behandeln. Wir ben\u00f6tigen in feed.js also einen Zugriff auf den Service Worker. Dazu fragen wir zun\u00e4chst, ob der Service Worker \u00fcberhaupt durch den Browser unterst\u00fctzt wird und auch, ob die SyncManager-API durch den Browser unterst\u00fctzt wird. Dies geschieht in Zeile 89 . Dort f\u00e4llt auf, dass der Service Worker eine Eigenschaft von navigator ist, die SyncManager-API eine Eigenschaft von window . Window ist das Fenster, das ein DOM Dokument (also eine Webanwendung) enth\u00e4lt. Eine Eigenschaft von window ist navigator (also window.navigator ). Das Navigator -Objekt liefert Informationen \u00fcber den Browser, in dem die Anwendung ausgef\u00fchrt wird. Die ( readonly )-Eigenschaft ready eines Service Workers ist eine Promise, welche resolved ist, sobald der Service Worker active ist. Siehe hier f\u00fcr ready . \u00dcber diese Promise erlangen wir Zugriff auf den Service Worker in unserer Webanwendung. Die sync -Eigenschaft ist in dem Interface ServiceWorkerRegistration definiert. Die register() -Funktion ist eine der beiden Methoden aus der SyncManager-API und registriert eine Sync Task . Jeder Sync Task wird ein tag zugewiesen (\u00e4hnlich einer id ). \u00fcber diesen tag kann sp\u00e4ter auf diese Sync Task zugegriffen werden. Wir haben dieser Sync Task den tag 'sync-new-post' gegeben. Die Sync Task ist nun registriert. Allerdings wei\u00df der Service Worker noch gar nicht, was er bei dieser Sync Task \u00fcberhaupt synchronisieren soll. Das definieren wir jetzt.","title":"Sync-Task registrieren"},{"location":"backgroundsync/#daten-in-die-indexeddb-speichern","text":"Die Daten, die (sp\u00e4ter) synchronisert werden sollen, werden zun\u00e4chst in der IndexedDB gespeichert. Dort k\u00f6nnen Sie so lange bleiben, bis die Webanwendung (wieder) online ist, um dann an das Backend durch den Service Worker gesendet zu werden. Dazu erzeugen wir uns ein passendes JavaScript-Objekt post : /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; sw . sync . register ( 'sync-new-post' ); }); } }); Die id wurde hinzugef\u00fcgt, um einen eindeutigen Identifier f\u00fcr den post in der IndexedDB zu haben ( keyPath ). Damit der Wert auch eindeutig ist, wird der Zeitstempel zum String umgewandelt und verwendet (Zeile 93 ). Diesen post wollen wir nun in die IndexedDB speichern. Dazu steht uns aus der db.js die Funktion writeData() zur Verf\u00fcgung. Diese Funktion erwartet als ersten Parameter den Store , in dem wir den post speichern wollen. Derzeit haben wir einen Store in unserer IndexedDB definiert, den Store posts : /src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); Diesen Store verwenden wir aber, um unsere Daten aus der Datenbank/dem Backend zu cachen . Wir verwenden ihn zum Schreiben und Lesen der Daten aus unserer Datenbank. F\u00fcr das Synchroniseren der neuen Daten ben\u00f6tigen wir deshalb einen weiteren Store . Dazu kopieren wir einfach die Store -Erstellung in der db.js und nennen den neuhinzugekommen Store sync-posts : /src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { db . createObjectStore ( 'posts' , { keyPath : 'id' , }). createIndex ( 'id' , 'id' ); db . createObjectStore ( 'sync-posts' , { keyPath : 'id' , }). createIndex ( 'id' , 'id' ); }, }); Gleichzeitig habe ich auch noch ein bisschen den Code gek\u00fcrzt. Die Kommentare sind raus und das autoIncrement: true ist auch Standard, deshalb muss es nicht mit angegeben werden. Wenn wir die Anwendung nun ausf\u00fchren, sehen wir unter IndexedDB , dass ein weiterer Store hinzugekommen ist: Diesen Store verwenden wir nun, um die neuen post -Daten in die IndexedDB zu schreiben: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; writeData ( 'sync-posts' , post ) . then ( () => { sw . sync . register ( 'sync-new-post' ); }); }); } }); Die Registrierung der Sync Task ist nur dann sinnvoll, wenn die Daten auch tats\u00e4chlich in der IndexedDB gespeichert wurden. Deshalb erfolgt die Registrierung in dem resolved -Pfad der writeData -Promise. Jetzt k\u00f6nnen wir noch unseren toast verwenden, den wir in der index.html definiert haben. Hierbei handelt es sich um eine Material Design Lite -Komponente Snackbar : /index.html 98 99 100 101 < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > In der feed.js verketten wir die Promise f\u00fcr das Schreiben der Daten in die IndexedDB weiter und best\u00e4tigen dies mit einer Snackbar-Nachricht: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 2000 }; snackbarContainer . showSnackbar ( data ); }); }); } }); Beachten Sie, dass Sie das return in Zeile 99 einf\u00fcgen, damit die Promise verkettet werden kann. Nachdem Sie nun Daten in das Formular eingegeben und auf Speichern geklickt haben, erscheint f\u00fcr 2 Sekunden unten eine Best\u00e4tigungsnachricht:","title":"Daten in die IndexedDB speichern"},{"location":"backgroundsync/#ein-fallback","text":"Wir haben festgelegt, was passieren soll, wenn der Browser Service Worker und die SyncManager-API unterst\u00fctzt. Wir sollten jedoch ein Fallback einbauen f\u00fcr den Fall, dass das nicht der Fall ist. Viel bleibt uns f\u00fcr diesen Fall nicht \u00fcbrig, zu tun. Wir k\u00f6nnen nur versuchen, die Daten, die wir in das Formular eingegeben haben, sofort an das Backend zu senden. Daten an das Backend senden, k\u00f6nnen wir bereits. Wir nutzen dazu die fetch() -Funktion und verwenden die POST -Methode. Wir f\u00fcgen dazu eine Funktion sendDataToBackend() in die feed.js ein und rufen diese im else -Fall f\u00fcr die Behandlung des submit -Ereignisses auf: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 function sendDataToBackend () { fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : titleInput . value , location : locationInput . value , image : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); updateUI ( Object . entries ( data )); }); } form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 8000 }; snackbarContainer . showSnackbar ( data ); }); }); } else { sendDataToBackend (); } }); So ganz toll ist die Fallback-Funktionalit\u00e4t nicht. Dazu m\u00fcsste die id nicht mit einem festen Wert belegt werden und die image -Eigenschaft mit einem richtigen Bild. Es l\u00e4sst sich aber einmal ausprobieren, indem man daf\u00fcr sorgt, dass die Bedingung if('serviceWorker' in navigator && 'SyncManager' in window) false ist (z.B. && false ), aber es geht hier zun\u00e4chst nur um das Prinzip und deshalb werden wir uns hier zun\u00e4chst nicht weiter darum k\u00fcmmern, dass dies vollst\u00e4ndig fehlerfrei durchgef\u00fchrt werden kann. Stattdessen k\u00fcmmern wir uns nun darum, dass das sync -Ereignis im Service Worker behandelt wird. Das geschieht immer dann, wenn der Service Worker erkennt, dass die Internetverbindung wieder hergestllt wurde.","title":"Ein Fallback"},{"location":"backgroundsync/#ereignisbehandlung-des-sync-events","text":"Wenn der Service Worker erkennt, dass die Verbindung zum Internet wieder hergestellt ist, wird automatisch das sync -Event ausgel\u00f6st. Dieses Ereignis wird auch dann ausgel\u00f6st, wenn die Internetverbindung besteht und eine Sync Task registriert wurde. Wir wollen in diesem Fall die Daten aus der IndexedDB an das Backend senden. Dazu erweitern wir die sw.js um die Behandlung des sync -Ereignisses. Wir f\u00fcgen diese Ereignisbehandlung an das Ende der sw.js ein: sw.js 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); // diese Daten an das Backend senden (siehe Fallback) } }) ); } }) Wir f\u00fcgen dem Service Worker also einen EventListener hinzu, wie wir das bereits von den anderen Ereignisbehandlungen im Service Worker kennen. Das sync -Ereignis gibt auch die tags zur\u00fcck, unter denen Sync Tasks gespeichert wurden. In unserem Fall war der verwendete tag sync-new-post . Wir verwenden auch erneut event.waitUntil() , um sicherzustellen, dass die Ereignisbehandlung nicht eher verlassen wird, bis alle definierten Anweisungen darin vollst\u00e4ndig abgearbeitet wurden. Als erstes greifen wir dann lesend auf die IndexedDB unter Verwendung der readAllData() -Methode aus der db.js . Diese Methode gibt ein Array aller gespeicherten Datens\u00e4tze in der IndexedDB im Store sync-posts zur\u00fcck. Mit einer for -Schleife betrachten wir jeden einzelnen Datensatz. Wir \"wissen\", dass ein solcher Datensatz ein JavaScript-Objekt mit den Eigenschaften id , title und location ist. Wir erweitern diese Behandlung nun um den Code, den wir zuvor f\u00fcr das Fallback verwendet haben. Wir senden die Daten an das Backend. Dazu k\u00f6nnen wir uns den Code von der Fallback-Implementierung kopieren und anpassen: sw.js 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : data . title , location : data . location , image : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) F\u00fcr die Daten, die an das Backend gesendet werden, wird nun, im gegensatz zum Fallback, auf data zugegriffen, da wir ja die Daten senden, die aus der IndexedDB ausgelesen werden. Wenn die Daten erfolgreich an das Backend \u00fcbertragen worden sind ( response.ok in Zeile 128 ), dann werden diese Daten mithilfe der deleteOneDate() -Funktion (aus db.js ) gel\u00f6scht, da sie in der IndexedDB nicht weiter ben\u00f6tigt werden. Der Store sync-posts ist ja \"nur\" dazu da, die Daten so lange zwischenzuspeichern, bis sie ins Backend (in die persistente Datenbank) gesendet sind. Sollte stattdessen ein Fehler auftreten, wird er mithilfe von catch() abgefangen und dort ausgegeben. Wenn wir nun neue Daten in das Formular eingeben und auf Speichern klicken, werden die Daten zum Backend gesendet (ohne einen Wert f\u00fcr die image -Eigenschaft - der Wert von id wird durch die Datenbank erstellt.) Das Ausprobieren der sp\u00e4teren Hintergrundsynchronisation erfolgt am Sichersten dadurch, dass Sie den Rechner komplett vom WLAN trennen. Das Offline-Schalten des Service Workers gen\u00fcgt dazu h\u00e4ufig nicht (bzw. wird beim Online-Schalten dann manchmal kein sync -Ereignis ausgel\u00f6st). Schalten Sie das WLAN an Ihrem Rechner aus. Geben Sie \u00fcber das Formular der Anwendung neue Daten ein und dr\u00fccken Sie auf den Speichern -Button. Schauen Sie in den Developer Tools unter IndexedDB in den Store sync-posts . Dort sollten die neuen Daten nun gespeichert sein. Schalten Sie das WLAN wieder ein. Auf der Konsole erscheint die fetch -Nachricht f\u00fcr POST \"http://localhost:3000/posts\" . In der persistenten Datenbank stehen die neuen Daten. Nach einem Reload der Anwendung werden diese Daten aus der Datenbank \u00fcber das Backend gelesen (ohne Bilder) und erscheinen als weitere Cards . Success Wir haben die Hintergrundsynchronisation implementiert! Das Senden der Daten an das Backend erfolgt \u00fcber das Registrieren einer Sync Task und dem (zwischen-)Speichern der zu sendenden Daten in der IndexedDB. Durch die Ereignisbehandlung des sync -Ereignisses werden diese Daten an das Backend (und dar\u00fcber in die Datenbank) geschrieben. Das sync -Ereignis wird ausgel\u00f6st, wenn der Service Worker online und eine Sync Task registriert ist. Wir k\u00f6nnen nun Daten eingeben und speichern, egal, ob wir online oder offline sind. Die Anwendung kann sogar geschlossen sein und trotzdem synchronisiert der Service Worker.","title":"Ereignisbehandlung des sync-Events"},{"location":"caching/","text":"Caching mit Service Workern \u00b6 Caching ist ein Konzept, um Ressourcen zu speichern, um sie nicht wieder vom Server laden zu m\u00fcssen. Browser verf\u00fcgen \u00fcber eigene Caches (\"Pufferspeicher\") und darin k\u00f6nnen Browser Bilder, CSS-Dateien, JavaScript-Dateien und andere Mediadateien (z.B. pdf) speichern, um diese nicht erneut vom Webserver laden zu m\u00fcssen. Das Caching beschleunigt das wiederholte Laden von Webseiten. Caching mit service working verfolgt das gleiche Prinzip. Auch hier werden Ressourcen in einen Cache geladen. Der Vorteil hierbei ist jedoch nicht das schnellere Laden beim Wiederholen, sondern die M\u00f6glichkeit zu er\u00f6ffnen, die Webanwendung auch (teilweise) offline auszuf\u00fchren. Mit dem Service-Worker-Caching bieten wir somit die F\u00e4higkeit des Offline-Modus unserer Anwendung. Die Verwendung eines Caches durch einen service worker erfolgt mithilfe der Cache API. Die Cache API \u00b6 Die Cache API verfolgt ein ganz simples Konzept. Mithilfe der Cache API werden einfach (Schl\u00fcssel-/Werte-)Paare von Requests und Responses gespeichert. Auf den Cache (also auf die Menge aller gespeicherten Request-/Response-Paare) k\u00f6nnen sowohl service worker als auch das JavaScript der Webanwendung zugreifen. Allerdings kann es ja sein, dass das \"normale\" JavaScript der Webanwendung (noch) nicht geladen werden kann, weil z.B. die Internetverbindung zu schwach ist oder nicht vorhanden, ein service worker kann aber trotzdem bereits Daten aus dem Cache liefern, ohne \u00fcberhaupt einen Request \u00fcber das Internet zu senden. Wichtig ist noch zu betonen, dass die Cache API (noch) nicht von besonders vielen Browsern unterst\u00fctzt wird. Das sieht man hier , wenn Sie nach ganz unten scrollen. Im Prinzip funktioniert es nur (vollst\u00e4ndig) mit Chrome, Firefox und Opera. Bereinigen des HTW-Insta-Projektes \u00b6 Bevor wir unseren Service-Worker-Cache implementieren, bereinigen wir zun\u00e4chst noch unser HTW-Insta-Projekt. Aus der public/src/js/app.js entfernen wir den gesamten Code, der sich auf Promises und die Fetch API bezog. Die app.js sieht nun (wieder) so aus: public/src/js/app.js if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } In der public/sw.js (also in unserem service worker ), l\u00f6schen wir die Ausgaben auf die Konsole f\u00fcr das fetch -Event. Stattdessen f\u00fcgen wir eine respondWith() -Funktion ein: public/sw.js self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { event . respondWith ( fetch ( event . request )); }) Die respondWith() -Funktion ist eine Funktion des fetch -Events (also FetchEvent.respondWith() ). Sie sorgt einerseits daf\u00fcr, den Browser von seiner Standardbehandlung des FetchEvents abzuhalten und stattdessen eine eigene Promise f\u00fcr die Behandlung des FetchEvents zu definieren. Die Standardsyntax ist: fetchEvent . respondWith ( // Promise that resolves to a Response. ); Hier ist ein Beispiel f\u00fcr die responseWith() -Funktion aus : 1 2 3 4 5 6 7 8 9 10 11 addEventListener ( 'fetch' , event => { // Prevent the default, and handle the request ourselves. event . respondWith ( async function () { // Try to get the response from a cache. const cachedResponse = await caches . match ( event . request ); // Return it if we found one. if ( cachedResponse ) return cachedResponse ; // If we didn't find a match in the cache, use the network. return fetch ( event . request ); }()); }); Darin wird f\u00fcr ein fetch -Event zun\u00e4chst gepr\u00fcft, ob der request im Cache vorhanden ist (Zeile 5 ). Wenn ja, dann bekommt die Variable cachedResponse den Wert der response aus dem Cache ( match liefert die response zum zugeh\u00f6rigen request ). Wenn das der Fall ist, dann liefert responseWith() genau diese response aus dem Cache zur\u00fcck. Wenn der request nicht im Cache gespeichert ist, dann wird einfach der event.request weitergeleitet, also nichts aus dem Cache genommen. In unserer derzeitigen Implementierung (highlighted Zeile 11 oben), wird noch nicht auf den Cache zugegriffen, sondern der request direkt an den Webserver weitergeleitet. Sollten Sie daf\u00fcr einen Fehler bekommen, weil das Promise als nicht korrekt behandelt gilt, dann k\u00f6nnen Sie diese Zeile zun\u00e4chst auch einfach auskommentieren. Eine etwas gr\u00f6\u00dfere \u00c4nderung f\u00fchren wir in der public/src/js/feed.js durch. Wir f\u00fcgen statisch einen Blog-Eintrag hinzu. Die Anwendung sieht dann so aus: Schauen Sie in die index.html . In das folgende <div id=\"shared-moments\"></div> f\u00fcgen wir eine Card der Form <div class=\"shared-moment-card mdl-card mdl-shadow--2dp\"></div> hinzu, welche das Foto und den Text enth\u00e4lt. Das passiert in einer Funktion createCard() : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); function openCreatePostModal () { createPostArea . style . display = 'block' ; } function closeCreatePostModal () { createPostArea . style . display = 'none' ; } shareImageButton . addEventListener ( 'click' , openCreatePostModal ); closeCreatePostModalButton . addEventListener ( 'click' , closeCreatePostModal ); function createCard () { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; cardTitle . style . backgroundImage = 'url(\"/src/images/htw-gebaeude-h.jpg\")' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = 'Vor der HTW-Mensa' ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = 'HTW Berlin' ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } fetch ( 'https://httpbin.org/get' ) . then ( function ( res ) { return res . json (); }) . then ( function ( data ) { createCard (); }); Zun\u00e4chst wird in Zeile 4 auf das div mit der id=\"shared-moments\" zugegriffen. In dieses div wird die Card eingef\u00fcgt. Alles CSS-Klassen mit mdl- am Anfang sind Klassen von Material Design Ligt . F\u00fcr die CSS-Klasse shared-moment-card definieren wir in public/src/css/feed.css noch: . shared-moment-card . mdl-card { margin : 10 px auto ; } so, dass die Card einen Abstand vom Rand bekommt. Interessant ist vielleicht noch die Zeile 36 componentHandler.upgradeElement(cardWrapper); . Mit dieser Funktion m\u00fcssen dynamisch erzeugte DOM-Elemente registriert werden, damit sie von Material Design Lite automatisch verwaltet werden. Siehe dazu Uses MDL on dynamic websites . IKT-PWA-03 bei GitHub \u00b6 Das Bild htw-gebaeude-h.jpg muss auch noch dem public/src/images -Ordner hinzugef\u00fcgt werden. Die aktuelle Ausgangssituation unseres Projektes finden Sie hier . Achten Sie bitte darauf, dass Sie (zumindest so lange wir uns mit dem Service-Worker-Cache besch\u00e4ftigen) das H\u00e4kchen bei Disable Cache in den Developer Tools unter Network gesetzt haben: Was soll in den Cache? \u00b6 Zun\u00e4chst \u00fcberlegen wir uns, was \u00fcberhaupt in den Cache soll und was nicht. Prinzipiell verfolgen wir mit dem Service-Worker-Cache die Idee, dass die Anwendung auch offline verwendbar bleiben soll. Wenn wir unsere aktuelle Anwendung betrachten, dann k\u00f6nnen wir unterscheiden zwischen \"statischen\" und \"dynamischen\" Inhalten. Statisch ist im Prinzip der Rahmen unserer Anwendung, also im prinzip alles, was wir hatten vor unserem ersten Blog-Eintrag. Dieser Rahmen gibt uns das Gef\u00fchl, dass die Anwendung \"l\u00e4uft\" - es fehlen nur die dynamischen Inhalte, also die Blog-Eintr\u00e4ge. Stattdessen k\u00f6nnte man aber eine Meldung ausgeben, dass diese Inhalte derzeit nicht verf\u00fcgbar sind. Das w\u00e4re alles jedenfalls besser als eine 404-Seite oder ein unendliches Warten oder das hier: Der Rahmen einer Webanwendung wird auch App-Shell genannt. Wir wollen diese App-Shell zun\u00e4chst in unseren Service-Worker-Cache speichern. Static caching/Precaching \u00b6 Wir wollen zun\u00e4chst die statischen Inhalte unserer Anwendung sin den Cache speichern. Dies geschieht beim Installieren (registrieren) des service workers. Das ist auch insofern praktisch, als dass der service worker ja nur dann neu registriert wird, wenn er ge\u00e4ndert wurde. Ansonsten bleibt einfach der \"alte\" existent. Ziel ist es also, zun\u00e4chst alles das in den Cache zu speichern, was unsere Webanwendung ausmacht: die index.html , alle *.css -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden, alle *.js -Dateien, die mittels <script src=\"...\"> in dieser index.html einegunden werden und alle *.png -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden. Den Service-Worker-Cache erstellen \u00b6 Wir haben bereits eingangs festgelegt, dass wir den Cache in dem Moment anlegen wollen, in dem der service worker installiert wird. Das bedeutet, wir erstellen den Cache in der Ereignisbehandlung des Lebenszyklus-Event install des service workers, also hier ( sw.js ): self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); // hier soll der Cache \"entstehen\" }) Den Service-Worker-Cache erstellen wir mithilfe der Anweisung caches.open(); . Hierbei handelt es sich um eine Funktion von CacheStorage . Die Funktion caches.open() erzeugt ein Cache -Objekt, wenn es noch nicht existiert. Die R\u00fcckgabe ( response der Promise ) ist also ein Cache -Objekt. Man k\u00f6nnte nun annehmen, man schreibt einfach das hier: 1 2 3 4 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); caches . open (); // nicht gut! }) Diese Idee ist aber nicht so gut, da wir immer im Hinterkopf behalten m\u00fcssen, dass in einem service worker alles asynchron abgearbeitet wird. Das bedeutet, dass wir in diesem Fall bei der Baehandlung des install -Events zwei Anweisungen eifach \"antriggern\": die Ausgabe auf die Konsole (Zeile 2 ) und das Erzeugen eines Cache -Objektes (Zeile 3 ). Wie lange jedes einzelne braucht und wann etwas fertig ist, wissen wir nicht. Das bedeutet z.B. dass die Ereignisbehandlung des install -Events fertig ist, noch bevor die Ausgabe auf die Konsole und/oder das Erzeugen des Cache -Objektes abgeschlossen ist/sind. Das wiederum w\u00fcrde bedeuten, dass wir asynchron evtl. bereits fetch -Anfragen ausl\u00f6sen, noch bevor der Cache bereit ist. Um dieses Problem zu verhindern, betten wir die Erzeugung des Cache -Objektes in eine event.waitUntil() -Funktion ein. Erst wenn diese Funktion abgeschlossen ist, ist auch die Ereignisbehandlung des install -Events abgeschlossen (siehe auch hier . Das richtige Vorgehen ist also dieses: 1 2 3 4 5 6 7 8 9 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); }) ); }) caches.open() erzeugt also ein Promise , dessen response der erzeugte Cache ist. Wir konsumieren diesen Cache und geben zun\u00e4chst nur eine Ausgabe auf der Konsole aus. Der Parameter 'static' in caches.open() ist ein Name f\u00fcr den Cache. Die Namen sind frei w\u00e4hlbar und man kann verschiedene Namen vergeben. Das sind dann jeweils eine Art \"Unter\"-Caches oder sub caches ) im Service-Worker-Cache. Eine Ressource in den Cache speichern \u00b6 Nun kann der Cache entsprechend mit request - response -Schl\u00fcssel-Werte-Paaren bef\u00fcllt werden. Die auf den Cache anwenbaren Funktionen sind hier dokumentiert. Es sind match(request, options) , matchAll(request, options) , add(request) , , addAll(request) , , put(request, response) , delete(request, options) und , keys(request, options) . Alle liefern nat\u00fcrlich ein Promise zur\u00fcck. Um die statischen Inhalte unserer Webanwendung in den Cache zu laden, verwenden wir die add(request) -Funktion. Diese Funktion macht folgendes: sie f\u00fchrt den request aus ( fetch(request) ) und speichert die response (also die angefragte Ressource) \u2192 dieses Speichern entspricht einem put(request, response) im Cache. Wenn wir also folgendes implementieren: 1 2 3 4 5 6 7 8 9 10 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) , dann wird beim Initialisieren des service workers die Ressource public/src/js/app.js beim Webserver angefragt und die response , also die app.js im Cache gespeichert. Wenn wir unsere Anwednung so ausf\u00fchren, dann sehen wir in den DeveloperTools im Reiter Application im Cache Storage den Cache static und darin die gespeicherte Ressource /src/js/app.js . Eine Ressource aus dem Cache lesen \u00b6 Jetzt haben wir einen Ressource in den Cache geladen, aber wir verwenden sie noch nicht, da wir in der bisherigen Behandlung des fetch -Events den Cache noch nicht nutzen. Zur Erinnerung: bei der Behandlung des fetch -Events wirkt der service worker wie ein Proxy. Er \"schaltet\" sich zwischen die Webanwendung und die ANfrage dieser an den Webserver. In unserer derzeitigen Implementierung des fetch -Events wird der request einfach an den Webserver durchgeschleust, ohne irgendetwas damit zu tun. Das wollen wir nun \u00e4ndern: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Wir reagieren auf das fetch -Ereignis zun\u00e4chst mit der respondWith() -Funktion, die wir bereits oben besprochen haben. Diese Funktion verhindert die Ausf\u00fchrung des Standardverhaltens beim fetch , n\u00e4mlich die Anfrage an den Webserver. Stattdessen fragen wir mithilfe der caches.match() -Funktion alle sub caches unseres Caches nach dem als Parameter \u00fcbergebenen request an. Im Cache sind die Eintr\u00e4ge als Schl\u00fcssel-Werte_paare request - response abgespeichert. Findet sich der request im Cache, dann liefert die Promise ein response -Objekt zur\u00fcck. Wenn das so ist (Zeile 5 ), dann geben wir dieses response -Objekt an die Webanwendung zur\u00fcck (Zeile 6 ). Das ist dann also die aus dem Cache geladene Ressource. Wenn die match() -Funktion jedoch den Schl\u00fcssel request nicht im Cache gefunden hat (und somit auch keine response ), gibt sie zwar trotzdem ein Promise zur\u00fcck, aber dann ist die response null . Das bedeutet, dass die if -Abfrage in Zeile 5 ein false zur\u00fcckgibt und wir somit Zeile 8 ausf\u00fchren. Darin wird die Anfrage einfach an den Webserver weitergeleitet, die Ressource also vom Webserver geladen. Wir \u00fcberpr\u00fcfen die Funktionalit\u00e4t dieser fetch -Ereignisbehandlung: Unter dem Reiter Network in den DeveloperTools sehen wir, dass die app.js durch den Service Worker geladen wurde. Alle anderen Ressourcen wurden auch durch den Service Worker geladen, das liegt daran, dass wir im Service Worker die Anfrage an den Webserver durch den Service Worker durchschleusen. Wichtig ist aber, dass die app.js nicht vom Webserver geladen wurde. das erkennen war daran, dass alle anderen Ressourcen mit ihren Gr\u00f6\u00dfenangaben in der Tabelle stehen und dass damit gesagt, wurde, wieviel Bytes vom Webserver geladen wurden. Die app.js taucht dabei aber nicht auf. Sie wurde durch den Service Worker aus dem Service-Worker-Cache ( Cache Storage ) geladen! Okay, das ist jetzt vielleicht noch nicht besonders eindrucksvoll, weil der Offline-Modus f\u00fcr unsere Webanwendung noch nicht funktioniert und wir bis jetzt nur die app.js in den Cache speichern und von dort bei einem fetch() laden. Dadurch sieht man noch nicht wirklich viel. Deshalb laden wir jetzt den statischen \"Rest\", insbesondere die index.html und die dazugeh\u00f6rigen *.css -Dateien. Zuvor jedoch noch eine kurze Anmerkung zu den Schl\u00fcssel-Werte-Paaren request und response im Cache: Schl\u00fcssel-Werte-Paare request und response \u00b6 Wir laden jetzt unsere index.html -Datei in den Cache: 1 2 3 4 5 6 7 8 9 10 11 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Wenn wir unsere Anwendung neu starten und den service worker erneut registrieren, dann sollte jetzt die index.html im Offline-Modus angezeigt werden (wenn auch ohne die CSS-Styles). Allerdings sieht die Anwendung nach dem Reload im Offline-Modus leider so aus wie auf der linken Seite der folgenden Abbildung gezeigt: Der Grund daf\u00fcr ist, dass wir die Anwendung mit localhost:8080 (oder 127.0.0.1:8080 ) aufrufen, der request also / ist. Im Cache gespeichert haben wir aber den request /index.html . Und tats\u00e4chlich, wenn wir localhost:8080/index.html (oder 127.0.0.1:8080/index.html ) aufrufen, dann wird der request /index.html im Cache gefunden und als response die index.html zur\u00fcckgegeben (rechte Seite in der Abbildung). Wichtig ist also, dass wir bedenken, dass alle requests , f\u00fcr die wir responses im Cache hinterlegen wollen, auch tats\u00e4chlich in den Cache hinzugef\u00fcgt werden. Unsere sw.js sollte also auch so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Dann erhalten wir auch das rechte Bild der Abbildung beim Aufruf von localhost:8080 (oder 127.0.0.1:8080 ) im Offline-Modus. Wir sollten also beachten, dass alle requests , die wir cachen wollen, auch tats\u00e4chlich in den Cache gespeichert werden. Alle statischen Ressourcen in den Cache laden \u00b6 Wir laden jetzt alle statischen Ressourcen in den Cache, d.h. alles, was notwendig ist, um unsere Webanwendung auch im Offline-Modus so aussehen zu lassen, als w\u00fcrde sie \"laufen\". Dazu geh\u00f6rt nat\u00fcrlich die index.html und dann noch alle Ressourcen, die in der index.html eingebunden werden, also einige *.js -Dateien, einige *.css -Dateien und das Bild, das oben in der Webanwendung erscheint. Man k\u00f6nnte das alles mit einzelnen cache.add() -Funktionen erledigen, so wie oben. Daf\u00fcr gibt es aber auch die cache.addAll() -Funktion, der ein Array aus lauter requests \u00fcbergeben wird. Die Implementierung der install -Ereignisbehandlung in unserer sw.js sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) Wenn wir nun unsere Anwendung neu starten und darauf achten, dass der neue Service Worker auch wirklich registriert wird und dann in den Offline-Modus schalten, dann sieht unsere Anwendung so aus: Wie auf der rechten Seite der Abbildung zu sehen ist, funktioniert auch das JavaScript, um zum Formular zu gelangen. Einige Sachen funktionieren im Offline-Modus nicht, weil wir sie nicht in den Cache geladen haben: die Hilfeseite ( /help/index.html und die dazugeh\u00f6rige help.css ) sowie den Blogeintrag, den wir bereits (statisch) vorgenommen haben (den binden wir gleich noch dynamisch ein). Eine andere Sache f\u00e4llt aber vielleicht auf: die Icons von Material Design Lite erscheinen nicht, d.h. das Men\u00fc links oben ist nur ein leeres Quadrat und auf dem roten runden Button fehlt das Plus, stattdessen steht dort add . Wenn wir diesem Problem nachgehen, dann sehen wir in den DeveloperTools unter dem Reiter Network , dass alle Ressourcen, die wir im Cache gespeichert haben, auch tats\u00e4chlich aus diesem Cache geladen werden: Zus\u00e4tzlich schlagen aber noch \"kryptische\" GET-Anfragen fehl (die roten ganz unten in der Abbildung). Hier werden offensichtlich noch Anfragen an den Webserver gestellt, von denen wir gar nichts wussten und die wir nicht im Cache vorhalten. Wo kommen diese Anfragen her? Wenn wir dort in den DeveloperTools bspw. auf die Ressource https://fonts.googleapis.com/icon?family=Material+Icons klicken, dann erscheint daneben der Inhalt der geladenen Ressource und wir finden darin einen weiteren request , den wir aber nicht in unserem Cache hinterlegt haben (weil wir es gar nicht wussten): Diese Anfragen schlagen im Offline-Modus (nat\u00fcrlich) fehl und deshalb fehlen uns die Material Design Icons. Gut w\u00e4re es, wenn solche dynamischen Anfragen ebenfalls im Cache landen w\u00fcrden. Mit diesem dynamischen Caching besch\u00e4ftigen wir uns deshalb jetzt: Dynamisches Caching \u00b6 Bis jetzt haben wir mit cache.add() bzw. cache.addAll() vorab festgelegt, was in den Cache geladen werden soll. Das wird statisches Caching oder pre-caching genannt. Jetzt k\u00fcmmern wir uns um sogenanntes dynamisches Caching . Manchmal m\u00f6chte man gar nicht schon gleich zu Beginn alles in den Cache laden, um die \"Installation\", das erstmalige Aufrufen der Seite nicht zu aufw\u00e4ndig und somit zu langsam zu gestalten. Manchmal kennt man aber auch gar nicht die Ressourcen, die man noch zum Cache hinzuf\u00fcgen m\u00f6chte, wie das obere Beispiel gezeigt hat, als wir die Material Icons nicht in den Cache geladen haben, weil wir diese Anfrage vorab gar nicht kannten. Die Behandlung des fetch-Events erweitern \u00b6 Wir schauen uns zun\u00e4chst nochmal die aktuelle Behandlung des fetch -Events im service worker an: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Zur Erinnerung: mit dieser behandlung schalten wir uns zwischen die Abfrage der Webseite an den Webserver. Diese Behandlung wirkt wie ein Proxy. Bei jeder Anfrage der Webseite an den Webserver wird diese Implementierung des fetch -Events aufgerufen. Wir erwidern den request mit einer response . Entweder kommt diese response aus dem Cache, n\u00e4mlich dann, wenn caches.match(event.request) eine response zur\u00fcckgibt. In diesem Fall wird die response zur\u00fcck an die Webseite geschickt und der Webserver wird gar nicht mehr weiter angefragt. Oder wir leiten die Anfrage tats\u00e4chlich an den Webserver weiter ( return fetch(event.request); ), n\u00e4mlich dann, wenn der event.request nicht als Schl\u00fcssel im Cache verf\u00fcgbar ist und dieser deshalb keine response zur\u00fcckgibt. An dieser Stelle f\u00fcgen wir nun unser dynamisches Caching ein. Der Webserver wird mit einer response antworten und wir werden diese response in unseren Cache laden. Dazu ben\u00f6tigen wir zwei Dinge: einen neuen, weiteren Cache, in dem wir den entsprechenden request und die response des Webservers speichern und die cache.put() -Anweisung. put() unterscheidet sich von add() dahingehend, dass add() nur einen Parameter ben\u00f6tigt, n\u00e4mlich den request und die response automatisch als ein Schl\u00fcssel-Werte-Paar ( request, response ) speichert, w\u00e4hrend put() beide Werte als Schl\u00fcssel-Werte-Paar speichert, d.h. zwei Parameter erwartet ( request , response ). Ein erster Implementierungsversuch sieht so aus: 7 8 9 10 11 12 13 14 15 } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res ); // hier die put-Anweisung }) }); } Die Zeilen 9-14 sind hinzugekommen. Die fetch() -Anweisung ist ein Promise , deshalb f\u00fcgen wir ein .then() an. Die response m\u00fcssen wir jetzt anders nennen, da es die Variable response ja bereits gibt und es jetzt um die response des Webservers geht, also nennen wir sie res (kann nat\u00fcrlich auch anders hei\u00dfen). Dann \u00f6ffnen wir einen neuen Cache, den wir dynamic nennen - kann auch anders hei\u00dfen. Wenn der Cache noch nicht existiert, wird er durch open() erstellt. open() ist wiederum ein Promise, so dass wir .then() ankn\u00fcpfen k\u00f6nnen und f\u00fcgen in den Cache mithilfe von put() das Schl\u00fcssel-Werte-Paar ( event.request.url, res ) ein. Das w\u00e4re schon fast korrekt, aber es fehlt noch, dass wir die Response res nat\u00fcrlich an die Webseite zur\u00fcckgeben wollen. Dazu f\u00fcgen wir einerseits return res; ein, m\u00fcssen aber auch daf\u00fcr sorgen, dass die res auch an den fetch() -Aufruf zur\u00fcckgegeben wird. Dehalb ben\u00f6tigen wir auch vor caches.open() noch ein return . Au\u00dferdem m\u00fcssen wir noch einen weiteren Aspekt beachten. Wenn eine Response verwendet wird, wird sie konsumiert , d.h. verbraucht. Das ist so f\u00fcr Responses, auch wenn es nicht so wirklich nachvollziehbar und verst\u00e4ndlich ist. Wir verwenden in unserem Code zwei Mal res , einmal um es in den Cache zu speichern und ein anderes Mal, um es an die Webseite zur\u00fcckzugeben. In einer der beiden Verwendungen w\u00fcrde unsere res verbraucht/konsumiert werden und das andere Mal w\u00e4re sie leer. Kein Ahnung, warum das so ist ;-) . Aber wir ben\u00f6tigen an einer der beiden Stellen ein res.clone() , um den Clone der Response zu verwenden und die Response nicht zu \"verbrauchen\". Wir speichern den Clone der Response in den Cache (wir k\u00f6nnten auch die res in den Cache speichern und res.clone() zur\u00fcckgeben). Die gesamte Implementierung sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wenn wir nun die Anwendung ausf\u00fchren ( npm start ), dann in den Offline -Modus gehen und ein Reload im Browser durchf\u00fchren, sehen wir, dass die Material-Icons nun auch im Offline-Modus vorhanden sind: Wenn wir uns in den DeveloperTools unter Application auf der linken Seite unter Cache den Cache Storage anschauen, dann sehen wir, dass dort nun 2 Caches sind, der static und der dynamic Cache. In dem dynmic Cache finden wir nun auch die Material Icons wieder und unter dem Network -Reiter gibt es auch keine \"Fehler\" mehr, sondern alle Ressourcen werden vom Service Worker aus dem Cache geladen: Als weiteres Zeichen, dass nun alle Inhalte dynamisch geladen werden, erkennen wir auch die \"Mensa-Card\" in unserer Anwendung im Offline-Modus. Diese hatten wir ja statisch nicht hinzugef\u00fcgt. Probieren Sie auch einmal die \"Hilfe-Seite\" der Anwendung aus. Im Offline-Modus ist sie noch nicht verf\u00fcgbar. Wenn wir aber wieder online gehen, die \"Hilfe-Seite\" aufrufen und dann wieder offline gehen, ist die Hilfe-Seite im Cache und wird angezeigt. chrome.webRequest-API \u00b6 Der Chromium-Browser hat eine eigene API f\u00fcr Requests und schaltet sich bei Anfragen selbst dazwischen, um den Traffic zu analysieren und eventuelle Anfragen zu blockieren. Auch diese Anfragen l\u00f6sen ein fetch -Event aus. Allerdings gibt es bei von Chromium ausgel\u00f6sten Requests in dem request keine url -Eigenschaft. Vielleicht haben Sie einen solchen Fehler auch in Ihren DeveloperTools entdeckt. Eine Chromium-Anfrage unterscheidet sich von einer \"normalen\" Anfrage der Webseite an den Webserver dadurch, dass in einer \"normalen\" Anfrage die angefragte Ressource unter \" htttp://... \", also unter einer URL verf\u00fcgbar ist. Um nun den fehlerhaften Zugriff auf die url -Eigenschaft von request bei einer Anfrage durch Chrome zu vermeiden, f\u00fcgen wir ganz am Anfang der Ereignisbehandlung des fetch -Events noch die Abfrage ein, ob der request das Wort \" http \" enth\u00e4lt. Wenn nicht, verlassen wir die Behandlung des Events einfach: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Versionierung von Caches \u00b6 Wir haben nun sowohl statisch als auch dynamisch Ressourcen unserer Webanwendung geladen. Wenn wir eine Weile auf unserer Anwendung navigieren, laden wir nach und nach alle Ressourcen in den Cache, die unsere Anwendung ausmachen. Irgendwann k\u00f6nnen wir sie komplett offline betreiben. Alle Ressourcen sind im Cache und keine Ressourcen werden mehr vom Webserver geladen. Was passiert aber, wenn wir etwas \u00e4ndern? Wenn wir den Service worker sw.js \u00e4ndern, dann k\u00f6nnen wir daf\u00fcr sorgen, dass er neu geladen wird. Der Service worker darf auch niemals in den Cache geladen werden, denn dann h\u00e4tten wir eine unendliche Schleife, die immer wieder Ressourcen in den Cache l\u00e4dt! Wenn wir irgendeine andere Datei, eine *.html -, *.css - oder *.js -Datei \u00e4ndern, dann wird diese nie mehr in ihrer aktuellen Version vom Webserver geladen, da sie ja bereits im Cache ist und deshalb immer (in ihrer alten Version) aus dem Cache geladen wird. Um dieses problem zu beheben, versionieren wir unsere Caches. Neue Cache-Versionen erstellen \u00b6 Eine neue \"Version\" eines Caches erstellen wir dadurch, dass wir einen neuen Cache mit anderem Namen erstellen. Unsere beiden Caches (der statische und der dynamische) werden jeweils im Service Worker ( sw.js ) benannt: aktueller Stand sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Mit wechselndem Namen wechseln wir auch die \"Version\" des Caches. Wenn wir die Implementierung des statischen Service Workers (mit dem dynamischen ist es gleich, wir zeigen es hier zun\u00e4chst nur f\u00fcr den statischen) in der Zeile 4 bespielsweise auf caches . open ( 'static-v1' ) \u00e4ndern, ensteht ein neuer zus\u00e4tzlicher Caches static-v1 . Mit solchen \"Versionierungen\" erreichen wir, dass der Service Worker neu ausgef\u00fchrt und somit wirksam wird. Ge\u00e4nderte Dateien gelangen so neu in diesen neuen Caches. Leider bleiben aber auch die alten Caches noch bestehen und die Funktion caches.match() sucht in allen Caches nach dem passenden Request. Die \u00c4nderungen w\u00e4ren dann also trotzdem noch nicht sichtbar. Wir m\u00fcssen jetzt noch daf\u00fcr sorgen, dass die \"alten\" Caches gel\u00f6scht werden. Um uns zu \u00fcberlegen, an welcher Stelle ein geeigneter Platz w\u00e4re, die alten Caches zu l\u00f6schen, hier nochmal eine kurze Wiederholung des Service-Worker-Lifecycles : install : Das install -Ereignis ist das erste Ereignis, das ein Service Worker ausl\u00f6st. Es wird genau einmal ausgel\u00f6st. Die Promise in installEvent.waitUntil() gibt Auskunft dar\u00fcber, ob das Installieren des Service Workers erfolgreich war oder nicht. So lange der Service Worker installiert wird, kann er keine fetch -Ereignisse empfangen und behandeln. activate : Sobald die Installation erfolgreich abgeschlossen ist, wird das activate -Ereignis ausgel\u00f6st. waiting : Wenn ein Service Worker activated ist, d.h. das activate -Event f\u00fcr diesen Service Worker ausgel\u00f6st wurde, kontrolliert er die Anfragen der Webseite (insb. wenn clients.claim() ausgef\u00fchrt wurde, was dazu f\u00fchrt, dass auch alle Unterseiten der Seite \"kontrolliert\" werden). Wird der Service Worker ge\u00e4ndert (aktualisiert) und erneut installiert, kann der ge\u00e4nderte Service Worker nicht sofort in den activated Zustand \u00fcbergehen, so lange ein anderer Service Worker active ist. Der aktualisierte Service Worker ist dann waiting . Das Bild zeigt einen aktualisierten Service Worker ( #877 ) waiting solange der Service Worker #875 noch activated ist. Erst, wenn skipWaiting geklickt wird ( self.skipWaiting() ), wird der aktualisierte Service Worker activated . Ein guter Punkt, existierende Caches zu l\u00f6schen, die man nicht mehr verwenden m\u00f6chte, ist, wenn ein (neuer/aktualisierter) Service Worker activated ist. Wir erweitern also die behandlung des activate -Ereignisses: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== 'static-v1' && key !== 'dynamic' ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) Die ersten beiden und die letzten beiden Zeilen hatten wir bereits. Zeilen 3-13 sind neu. Betrachten wir den Code genauer: Die Funktion waitUntil() (Zeile 4 ) gibt es sowohl f\u00fcr das install -Event als auch f\u00fcr das activate -Ereignis. Dieser Funktion wird ein Promise \u00fcbergeben. Wir \u00fcbergeben als Promise die Funktion caches.keys() (Zeile 5 ). caches.keys gibt alle Namen der Service-Worker-Caches als Schl\u00fcssel zur\u00fcck. In unserem Fall also static , static-v1 und dynamic . die Funktion Promise.all() wird, verwendet, wenn auf ein Array von Promises \"gewartet\" werden soll. Die Funktion ist also dann beendet, wenn alle Promises des Arrays beendet sind. Promise.all() wartet auf ein Array von Promises. Wir haben aber mit keyList \"nur\" ein Array von Strings (die Namen der Caches). Mithilfe der map() -Funktion wandeln wir dieses Array von Strings in ein Array von Promises um. die map -Funktion nimmt nun jeden einzelnen String aus dem Array keyList und \"macht\" damit etwas (Zeilen 7-10 ) es wird gepr\u00fcft, ob der key entweder dem dynamischen Cache entspricht ( 'dynamic' ) oder dem neuen statischen Cache ( 'static-v1' ). Wenn das nicht der Fall ist, dann wird der Cache mit dem Namen key gel\u00f6scht (Zeile 9 ). return caches.delete(key) gibt somit ein Promise zur\u00fcck (an die map -Funktion). Somit wird jeder Schl\u00fcssel aus der keyList in ein Promise umgewandelt (f\u00fcr static-v1 und dynamic wird null zur\u00fcckgegeben). wenn alle dieses Promises beendet sind, ist auch die Promise.all() -Funktion beendet und somit auch die event.waitUntil() -Funktion. Somit l\u00f6schen wir alle \"alten\" statischen Caches und behalten nur die Caches static-v1 und dynamic . Wenn wir also etwas in unseren *.html , *.css und/oder *.js -Dateien \u00e4ndern und das Ge\u00e4nderte wirksam werden lassen wollen, \u00e4ndern wir einfach die Namen der Caches im Service Worker und sobald der Service Worker aktiviert ist, existieren nur noch die neuen Caches und die alten sind gel\u00f6scht. Damit wir das an zentraler Stelle im sw.js machen, lagern wir die aktuellen Namen der Caches in Konstanten aus. Die vollst\u00e4ndige Implementierung unseres Service Workers sieht so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 const CURRENT_STATIC_CACHE = 'static-v2' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v2' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Zusammenfassung \u00b6 Die Zusammanfassung f\u00fcr das Caching kann man im folgenden Bild darstellen. Mithilfe des Caching haben wir es geschafft, dass unsere Anwendung im Offline-Modus nicht mehr so aussieht, wie links, sondern wie rechts. Toll! Noch einige n\u00fctzliche Links: Service Worker API The offline cookbook Google: Service Worker","title":"Caching"},{"location":"caching/#caching-mit-service-workern","text":"Caching ist ein Konzept, um Ressourcen zu speichern, um sie nicht wieder vom Server laden zu m\u00fcssen. Browser verf\u00fcgen \u00fcber eigene Caches (\"Pufferspeicher\") und darin k\u00f6nnen Browser Bilder, CSS-Dateien, JavaScript-Dateien und andere Mediadateien (z.B. pdf) speichern, um diese nicht erneut vom Webserver laden zu m\u00fcssen. Das Caching beschleunigt das wiederholte Laden von Webseiten. Caching mit service working verfolgt das gleiche Prinzip. Auch hier werden Ressourcen in einen Cache geladen. Der Vorteil hierbei ist jedoch nicht das schnellere Laden beim Wiederholen, sondern die M\u00f6glichkeit zu er\u00f6ffnen, die Webanwendung auch (teilweise) offline auszuf\u00fchren. Mit dem Service-Worker-Caching bieten wir somit die F\u00e4higkeit des Offline-Modus unserer Anwendung. Die Verwendung eines Caches durch einen service worker erfolgt mithilfe der Cache API.","title":"Caching mit Service Workern"},{"location":"caching/#die-cache-api","text":"Die Cache API verfolgt ein ganz simples Konzept. Mithilfe der Cache API werden einfach (Schl\u00fcssel-/Werte-)Paare von Requests und Responses gespeichert. Auf den Cache (also auf die Menge aller gespeicherten Request-/Response-Paare) k\u00f6nnen sowohl service worker als auch das JavaScript der Webanwendung zugreifen. Allerdings kann es ja sein, dass das \"normale\" JavaScript der Webanwendung (noch) nicht geladen werden kann, weil z.B. die Internetverbindung zu schwach ist oder nicht vorhanden, ein service worker kann aber trotzdem bereits Daten aus dem Cache liefern, ohne \u00fcberhaupt einen Request \u00fcber das Internet zu senden. Wichtig ist noch zu betonen, dass die Cache API (noch) nicht von besonders vielen Browsern unterst\u00fctzt wird. Das sieht man hier , wenn Sie nach ganz unten scrollen. Im Prinzip funktioniert es nur (vollst\u00e4ndig) mit Chrome, Firefox und Opera.","title":"Die Cache API"},{"location":"caching/#bereinigen-des-htw-insta-projektes","text":"Bevor wir unseren Service-Worker-Cache implementieren, bereinigen wir zun\u00e4chst noch unser HTW-Insta-Projekt. Aus der public/src/js/app.js entfernen wir den gesamten Code, der sich auf Promises und die Fetch API bezog. Die app.js sieht nun (wieder) so aus: public/src/js/app.js if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } In der public/sw.js (also in unserem service worker ), l\u00f6schen wir die Ausgaben auf die Konsole f\u00fcr das fetch -Event. Stattdessen f\u00fcgen wir eine respondWith() -Funktion ein: public/sw.js self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { event . respondWith ( fetch ( event . request )); }) Die respondWith() -Funktion ist eine Funktion des fetch -Events (also FetchEvent.respondWith() ). Sie sorgt einerseits daf\u00fcr, den Browser von seiner Standardbehandlung des FetchEvents abzuhalten und stattdessen eine eigene Promise f\u00fcr die Behandlung des FetchEvents zu definieren. Die Standardsyntax ist: fetchEvent . respondWith ( // Promise that resolves to a Response. ); Hier ist ein Beispiel f\u00fcr die responseWith() -Funktion aus : 1 2 3 4 5 6 7 8 9 10 11 addEventListener ( 'fetch' , event => { // Prevent the default, and handle the request ourselves. event . respondWith ( async function () { // Try to get the response from a cache. const cachedResponse = await caches . match ( event . request ); // Return it if we found one. if ( cachedResponse ) return cachedResponse ; // If we didn't find a match in the cache, use the network. return fetch ( event . request ); }()); }); Darin wird f\u00fcr ein fetch -Event zun\u00e4chst gepr\u00fcft, ob der request im Cache vorhanden ist (Zeile 5 ). Wenn ja, dann bekommt die Variable cachedResponse den Wert der response aus dem Cache ( match liefert die response zum zugeh\u00f6rigen request ). Wenn das der Fall ist, dann liefert responseWith() genau diese response aus dem Cache zur\u00fcck. Wenn der request nicht im Cache gespeichert ist, dann wird einfach der event.request weitergeleitet, also nichts aus dem Cache genommen. In unserer derzeitigen Implementierung (highlighted Zeile 11 oben), wird noch nicht auf den Cache zugegriffen, sondern der request direkt an den Webserver weitergeleitet. Sollten Sie daf\u00fcr einen Fehler bekommen, weil das Promise als nicht korrekt behandelt gilt, dann k\u00f6nnen Sie diese Zeile zun\u00e4chst auch einfach auskommentieren. Eine etwas gr\u00f6\u00dfere \u00c4nderung f\u00fchren wir in der public/src/js/feed.js durch. Wir f\u00fcgen statisch einen Blog-Eintrag hinzu. Die Anwendung sieht dann so aus: Schauen Sie in die index.html . In das folgende <div id=\"shared-moments\"></div> f\u00fcgen wir eine Card der Form <div class=\"shared-moment-card mdl-card mdl-shadow--2dp\"></div> hinzu, welche das Foto und den Text enth\u00e4lt. Das passiert in einer Funktion createCard() : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); function openCreatePostModal () { createPostArea . style . display = 'block' ; } function closeCreatePostModal () { createPostArea . style . display = 'none' ; } shareImageButton . addEventListener ( 'click' , openCreatePostModal ); closeCreatePostModalButton . addEventListener ( 'click' , closeCreatePostModal ); function createCard () { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; cardTitle . style . backgroundImage = 'url(\"/src/images/htw-gebaeude-h.jpg\")' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = 'Vor der HTW-Mensa' ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = 'HTW Berlin' ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } fetch ( 'https://httpbin.org/get' ) . then ( function ( res ) { return res . json (); }) . then ( function ( data ) { createCard (); }); Zun\u00e4chst wird in Zeile 4 auf das div mit der id=\"shared-moments\" zugegriffen. In dieses div wird die Card eingef\u00fcgt. Alles CSS-Klassen mit mdl- am Anfang sind Klassen von Material Design Ligt . F\u00fcr die CSS-Klasse shared-moment-card definieren wir in public/src/css/feed.css noch: . shared-moment-card . mdl-card { margin : 10 px auto ; } so, dass die Card einen Abstand vom Rand bekommt. Interessant ist vielleicht noch die Zeile 36 componentHandler.upgradeElement(cardWrapper); . Mit dieser Funktion m\u00fcssen dynamisch erzeugte DOM-Elemente registriert werden, damit sie von Material Design Lite automatisch verwaltet werden. Siehe dazu Uses MDL on dynamic websites .","title":"Bereinigen des HTW-Insta-Projektes"},{"location":"caching/#ikt-pwa-03-bei-github","text":"Das Bild htw-gebaeude-h.jpg muss auch noch dem public/src/images -Ordner hinzugef\u00fcgt werden. Die aktuelle Ausgangssituation unseres Projektes finden Sie hier . Achten Sie bitte darauf, dass Sie (zumindest so lange wir uns mit dem Service-Worker-Cache besch\u00e4ftigen) das H\u00e4kchen bei Disable Cache in den Developer Tools unter Network gesetzt haben:","title":"IKT-PWA-03 bei GitHub"},{"location":"caching/#was-soll-in-den-cache","text":"Zun\u00e4chst \u00fcberlegen wir uns, was \u00fcberhaupt in den Cache soll und was nicht. Prinzipiell verfolgen wir mit dem Service-Worker-Cache die Idee, dass die Anwendung auch offline verwendbar bleiben soll. Wenn wir unsere aktuelle Anwendung betrachten, dann k\u00f6nnen wir unterscheiden zwischen \"statischen\" und \"dynamischen\" Inhalten. Statisch ist im Prinzip der Rahmen unserer Anwendung, also im prinzip alles, was wir hatten vor unserem ersten Blog-Eintrag. Dieser Rahmen gibt uns das Gef\u00fchl, dass die Anwendung \"l\u00e4uft\" - es fehlen nur die dynamischen Inhalte, also die Blog-Eintr\u00e4ge. Stattdessen k\u00f6nnte man aber eine Meldung ausgeben, dass diese Inhalte derzeit nicht verf\u00fcgbar sind. Das w\u00e4re alles jedenfalls besser als eine 404-Seite oder ein unendliches Warten oder das hier: Der Rahmen einer Webanwendung wird auch App-Shell genannt. Wir wollen diese App-Shell zun\u00e4chst in unseren Service-Worker-Cache speichern.","title":"Was soll in den Cache?"},{"location":"caching/#static-cachingprecaching","text":"Wir wollen zun\u00e4chst die statischen Inhalte unserer Anwendung sin den Cache speichern. Dies geschieht beim Installieren (registrieren) des service workers. Das ist auch insofern praktisch, als dass der service worker ja nur dann neu registriert wird, wenn er ge\u00e4ndert wurde. Ansonsten bleibt einfach der \"alte\" existent. Ziel ist es also, zun\u00e4chst alles das in den Cache zu speichern, was unsere Webanwendung ausmacht: die index.html , alle *.css -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden, alle *.js -Dateien, die mittels <script src=\"...\"> in dieser index.html einegunden werden und alle *.png -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden.","title":"Static caching/Precaching"},{"location":"caching/#den-service-worker-cache-erstellen","text":"Wir haben bereits eingangs festgelegt, dass wir den Cache in dem Moment anlegen wollen, in dem der service worker installiert wird. Das bedeutet, wir erstellen den Cache in der Ereignisbehandlung des Lebenszyklus-Event install des service workers, also hier ( sw.js ): self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); // hier soll der Cache \"entstehen\" }) Den Service-Worker-Cache erstellen wir mithilfe der Anweisung caches.open(); . Hierbei handelt es sich um eine Funktion von CacheStorage . Die Funktion caches.open() erzeugt ein Cache -Objekt, wenn es noch nicht existiert. Die R\u00fcckgabe ( response der Promise ) ist also ein Cache -Objekt. Man k\u00f6nnte nun annehmen, man schreibt einfach das hier: 1 2 3 4 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); caches . open (); // nicht gut! }) Diese Idee ist aber nicht so gut, da wir immer im Hinterkopf behalten m\u00fcssen, dass in einem service worker alles asynchron abgearbeitet wird. Das bedeutet, dass wir in diesem Fall bei der Baehandlung des install -Events zwei Anweisungen eifach \"antriggern\": die Ausgabe auf die Konsole (Zeile 2 ) und das Erzeugen eines Cache -Objektes (Zeile 3 ). Wie lange jedes einzelne braucht und wann etwas fertig ist, wissen wir nicht. Das bedeutet z.B. dass die Ereignisbehandlung des install -Events fertig ist, noch bevor die Ausgabe auf die Konsole und/oder das Erzeugen des Cache -Objektes abgeschlossen ist/sind. Das wiederum w\u00fcrde bedeuten, dass wir asynchron evtl. bereits fetch -Anfragen ausl\u00f6sen, noch bevor der Cache bereit ist. Um dieses Problem zu verhindern, betten wir die Erzeugung des Cache -Objektes in eine event.waitUntil() -Funktion ein. Erst wenn diese Funktion abgeschlossen ist, ist auch die Ereignisbehandlung des install -Events abgeschlossen (siehe auch hier . Das richtige Vorgehen ist also dieses: 1 2 3 4 5 6 7 8 9 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); }) ); }) caches.open() erzeugt also ein Promise , dessen response der erzeugte Cache ist. Wir konsumieren diesen Cache und geben zun\u00e4chst nur eine Ausgabe auf der Konsole aus. Der Parameter 'static' in caches.open() ist ein Name f\u00fcr den Cache. Die Namen sind frei w\u00e4hlbar und man kann verschiedene Namen vergeben. Das sind dann jeweils eine Art \"Unter\"-Caches oder sub caches ) im Service-Worker-Cache.","title":"Den Service-Worker-Cache erstellen"},{"location":"caching/#eine-ressource-in-den-cache-speichern","text":"Nun kann der Cache entsprechend mit request - response -Schl\u00fcssel-Werte-Paaren bef\u00fcllt werden. Die auf den Cache anwenbaren Funktionen sind hier dokumentiert. Es sind match(request, options) , matchAll(request, options) , add(request) , , addAll(request) , , put(request, response) , delete(request, options) und , keys(request, options) . Alle liefern nat\u00fcrlich ein Promise zur\u00fcck. Um die statischen Inhalte unserer Webanwendung in den Cache zu laden, verwenden wir die add(request) -Funktion. Diese Funktion macht folgendes: sie f\u00fchrt den request aus ( fetch(request) ) und speichert die response (also die angefragte Ressource) \u2192 dieses Speichern entspricht einem put(request, response) im Cache. Wenn wir also folgendes implementieren: 1 2 3 4 5 6 7 8 9 10 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) , dann wird beim Initialisieren des service workers die Ressource public/src/js/app.js beim Webserver angefragt und die response , also die app.js im Cache gespeichert. Wenn wir unsere Anwednung so ausf\u00fchren, dann sehen wir in den DeveloperTools im Reiter Application im Cache Storage den Cache static und darin die gespeicherte Ressource /src/js/app.js .","title":"Eine Ressource in den Cache speichern"},{"location":"caching/#eine-ressource-aus-dem-cache-lesen","text":"Jetzt haben wir einen Ressource in den Cache geladen, aber wir verwenden sie noch nicht, da wir in der bisherigen Behandlung des fetch -Events den Cache noch nicht nutzen. Zur Erinnerung: bei der Behandlung des fetch -Events wirkt der service worker wie ein Proxy. Er \"schaltet\" sich zwischen die Webanwendung und die ANfrage dieser an den Webserver. In unserer derzeitigen Implementierung des fetch -Events wird der request einfach an den Webserver durchgeschleust, ohne irgendetwas damit zu tun. Das wollen wir nun \u00e4ndern: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Wir reagieren auf das fetch -Ereignis zun\u00e4chst mit der respondWith() -Funktion, die wir bereits oben besprochen haben. Diese Funktion verhindert die Ausf\u00fchrung des Standardverhaltens beim fetch , n\u00e4mlich die Anfrage an den Webserver. Stattdessen fragen wir mithilfe der caches.match() -Funktion alle sub caches unseres Caches nach dem als Parameter \u00fcbergebenen request an. Im Cache sind die Eintr\u00e4ge als Schl\u00fcssel-Werte_paare request - response abgespeichert. Findet sich der request im Cache, dann liefert die Promise ein response -Objekt zur\u00fcck. Wenn das so ist (Zeile 5 ), dann geben wir dieses response -Objekt an die Webanwendung zur\u00fcck (Zeile 6 ). Das ist dann also die aus dem Cache geladene Ressource. Wenn die match() -Funktion jedoch den Schl\u00fcssel request nicht im Cache gefunden hat (und somit auch keine response ), gibt sie zwar trotzdem ein Promise zur\u00fcck, aber dann ist die response null . Das bedeutet, dass die if -Abfrage in Zeile 5 ein false zur\u00fcckgibt und wir somit Zeile 8 ausf\u00fchren. Darin wird die Anfrage einfach an den Webserver weitergeleitet, die Ressource also vom Webserver geladen. Wir \u00fcberpr\u00fcfen die Funktionalit\u00e4t dieser fetch -Ereignisbehandlung: Unter dem Reiter Network in den DeveloperTools sehen wir, dass die app.js durch den Service Worker geladen wurde. Alle anderen Ressourcen wurden auch durch den Service Worker geladen, das liegt daran, dass wir im Service Worker die Anfrage an den Webserver durch den Service Worker durchschleusen. Wichtig ist aber, dass die app.js nicht vom Webserver geladen wurde. das erkennen war daran, dass alle anderen Ressourcen mit ihren Gr\u00f6\u00dfenangaben in der Tabelle stehen und dass damit gesagt, wurde, wieviel Bytes vom Webserver geladen wurden. Die app.js taucht dabei aber nicht auf. Sie wurde durch den Service Worker aus dem Service-Worker-Cache ( Cache Storage ) geladen! Okay, das ist jetzt vielleicht noch nicht besonders eindrucksvoll, weil der Offline-Modus f\u00fcr unsere Webanwendung noch nicht funktioniert und wir bis jetzt nur die app.js in den Cache speichern und von dort bei einem fetch() laden. Dadurch sieht man noch nicht wirklich viel. Deshalb laden wir jetzt den statischen \"Rest\", insbesondere die index.html und die dazugeh\u00f6rigen *.css -Dateien. Zuvor jedoch noch eine kurze Anmerkung zu den Schl\u00fcssel-Werte-Paaren request und response im Cache:","title":"Eine Ressource aus dem Cache lesen"},{"location":"caching/#schlussel-werte-paare-request-und-response","text":"Wir laden jetzt unsere index.html -Datei in den Cache: 1 2 3 4 5 6 7 8 9 10 11 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Wenn wir unsere Anwendung neu starten und den service worker erneut registrieren, dann sollte jetzt die index.html im Offline-Modus angezeigt werden (wenn auch ohne die CSS-Styles). Allerdings sieht die Anwendung nach dem Reload im Offline-Modus leider so aus wie auf der linken Seite der folgenden Abbildung gezeigt: Der Grund daf\u00fcr ist, dass wir die Anwendung mit localhost:8080 (oder 127.0.0.1:8080 ) aufrufen, der request also / ist. Im Cache gespeichert haben wir aber den request /index.html . Und tats\u00e4chlich, wenn wir localhost:8080/index.html (oder 127.0.0.1:8080/index.html ) aufrufen, dann wird der request /index.html im Cache gefunden und als response die index.html zur\u00fcckgegeben (rechte Seite in der Abbildung). Wichtig ist also, dass wir bedenken, dass alle requests , f\u00fcr die wir responses im Cache hinterlegen wollen, auch tats\u00e4chlich in den Cache hinzugef\u00fcgt werden. Unsere sw.js sollte also auch so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Dann erhalten wir auch das rechte Bild der Abbildung beim Aufruf von localhost:8080 (oder 127.0.0.1:8080 ) im Offline-Modus. Wir sollten also beachten, dass alle requests , die wir cachen wollen, auch tats\u00e4chlich in den Cache gespeichert werden.","title":"Schl\u00fcssel-Werte-Paare request und response"},{"location":"caching/#alle-statischen-ressourcen-in-den-cache-laden","text":"Wir laden jetzt alle statischen Ressourcen in den Cache, d.h. alles, was notwendig ist, um unsere Webanwendung auch im Offline-Modus so aussehen zu lassen, als w\u00fcrde sie \"laufen\". Dazu geh\u00f6rt nat\u00fcrlich die index.html und dann noch alle Ressourcen, die in der index.html eingebunden werden, also einige *.js -Dateien, einige *.css -Dateien und das Bild, das oben in der Webanwendung erscheint. Man k\u00f6nnte das alles mit einzelnen cache.add() -Funktionen erledigen, so wie oben. Daf\u00fcr gibt es aber auch die cache.addAll() -Funktion, der ein Array aus lauter requests \u00fcbergeben wird. Die Implementierung der install -Ereignisbehandlung in unserer sw.js sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) Wenn wir nun unsere Anwendung neu starten und darauf achten, dass der neue Service Worker auch wirklich registriert wird und dann in den Offline-Modus schalten, dann sieht unsere Anwendung so aus: Wie auf der rechten Seite der Abbildung zu sehen ist, funktioniert auch das JavaScript, um zum Formular zu gelangen. Einige Sachen funktionieren im Offline-Modus nicht, weil wir sie nicht in den Cache geladen haben: die Hilfeseite ( /help/index.html und die dazugeh\u00f6rige help.css ) sowie den Blogeintrag, den wir bereits (statisch) vorgenommen haben (den binden wir gleich noch dynamisch ein). Eine andere Sache f\u00e4llt aber vielleicht auf: die Icons von Material Design Lite erscheinen nicht, d.h. das Men\u00fc links oben ist nur ein leeres Quadrat und auf dem roten runden Button fehlt das Plus, stattdessen steht dort add . Wenn wir diesem Problem nachgehen, dann sehen wir in den DeveloperTools unter dem Reiter Network , dass alle Ressourcen, die wir im Cache gespeichert haben, auch tats\u00e4chlich aus diesem Cache geladen werden: Zus\u00e4tzlich schlagen aber noch \"kryptische\" GET-Anfragen fehl (die roten ganz unten in der Abbildung). Hier werden offensichtlich noch Anfragen an den Webserver gestellt, von denen wir gar nichts wussten und die wir nicht im Cache vorhalten. Wo kommen diese Anfragen her? Wenn wir dort in den DeveloperTools bspw. auf die Ressource https://fonts.googleapis.com/icon?family=Material+Icons klicken, dann erscheint daneben der Inhalt der geladenen Ressource und wir finden darin einen weiteren request , den wir aber nicht in unserem Cache hinterlegt haben (weil wir es gar nicht wussten): Diese Anfragen schlagen im Offline-Modus (nat\u00fcrlich) fehl und deshalb fehlen uns die Material Design Icons. Gut w\u00e4re es, wenn solche dynamischen Anfragen ebenfalls im Cache landen w\u00fcrden. Mit diesem dynamischen Caching besch\u00e4ftigen wir uns deshalb jetzt:","title":"Alle statischen Ressourcen in den Cache laden"},{"location":"caching/#dynamisches-caching","text":"Bis jetzt haben wir mit cache.add() bzw. cache.addAll() vorab festgelegt, was in den Cache geladen werden soll. Das wird statisches Caching oder pre-caching genannt. Jetzt k\u00fcmmern wir uns um sogenanntes dynamisches Caching . Manchmal m\u00f6chte man gar nicht schon gleich zu Beginn alles in den Cache laden, um die \"Installation\", das erstmalige Aufrufen der Seite nicht zu aufw\u00e4ndig und somit zu langsam zu gestalten. Manchmal kennt man aber auch gar nicht die Ressourcen, die man noch zum Cache hinzuf\u00fcgen m\u00f6chte, wie das obere Beispiel gezeigt hat, als wir die Material Icons nicht in den Cache geladen haben, weil wir diese Anfrage vorab gar nicht kannten.","title":"Dynamisches Caching"},{"location":"caching/#die-behandlung-des-fetch-events-erweitern","text":"Wir schauen uns zun\u00e4chst nochmal die aktuelle Behandlung des fetch -Events im service worker an: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Zur Erinnerung: mit dieser behandlung schalten wir uns zwischen die Abfrage der Webseite an den Webserver. Diese Behandlung wirkt wie ein Proxy. Bei jeder Anfrage der Webseite an den Webserver wird diese Implementierung des fetch -Events aufgerufen. Wir erwidern den request mit einer response . Entweder kommt diese response aus dem Cache, n\u00e4mlich dann, wenn caches.match(event.request) eine response zur\u00fcckgibt. In diesem Fall wird die response zur\u00fcck an die Webseite geschickt und der Webserver wird gar nicht mehr weiter angefragt. Oder wir leiten die Anfrage tats\u00e4chlich an den Webserver weiter ( return fetch(event.request); ), n\u00e4mlich dann, wenn der event.request nicht als Schl\u00fcssel im Cache verf\u00fcgbar ist und dieser deshalb keine response zur\u00fcckgibt. An dieser Stelle f\u00fcgen wir nun unser dynamisches Caching ein. Der Webserver wird mit einer response antworten und wir werden diese response in unseren Cache laden. Dazu ben\u00f6tigen wir zwei Dinge: einen neuen, weiteren Cache, in dem wir den entsprechenden request und die response des Webservers speichern und die cache.put() -Anweisung. put() unterscheidet sich von add() dahingehend, dass add() nur einen Parameter ben\u00f6tigt, n\u00e4mlich den request und die response automatisch als ein Schl\u00fcssel-Werte-Paar ( request, response ) speichert, w\u00e4hrend put() beide Werte als Schl\u00fcssel-Werte-Paar speichert, d.h. zwei Parameter erwartet ( request , response ). Ein erster Implementierungsversuch sieht so aus: 7 8 9 10 11 12 13 14 15 } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res ); // hier die put-Anweisung }) }); } Die Zeilen 9-14 sind hinzugekommen. Die fetch() -Anweisung ist ein Promise , deshalb f\u00fcgen wir ein .then() an. Die response m\u00fcssen wir jetzt anders nennen, da es die Variable response ja bereits gibt und es jetzt um die response des Webservers geht, also nennen wir sie res (kann nat\u00fcrlich auch anders hei\u00dfen). Dann \u00f6ffnen wir einen neuen Cache, den wir dynamic nennen - kann auch anders hei\u00dfen. Wenn der Cache noch nicht existiert, wird er durch open() erstellt. open() ist wiederum ein Promise, so dass wir .then() ankn\u00fcpfen k\u00f6nnen und f\u00fcgen in den Cache mithilfe von put() das Schl\u00fcssel-Werte-Paar ( event.request.url, res ) ein. Das w\u00e4re schon fast korrekt, aber es fehlt noch, dass wir die Response res nat\u00fcrlich an die Webseite zur\u00fcckgeben wollen. Dazu f\u00fcgen wir einerseits return res; ein, m\u00fcssen aber auch daf\u00fcr sorgen, dass die res auch an den fetch() -Aufruf zur\u00fcckgegeben wird. Dehalb ben\u00f6tigen wir auch vor caches.open() noch ein return . Au\u00dferdem m\u00fcssen wir noch einen weiteren Aspekt beachten. Wenn eine Response verwendet wird, wird sie konsumiert , d.h. verbraucht. Das ist so f\u00fcr Responses, auch wenn es nicht so wirklich nachvollziehbar und verst\u00e4ndlich ist. Wir verwenden in unserem Code zwei Mal res , einmal um es in den Cache zu speichern und ein anderes Mal, um es an die Webseite zur\u00fcckzugeben. In einer der beiden Verwendungen w\u00fcrde unsere res verbraucht/konsumiert werden und das andere Mal w\u00e4re sie leer. Kein Ahnung, warum das so ist ;-) . Aber wir ben\u00f6tigen an einer der beiden Stellen ein res.clone() , um den Clone der Response zu verwenden und die Response nicht zu \"verbrauchen\". Wir speichern den Clone der Response in den Cache (wir k\u00f6nnten auch die res in den Cache speichern und res.clone() zur\u00fcckgeben). Die gesamte Implementierung sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wenn wir nun die Anwendung ausf\u00fchren ( npm start ), dann in den Offline -Modus gehen und ein Reload im Browser durchf\u00fchren, sehen wir, dass die Material-Icons nun auch im Offline-Modus vorhanden sind: Wenn wir uns in den DeveloperTools unter Application auf der linken Seite unter Cache den Cache Storage anschauen, dann sehen wir, dass dort nun 2 Caches sind, der static und der dynamic Cache. In dem dynmic Cache finden wir nun auch die Material Icons wieder und unter dem Network -Reiter gibt es auch keine \"Fehler\" mehr, sondern alle Ressourcen werden vom Service Worker aus dem Cache geladen: Als weiteres Zeichen, dass nun alle Inhalte dynamisch geladen werden, erkennen wir auch die \"Mensa-Card\" in unserer Anwendung im Offline-Modus. Diese hatten wir ja statisch nicht hinzugef\u00fcgt. Probieren Sie auch einmal die \"Hilfe-Seite\" der Anwendung aus. Im Offline-Modus ist sie noch nicht verf\u00fcgbar. Wenn wir aber wieder online gehen, die \"Hilfe-Seite\" aufrufen und dann wieder offline gehen, ist die Hilfe-Seite im Cache und wird angezeigt.","title":"Die Behandlung des fetch-Events erweitern"},{"location":"caching/#chromewebrequest-api","text":"Der Chromium-Browser hat eine eigene API f\u00fcr Requests und schaltet sich bei Anfragen selbst dazwischen, um den Traffic zu analysieren und eventuelle Anfragen zu blockieren. Auch diese Anfragen l\u00f6sen ein fetch -Event aus. Allerdings gibt es bei von Chromium ausgel\u00f6sten Requests in dem request keine url -Eigenschaft. Vielleicht haben Sie einen solchen Fehler auch in Ihren DeveloperTools entdeckt. Eine Chromium-Anfrage unterscheidet sich von einer \"normalen\" Anfrage der Webseite an den Webserver dadurch, dass in einer \"normalen\" Anfrage die angefragte Ressource unter \" htttp://... \", also unter einer URL verf\u00fcgbar ist. Um nun den fehlerhaften Zugriff auf die url -Eigenschaft von request bei einer Anfrage durch Chrome zu vermeiden, f\u00fcgen wir ganz am Anfang der Ereignisbehandlung des fetch -Events noch die Abfrage ein, ob der request das Wort \" http \" enth\u00e4lt. Wenn nicht, verlassen wir die Behandlung des Events einfach: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); })","title":"chrome.webRequest-API"},{"location":"caching/#versionierung-von-caches","text":"Wir haben nun sowohl statisch als auch dynamisch Ressourcen unserer Webanwendung geladen. Wenn wir eine Weile auf unserer Anwendung navigieren, laden wir nach und nach alle Ressourcen in den Cache, die unsere Anwendung ausmachen. Irgendwann k\u00f6nnen wir sie komplett offline betreiben. Alle Ressourcen sind im Cache und keine Ressourcen werden mehr vom Webserver geladen. Was passiert aber, wenn wir etwas \u00e4ndern? Wenn wir den Service worker sw.js \u00e4ndern, dann k\u00f6nnen wir daf\u00fcr sorgen, dass er neu geladen wird. Der Service worker darf auch niemals in den Cache geladen werden, denn dann h\u00e4tten wir eine unendliche Schleife, die immer wieder Ressourcen in den Cache l\u00e4dt! Wenn wir irgendeine andere Datei, eine *.html -, *.css - oder *.js -Datei \u00e4ndern, dann wird diese nie mehr in ihrer aktuellen Version vom Webserver geladen, da sie ja bereits im Cache ist und deshalb immer (in ihrer alten Version) aus dem Cache geladen wird. Um dieses problem zu beheben, versionieren wir unsere Caches.","title":"Versionierung von Caches"},{"location":"caching/#neue-cache-versionen-erstellen","text":"Eine neue \"Version\" eines Caches erstellen wir dadurch, dass wir einen neuen Cache mit anderem Namen erstellen. Unsere beiden Caches (der statische und der dynamische) werden jeweils im Service Worker ( sw.js ) benannt: aktueller Stand sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Mit wechselndem Namen wechseln wir auch die \"Version\" des Caches. Wenn wir die Implementierung des statischen Service Workers (mit dem dynamischen ist es gleich, wir zeigen es hier zun\u00e4chst nur f\u00fcr den statischen) in der Zeile 4 bespielsweise auf caches . open ( 'static-v1' ) \u00e4ndern, ensteht ein neuer zus\u00e4tzlicher Caches static-v1 . Mit solchen \"Versionierungen\" erreichen wir, dass der Service Worker neu ausgef\u00fchrt und somit wirksam wird. Ge\u00e4nderte Dateien gelangen so neu in diesen neuen Caches. Leider bleiben aber auch die alten Caches noch bestehen und die Funktion caches.match() sucht in allen Caches nach dem passenden Request. Die \u00c4nderungen w\u00e4ren dann also trotzdem noch nicht sichtbar. Wir m\u00fcssen jetzt noch daf\u00fcr sorgen, dass die \"alten\" Caches gel\u00f6scht werden. Um uns zu \u00fcberlegen, an welcher Stelle ein geeigneter Platz w\u00e4re, die alten Caches zu l\u00f6schen, hier nochmal eine kurze Wiederholung des Service-Worker-Lifecycles : install : Das install -Ereignis ist das erste Ereignis, das ein Service Worker ausl\u00f6st. Es wird genau einmal ausgel\u00f6st. Die Promise in installEvent.waitUntil() gibt Auskunft dar\u00fcber, ob das Installieren des Service Workers erfolgreich war oder nicht. So lange der Service Worker installiert wird, kann er keine fetch -Ereignisse empfangen und behandeln. activate : Sobald die Installation erfolgreich abgeschlossen ist, wird das activate -Ereignis ausgel\u00f6st. waiting : Wenn ein Service Worker activated ist, d.h. das activate -Event f\u00fcr diesen Service Worker ausgel\u00f6st wurde, kontrolliert er die Anfragen der Webseite (insb. wenn clients.claim() ausgef\u00fchrt wurde, was dazu f\u00fchrt, dass auch alle Unterseiten der Seite \"kontrolliert\" werden). Wird der Service Worker ge\u00e4ndert (aktualisiert) und erneut installiert, kann der ge\u00e4nderte Service Worker nicht sofort in den activated Zustand \u00fcbergehen, so lange ein anderer Service Worker active ist. Der aktualisierte Service Worker ist dann waiting . Das Bild zeigt einen aktualisierten Service Worker ( #877 ) waiting solange der Service Worker #875 noch activated ist. Erst, wenn skipWaiting geklickt wird ( self.skipWaiting() ), wird der aktualisierte Service Worker activated . Ein guter Punkt, existierende Caches zu l\u00f6schen, die man nicht mehr verwenden m\u00f6chte, ist, wenn ein (neuer/aktualisierter) Service Worker activated ist. Wir erweitern also die behandlung des activate -Ereignisses: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== 'static-v1' && key !== 'dynamic' ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) Die ersten beiden und die letzten beiden Zeilen hatten wir bereits. Zeilen 3-13 sind neu. Betrachten wir den Code genauer: Die Funktion waitUntil() (Zeile 4 ) gibt es sowohl f\u00fcr das install -Event als auch f\u00fcr das activate -Ereignis. Dieser Funktion wird ein Promise \u00fcbergeben. Wir \u00fcbergeben als Promise die Funktion caches.keys() (Zeile 5 ). caches.keys gibt alle Namen der Service-Worker-Caches als Schl\u00fcssel zur\u00fcck. In unserem Fall also static , static-v1 und dynamic . die Funktion Promise.all() wird, verwendet, wenn auf ein Array von Promises \"gewartet\" werden soll. Die Funktion ist also dann beendet, wenn alle Promises des Arrays beendet sind. Promise.all() wartet auf ein Array von Promises. Wir haben aber mit keyList \"nur\" ein Array von Strings (die Namen der Caches). Mithilfe der map() -Funktion wandeln wir dieses Array von Strings in ein Array von Promises um. die map -Funktion nimmt nun jeden einzelnen String aus dem Array keyList und \"macht\" damit etwas (Zeilen 7-10 ) es wird gepr\u00fcft, ob der key entweder dem dynamischen Cache entspricht ( 'dynamic' ) oder dem neuen statischen Cache ( 'static-v1' ). Wenn das nicht der Fall ist, dann wird der Cache mit dem Namen key gel\u00f6scht (Zeile 9 ). return caches.delete(key) gibt somit ein Promise zur\u00fcck (an die map -Funktion). Somit wird jeder Schl\u00fcssel aus der keyList in ein Promise umgewandelt (f\u00fcr static-v1 und dynamic wird null zur\u00fcckgegeben). wenn alle dieses Promises beendet sind, ist auch die Promise.all() -Funktion beendet und somit auch die event.waitUntil() -Funktion. Somit l\u00f6schen wir alle \"alten\" statischen Caches und behalten nur die Caches static-v1 und dynamic . Wenn wir also etwas in unseren *.html , *.css und/oder *.js -Dateien \u00e4ndern und das Ge\u00e4nderte wirksam werden lassen wollen, \u00e4ndern wir einfach die Namen der Caches im Service Worker und sobald der Service Worker aktiviert ist, existieren nur noch die neuen Caches und die alten sind gel\u00f6scht. Damit wir das an zentraler Stelle im sw.js machen, lagern wir die aktuellen Namen der Caches in Konstanten aus. Die vollst\u00e4ndige Implementierung unseres Service Workers sieht so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 const CURRENT_STATIC_CACHE = 'static-v2' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v2' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); })","title":"Neue Cache-Versionen erstellen"},{"location":"caching/#zusammenfassung","text":"Die Zusammanfassung f\u00fcr das Caching kann man im folgenden Bild darstellen. Mithilfe des Caching haben wir es geschafft, dass unsere Anwendung im Offline-Modus nicht mehr so aussieht, wie links, sondern wie rechts. Toll! Noch einige n\u00fctzliche Links: Service Worker API The offline cookbook Google: Service Worker","title":"Zusammenfassung"},{"location":"devices/","text":"Ger\u00e4tezugriffe \u00b6 Nun wollen wir noch auf Ger\u00e4teschnittstellen zugreifen. Dazu geh\u00f6ren die Kamera und auch die Geolocation-API, um unseren Standort zu ermitteln. Fr\u00fcher war JavaScript eine \"SandBox\", d.h. JavaScript-Code war vollst\u00e4ndig innerhalb des Browsers gekapselt und hatte keinerlei Zugriff nach au\u00dfen. Das \u00e4nderte sich mit dem Upload File -Button. JavaScript bekam (sehr eingeschr\u00e4nkten) Zugriff auf das Dateisystem (nur lesend). In der Zwischenzeit hat sich das komplett gewandelt. JavaScript l\u00e4uft erstens auch auf Servern und hat zweitens \u00fcber eine Vielzahl von APIs Zugriff auf unterschiedlichste Schnittstellen zum System. Wir wollen hier betrachten, wie JavaScript auf Kamera und den Standort zugreifen kann. Anpassung der Anwendung \u00b6 Ausgangspunkt ist dieser Stand des Projektes , den wir nach dem Einf\u00fcgen von Push-Notifications erreicht haben. Wir wollen nun die Kamera verwenden, um Bilder aufzunehmen, dazu erweiteren wir die Anwendung zun\u00e4chst, um neben title und location auch noch ein drittes EIngabefeld f\u00fcr die Bilder zu erhalten. Dazu erweiteren wir zun\u00e4chst die public/index.html : public/index.html 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 < div id = \"create-post\" > < video id = \"player\" autoplay ></ video > < canvas id = \"canvas\" width = \"320px\" height = \"240px\" ></ canvas > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\" id = \"capture-btn\" > Foto </ button > < div id = \"pick-image\" > < h6 > Bild ausw\u00e4hlen </ h6 > < input type = \"file\" accept = \"image/*\" id = \"image-picker\" > </ div > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > Das <video> - (Zeile 2 ) und das <cabvas> -Element (Zeile 3 ) werden verwendet, um mit der Kamera Bilder aufzunehmen, die mit dem <button> (Zeile 3 ) gespeichert werden. Der file-picker (Zeilen 7-9 ) wird ben\u00f6tigt, falls das Ger\u00e4t \u00fcber keine Kamera (oder keinen Kamerazugriff) verf\u00fcgt. Au\u00dferdem f\u00fcgen wir noch eine weitere Eingabesection f\u00fcr die Location hinzu mit einem Button und einem spinner , der anzeigen soll, dass etwas passiert. Wir verwenden die CSS-Klassen und -Ids auch noch, um die Eingabe etwas \"sch\u00f6ner\" aussehen zu lassen und erweiteren dazu die feed.css : public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : calc ( 100 vh - 56 px ); overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } # create-post video , # create-post canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } # create-post # pick-image { display : none ; } # create-post # capture-btn { margin : 10 px auto ; } . mdl-spinner { margin : auto ; } /* hier der Rest */ Die CSS-Definitionen sorgen insbesondere daf\u00fcr, dass das Video- , Canvas- und File-Picker-Element zun\u00e4chst versteckt ist. DOM-Zugriff \u00b6 Wir wollen uns zun\u00e4chst darum k\u00fcmmern, ein Live-Bild der Kamera in das Canvas-Element zu integrieren, d.h. wir k\u00fcmmern uns zun\u00e4chst um den Kamerazugriff. Kamera \u00b6 F\u00fcr den Kamerazugriff ben\u00f6tigen wir etwas JavaScript-Code. Wir erweitern die feed.js . Zun\u00e4chst vereinfachen wir die Zugriffe auf die einzelnen Elemente und f\u00fcgen eine Funktion hinzu, mit der wir den Zugriff auf die Kamera pr\u00fcfen und herstellen wollen: public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); function initializeMedia () { } function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); } In der neuen Funktion initializeMedia() wollen wir die MediaDevices -API verwenden. Ein Blick in die Dokumentation dieser API zeigt, dass die Browser-Unterst\u00fctzung noch nicht besonders gut ist, zumindest f\u00fcr einige der Methoden darin. Wir wollen aber insbesondere die getUserMedia() -Funktion verwenden und daf\u00fcr ist die Browser-Unterst\u00fctzung wiederum doch sehr gut (Chrom, Firefox, Edge und alle mobilen Ger\u00e4te). F\u00fcr den Fall, dass die MediaDevices -API nicht unterst\u00fctzt werden, erstellen wir uns im navigator ein eigenes mediaDevices -Objekt und pr\u00fcfen, ob die getUserMedia() -Funktion unterst\u00fctzt wird. Wenn dies nicht der Fall ist, erstellen wir uns f\u00fcr das neue mediaDevices -Objekt eine neue Eigenschaft getUserDevices und definieren es als eine Funktion. Diese Funktion nutzt dann alte Funktionen, die in den jeweiligen Browsern angeboten wurden (und werden). Wie gesagt, das ist nur ein Fallback f\u00fcr den Fall, dass ein Browser verwendet wird, der die getUserMedia() -Funktion in der MediaDevices -API nicht unterst\u00fctzt (was, wie wir oben erl\u00e4utert haben, nur noch selten der Fall ist). Wir erweitern f\u00fcr diesen seltenen Fall die initializeMedia() -Funktion: public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } } Wenn also die MediaDevices -API nicht unterst\u00fctzt wird (Zeile 15 ), dann erstellen wir einen eigenes MediaDevices -Objekt (Zeile 16 ). F\u00fcr dieses eigene MediaDevices -Objekt erstellen wir eine getUserMedia() -Funktion (Zeile 20 ). Diese Funktion gibt eine Promise zur\u00fcck. Entweder, eine Promise mit dem Zustand rejected (Zeile 24 ), n\u00e4mlich genau dann, wenn der Browser auch nicht die alten Funktionen webkitUserMedia und mozGetUserMedia unterst\u00fctzt. Dann k\u00f6nnen wir wirklich nichts mehr machen. Oder die Promise verwendet eine der beiden Funktionen und gibt die Promise nach Anwendung zur\u00fcck - kann nat\u00fcrlich trotzdem noch sein, dass sie rejected wird, aber vielleicht auch resolved . Jedenfalls bezieht sich dieser gesamte Code auf den Fall, dass getUserMedia() in navigator.mediaDevices nicht unterst\u00fctzt wird. Es handelt sich bei diesem Code um ein sogenanntes Polyfill . Wir k\u00fcmmern uns jetzt darum, tats\u00e4chlich Zugriff zur Kamera zu bekommen. Das kann nun entweder \u00fcber die moderne getUserMedia() -Funktion aus navigator.mediaDevices geschehen oder \u00fcber das Polyfill unter Verwendung von webkitGetUserMedia() oder mozGetUserMedia() . Nur f\u00fcr den Fall, dass wir keinen Zugriff auf die Kamera erhalten, wollen wir den File-Picker verwenden, um eine Bilddatei hochzuladen. public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } navigator . mediaDevices . getUserMedia ({ video : true }) . then ( stream => { videoPlayer . srcObject = stream ; videoPlayer . style . display = 'block' ; }) . catch ( err => { imagePickerArea . style . display = 'block' ; }); } An Zeile 32 k\u00f6nnen wir auf jeden Fall auf die getUserMedia() -Funktion zugreifen und genau das tun wir auch in Zeile 33 . Dieser Funktion wird ein JavaScript-Objekt \u00fcbergeben. Dieses Objekt hat zwei Eigenschaften: video und audio . Beide sind auf false gesetzt, wir k\u00f6nnen sie jedoch mit true einschalten und erledigen das f\u00fcr video ebefalls in Zeile 33 . Diese Funktion gibt eine promise zur\u00fcck. Im resolve -Fall erhalten wir einen Video- und/oder Audio- Stream . Wir verwenden diesen stream als Quelle f\u00fcr unseren Videplayer (der aufgrund der Funktion autoplay den Stream sofort anzeigt). Wir setzen daf\u00fcr den Videoplayer auf sichtbar - display: 'block' . Der reject -Fall der Promise kann verschiedene Gr\u00fcnde haben. Ein Grund w\u00e4re, wie oben erl\u00e4utert, dass wir selbst mit dem Polyfill keinen Zugriff auf die Kamera bekommen. Ein anderer w\u00e4re, dass unser Ger\u00e4t gar nicht mit einer Kamera verbunden ist und ein dritter Fall w\u00e4re, dass der Zugriff auf die Kamera von der Nutzerin blockiert wird. Wenn die getUserMedia() -Funktion das erste Mal aufgerufen wird, erfolgt eine Abfrage, ob der Zugriff auf die Kamera zugelassen oder blockiert wird: Die Entscheidung l\u00e4sst sich auch nachtr\u00e4glich \u00e4ndern, indem man auf das i links neben der URL klickt. Wenn Sie die Anwendung ausf\u00fchren und den Zugriff auf die Kamera erlauben, wird das Video sofort angezeigt. Wird die Promise rejected , soll die gesamte imagePickerArea (wieder) auf display: 'block' gesetzt werden. In der Funktion closeCreatePostModal() setzen wir die Video- und File-Picker-Elemente ebenaflls alle (wieder) auf display: 'block' . public/src/js/feed.js 48 49 50 51 52 53 function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; } Wird der Zugriff auf die Kamera blockiert, wird stattdessen der File-Picker angezeigt: Nun wollen wir den Foto -Button implementieren, damit wir ein Foto von dem Kamerastream erzeugen k\u00f6nnen. Dazu implementieren wir f\u00fcr diesen Button die Behandlung des click -Ereignisses: public/src/js/feed.js 43 44 45 46 47 48 49 50 51 52 captureButton . addEventListener ( 'click' , event => { canvasElement . style . display = 'block' ; videoPlayer . style . display = 'none' ; captureButton . style . display = 'none' ; let context = canvasElement . getContext ( '2d' ); context . drawImage ( videoPlayer , 0 , 0 , canvas . width , videoPlayer . videoHeight / ( videoPlayer . videoWidth / canvas . width )); videoPlayer . srcObject . getVideoTracks (). forEach ( track => { track . stop (); }) }); Die Grundidee dabei ist die, dass wir das ktuelle Bild des videoPlayers in unser canvasElement einf\u00fcgen, das canvasElement sichtbar gestalten, den videoPlayer unsichtbar (und den Button dann auch gleich noch) und au\u00dferdem den Videoplayer stoppen. Das Canvas -Element verf\u00fcgt \u00fcber einen Grafikkontext, den wir in Zeile 52 als 2d ausw\u00e4hlen. Siehe dazu auch HTMLCanvasElement.getContext() . F\u00fcr diesen context rufen wir die drawImage() -Funktion auf (siehe CanvasRenderingContext2D.drawImage() ). der erste Parameter der drawImage() -Funktion ist das Bild. Wir \u00fcbergeben dazu den videoPlayer . der zweite und dritte Parameter ist die Koordinate des linken oberen Punktes innerhalb des Canvas-Elementes, hier x=0 und y= 0 . der dritte Parameter gibt die Breite des Bildes an. Wir nehmen hier die gesamte Breite des Canvas-Elementes. der vierte Parameter gibt die H\u00f6he des Bildes an. Da wir der Breite einen festen Wert zugewiesen haben (die Canvas-Breite), m\u00fcssen wir die H\u00f6he in Abh\u00e4ngigkeit der Relation des Videos berechnen. Wenn wir dieses Bild erstellt haben, k\u00f6nnen wir den Videoplayer stoppen. Die Funktion getVideoTracks() gibt ein Array allerlaufenden Streams auf der Webseite zur\u00fcck. Wir laufen durch dieses Array mithilfe der forEach -Schleife (Zeile 54 ) und stoppen alle laufenden Streams (Zeile 55 ). Wenn wir nun den Foto -Button klicken, sehen wir das (Stand-)Bild im canvasElement , der videoPlayer und der Button sind unsichtbar und der videoPlayer ist gestoppt. Speichern des Bildes im Backend \u00b6 Das so aufgenommene Foto wollen wir nun im Backend speichern. Daf\u00fcr ist im Backend zum Gl\u00fcck schon alles vorbereitet. Das Bild ist jetzt im Canvas, wir m\u00fcssen es noch in einen `base64String umwandeln. Wir definieren uns zwei neue Funktionen. Die eine wandelt das Bild in das blob -Format um. Das k\u00f6nnte man auch schon in die Datenbank speichern, aber wir haben das Backend so geschrieben, dass es einen base64String erwartet. Deswegen wandeln wir das blob -Format auch noch in diesen base64String um. Wir verwenden dazu jeweils Funktionen, die man im Netz findet. Ich habe diese jetzt zusammen mit der urlBase64ToUint8Array(base64String) -Funktion aus dem vorherigen Kapitel in eine eigene utility.js -Datei gepackt, um die Funktionen etwas besser zu strukturieren. Hier die neue Datei mit den neuen Funktion dataURItoBlob(dataURI) und blobToBase64 und der alten urlBase64ToUint8Array(base64String) , die ich aus app.js entfernt und hierher verschoben habe. public/src/js/utility.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 function urlBase64ToUint8Array ( base64String ) { var padding = '=' . repeat (( 4 - base64String . length % 4 ) % 4 ); var base64 = ( base64String + padding ) . replace ( /\\-/g , '+' ) . replace ( /_/g , '/' ); var rawData = window . atob ( base64 ); var outputArray = new Uint8Array ( rawData . length ); for ( var i = 0 ; i < rawData . length ; ++ i ) { outputArray [ i ] = rawData . charCodeAt ( i ); } return outputArray ; } function dataURItoBlob ( dataURI ) { var byteString = atob ( dataURI . split ( ',' )[ 1 ]); var mimeString = dataURI . split ( ',' )[ 0 ]. split ( ':' )[ 1 ]. split ( ';' )[ 0 ] var ab = new ArrayBuffer ( byteString . length ); var ia = new Uint8Array ( ab ); for ( var i = 0 ; i < byteString . length ; i ++ ) { ia [ i ] = byteString . charCodeAt ( i ); } var blob = new Blob ([ ab ], { type : mimeString }); return blob ; } const blobToBase64 = blob => { const reader = new FileReader (); reader . readAsDataURL ( blob ); return new Promise ( resolve => { reader . onloadend = () => { resolve ( reader . result ); }; }); }; Die blobToBase64 ist als Promise definiert. Die neue Datei utility.js muss nun in die index.html eingebettet werden: public/index.html 117 118 119 120 121 122 < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/db.js\" ></ script > < script src = \"/src/js/utility.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > Mit diesen Hilfsfunktionen sind die Anpassungen recht logisch, die wir nun vornehmen m\u00fcssen, um die Daten in das Backend zu speichern. In der feed.js erstellen wir uns f\u00fcr den base64String eine globale Variable und weisen dieser den entsprechenden Wert zu, sobald wir das Foto aufgemommen haben: public/src/js/feed.jslet shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let base64String = '' ; function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } navigator . mediaDevices . getUserMedia ({ video : true }) . then ( stream => { videoPlayer . srcObject = stream ; videoPlayer . style . display = 'block' ; }) . catch ( err => { imagePickerArea . style . display = 'block' ; }); } captureButton . addEventListener ( 'click' , event => { canvasElement . style . display = 'block' ; videoPlayer . style . display = 'none' ; captureButton . style . display = 'none' ; let context = canvasElement . getContext ( '2d' ); context . drawImage ( videoPlayer , 0 , 0 , canvas . width , videoPlayer . videoHeight / ( videoPlayer . videoWidth / canvas . width )); videoPlayer . srcObject . getVideoTracks (). forEach ( track => { track . stop (); }); let picture = dataURItoBlob ( canvasElement . toDataURL ()); console . log ( 'picture' , picture ); blobToBase64 ( picture ) . then ( res => { let base64StringWithTag = res ; base64String = base64StringWithTag . substr ( base64StringWithTag . indexOf ( ',' ) + 1 ) console . log ( 'base64String' , base64String ); } ) }); function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; } shareImageButton . addEventListener ( 'click' , openCreatePostModal ); closeCreatePostModalButton . addEventListener ( 'click' , closeCreatePostModal ); function clearCards () { while ( sharedMomentsArea . hasChildNodes ()) { sharedMomentsArea . removeChild ( sharedMomentsArea . lastChild ); } } function createCard ( data ) { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; let image = new Image (); image . src = \"data:image/png;base64,\" + data . image ; cardTitle . style . backgroundImage = 'url(' + image . src + ')' ; cardTitle . style . backgroundSize = 'cover' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text whiteText' ; cardTitleTextElement . textContent = data . title ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = data . location ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } function updateUI ( data ) { for ( let post of data ) { createCard ( post ); } } let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); if ( 'indexedDB' in window ) { readAllData ( 'posts' ) . then ( data => { if ( ! networkDataReceived ) { console . log ( 'From cache ...' , data ); updateUI ( data ); } }) } function sendDataToBackend () { fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : titleInput . value , location : locationInput . value , image : base64String , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); updateUI ( Object . entries ( data )); }); } form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden console . log ( ' in submit !' ); if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , image : base64String }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 1000 }; snackbarContainer . showSnackbar ( data ); }); }); } else { sendDataToBackend (); } }); In Zeile 13 ist die Deklaration der globalen Variablen. In den Zeilen 53-61 wird das Bild in einen base64String umgewandelt (unter Verwendung der neuen Funktionen aus der utility.js ). F\u00fcr das Senden der Daten an das Backend wird nun f\u00fcr die image -Eigenschaft der Wert aus der globalen Variablen gelesen und das Gleiche passiert, wenn wir das Bild in die IndexedDB speichern, um es per Hintergrundsynchronisation an das Backend zu senden. Bei der Behandlung des sync -Events im Service Worker lesen wir nun auch diesen Wert f\u00fcr die image -Eigenschaft aus: public/sw.js 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : data . title , location : data . location , image : data . image , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) Das war es schon, wir k\u00f6nnen nun die Daten an das Backend senden. Zum Testen nehmen Sie ein Foto auf, geben einen Titel und eine Location ein und klicken den Speichern -Button. Dann lednet - hoffentlich - alles im Backend (\u00fcber den \"Umweg\" IndexedDB nat\u00fcrlich). Sie erhalten auch eine Push-Nachricht, dass die Daten gespeichert wurden. Wir implementieren nun noch den Fall, dass die Kamera nicht zur Verf\u00fcgung steht oder die MediaDevices -API oder der Kamerazugriff blockiert wurde und erm\u00f6glichen daf\u00fcr das Hochladen einer Bilddatei. Bilddatei hochladen \u00b6 Das Hochladen einer Bilddatei kennen wir ja bereits von unserem anderen Frontend. Hier ist nun auch schon alles vorbereitet und wir m\u00fcssen in der feed.js nur noch das change -Event f\u00fcr den upload -Button behandeln. Das sieht im Prinzip genau so aus, wie die Umwandlung des Canvas-Bildes, nur dass picture hier die hochgeladene Datei ist: public/src/js/feed.js 104 105 106 107 108 109 110 111 112 113 imagePicker . addEventListener ( 'change' , event => { let picture = event . target . files [ 0 ]; blobToBase64 ( picture ) . then ( res => { let base64StringWithTag = res ; base64String = base64StringWithTag . substr ( base64StringWithTag . indexOf ( ',' ) + 1 ) console . log ( 'base64String' , base64String ); } ) }); Zum Testen muss im Browser links von der URL auf das i geklickt und Kamera blockieren ausgew\u00e4hlt werden. dann \u00f6ffnet sich der File-Picker. Geolocation-API \u00b6 Die Geolocation-API wird von allen Browsern unterst\u00fctzt (sogar Internet Explorer). Es gibt viele Dokumentationen dar\u00fcber, z.B. hier , hier und hier . Die Verwendung ist recht einfach. In der index.html haben wir uns bereits einen Button erstellt, f\u00fcr den wir \"nur noch\" das click -Ereignis behandeln m\u00fcssen. public/index.html 83 84 85 86 < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > Zun\u00e4chst vereinfachen wir uns in der feed.js wieder den Zugriff auf den Button und den Spinner (Loader) und erstellen noch eine globale Variable fetchedLocation : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let base64String = '' ; let locationButton = document . querySelector ( '#location-btn' ); let locationLoader = document . querySelector ( '#location-loader' ); let fetchedLocation ; und wir setzen den Loader in der feed.css auf unsichtbar: public/src/js/feed.css 23 24 25 # create-post # pick-image , # create-post # location-loader { display : none ; } create-post #pick-image stand dort schon, wir haben nur noch den Selektor #create-post #location-loader hinzugef\u00fcgt. Wir f\u00fcgen in der feed.js die Behandlung des click -Ereignisses f\u00fcr den Location -Button hinzu und auch noch, wie f\u00fcr die Kamera, eine initializeLocation() -Funktion, in der gepr\u00fcft wird, ob die Geolocation -API \u00fcberhaupt im Browser verf\u00fcgbar ist: public/src/js/feed.js 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 locationButton . addEventListener ( 'click' , event => { if ( ! ( 'geolocation' in navigator )) { return ; } locationButton . style . display = 'none' ; locationLoader . style . display = 'block' ; navigator . geolocation . getCurrentPosition ( position => { locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; fetchedLocation = { latitude : position . coords . latitude , longitude : position . coords . longitude }; console . log ( 'current position: ' , fetchedLocation ); locationInput . value = 'In Berlin' ; document . querySelector ( '#manual-location' ). classList . add ( 'is-focused' ); }, err => { console . log ( err ); locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; alert ( 'Couldn\\'t fetch location, please enter manually!' ); fetchedLocation = null ; }, { timeout : 5000 }); }); function initializeLocation () { if ( ! ( 'geolocation' in navigator )) { locationButton . style . display = 'none' ; } } In der initializeLocation() -Funktion wird gepr\u00fcft, ob der Browser die Geolocation -API unterst\u00fctzt. Wenn nicht, wird der Location -Button versteckt. Wir haben trotzdem, sicherheitshalber, die Abfrage nochmal in die Behandlung des click -Ereignisses f\u00fcr diesen Button eingef\u00fcgt (Zeilen 19-20 ), obwohl dies nicht wirklich notwendig ist, da der Button nicht angeklickt werden kann, wenn die Geolocation -API nicht unterst\u00fctzt wird, da er nicht angezeigt wird. Wenn auf den Button geklickt wurde, setzen wir den Button selbst auf unsichtbar (Zeile 23 ) und den Spinner (Loader) auf sichtbar (Zeile 24 ). Zeile 26 zeigt den eigentlichen Zugriff auf die aktuelle Position. Dort wird die Funktion getCurrentPosition() der Geolocation -API aufgerufen. Wir \u00fcbergeben drei Parameter: der erste Parameter ist die (Callback-)Funktion, die die aktuelle Position zur\u00fcckgibt. Wenn diese Funktion ausgef\u00fchrt wird, setzen wir den Button wieder auf sichtbar (Zeile 27 ) und den Loader auf unsichtbar (Zeile 28 ). Die aktuelle Position position enth\u00e4lt die Eigenschaft coords , die die latitude und longitude als Werte enth\u00e4lt (siehe GeolocationPosition und GeolocationPosition ). Diese Position geben wir auf der Konsole aus (Zeile 30 ). Wir bef\u00fcllen das locationInput -Eingabefeld noch mit einem Dummy-Wert und fokussieren auf das Eingabefeld (Zeilen 31-32 ). der zweite Parameter ist eine Funktion, die ausgef\u00fchrt wird, wenn ein Fehler auftritt. M\u00f6gliche Fehler sind, dass im Browser der Zugriff auf die Position deaktiviert wurde, dass die Nutzerin den Zugriff auf die aktuelle Position blockiert hat oder dass die Position nicht \"schnell genug\" ermittelt werden konnte. Im Fehlerfall geben wir den Fehler auf der Konsole aus und schalten den Button wieder ein und den Loader wieder aus (Zeilen 34-36 ). der dritte Parameter ist ein JavaScript-Objekt mit options . Wir w\u00e4hlen hier nur eine einzige Option, n\u00e4mlich wie lange nach der aktuellen Position gesucht werden soll. In der Einstellung erfolgt der timeout nach 5 sek . Wir passen nun in der feed.js noch die beiden Funktionen openCreatePostModal() und closeCreatePostModal() an: public/src/js/feed.js 109 110 111 112 113 114 115 116 117 118 119 120 121 122 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); initializeLocation (); } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; } Wenn Sie die Anwenung nun starten, werden Sie gefragt, ob Sie die Abfrage nach Ihrem Standort zulassen oder blockieren wollen. Die meisten von Ihnen werden aber die Ortungsdienste ausgeschaltet haben. Dann ist auch die Abfrage zun\u00e4chst egal. Im Mac kann man diese (kurzzeitig, dann wieder ausschalten) \u00fcber Systemeinstellungen --> Sicherheit & Datenschutz --> Reiter Datenschutz --> Ortungsdienste f\u00fcr Google Chrome aktivieren. Wenn Sie die Positionsbestimmung zulassen, dann wird nach dem Klicken auf den Location -Button die aktuelle Position auf der Konsole eingegeben und im Formular erscheint unter Ort In Berlin . Wir machen nichts weiter mit der aktuellen Position. Es gibt viele M\u00f6glichkeiten, die jetzt noch ausprobiert werden k\u00f6nnten. Dazu geh\u00f6ren besipeilsweise: Wir k\u00f6nnten mithilfe der Google-Geolocation-API die Adresse ermitteln, die Google f\u00fcr eine gegebene Position ( longitude und latitude ) zur\u00fcckgibt. Dazu br\u00e4uchten wir aber auch einen API-Key von Google. Wir k\u00f6nnten das Gleiche mit der Nominatim-API f\u00fcr Open Street Map machen. Sie k\u00f6nnen den Service hier einmal ausprobieren , indem Sie Ihre latitude und longitude aus der Konsolenausgabe eingeben. Wir k\u00f6nnten OpenLayers verwenden, um die Position auf einer Karte anzuzeigen. Wir k\u00f6nnten die Datenbank erweitern und f\u00fcr alle Posts auch noch die Koordinaten der Position abspeichern und dann alle Posts auf einer Karte (mithilfe von OpenLayers + OpenStreetMap) visualisieren. ... Letzte Verbesserungen \u00b6 Ein Nachteil in unserer Anwendung ist noch, dass die Kamera die ganze Zeit l\u00e4uft, wenn wir einmal den modalen Dialog zur Eingabe von daten ge\u00f6ffnet hatten. Wir sollten sie beim Ausschalten des modalen Dialoges schlie\u00dfen. Das Stoppen aller Videostreams hatten wir bereits f\u00fcr die Aufnahme des Fotos gemacht. Weil jedoch das Schlie\u00dfen und erneutes \u00d6ffnen der Kamera sehr ressourcenverbrauchend ist, laufen die Animationen f\u00fcr das \u00d6ffnen und Schlie\u00dfen des modalen Dialogs nicht mehr fl\u00fcssig. Wir lagern diese Animationen deshalb in einen asynchronen \"Thread\" aus (ist nicht wirklich ein neuer Thread): public/src/js/feed.js 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 function openCreatePostModal () { setTimeout ( () => { createPostArea . style . transform = 'translateY(0)' ; }, 1 ); initializeMedia (); initializeLocation (); } function closeCreatePostModal () { imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; if ( videoPlayer . srcObject ) { videoPlayer . srcObject . getVideoTracks (). forEach ( track => track . stop ()); } setTimeout ( () => { createPostArea . style . transform = 'translateY(100vH)' ; }, 1 ); } Mithilfe des timeout -\"Tricks\" wird der modale Dialog flie\u00dfend geschlossen und das Kamerazeichen im Tab des Browsers schlie\u00dft asynchron etwas sp\u00e4ter. Success Wir haben erfolgreich den Zugriff auf die Kamera (MediaDevices-API) und die Geolocation-API ausprobiert und in unsere Anwendung eingebunden. Die MediaDevices-API bietet neben der video -Eigenschaft auch noch die audio -Eigenschaft, um das Mikrofon zu verwenden. Mit dem Zugriff auf Kamera und Position haben wir unsere letzte progressive Funktionalit\u00e4t f\u00fcr dieses Semester hinzugef\u00fcgt! Geschafft!","title":"Ger\u00e4tezugriffe"},{"location":"devices/#geratezugriffe","text":"Nun wollen wir noch auf Ger\u00e4teschnittstellen zugreifen. Dazu geh\u00f6ren die Kamera und auch die Geolocation-API, um unseren Standort zu ermitteln. Fr\u00fcher war JavaScript eine \"SandBox\", d.h. JavaScript-Code war vollst\u00e4ndig innerhalb des Browsers gekapselt und hatte keinerlei Zugriff nach au\u00dfen. Das \u00e4nderte sich mit dem Upload File -Button. JavaScript bekam (sehr eingeschr\u00e4nkten) Zugriff auf das Dateisystem (nur lesend). In der Zwischenzeit hat sich das komplett gewandelt. JavaScript l\u00e4uft erstens auch auf Servern und hat zweitens \u00fcber eine Vielzahl von APIs Zugriff auf unterschiedlichste Schnittstellen zum System. Wir wollen hier betrachten, wie JavaScript auf Kamera und den Standort zugreifen kann.","title":"Ger\u00e4tezugriffe"},{"location":"devices/#anpassung-der-anwendung","text":"Ausgangspunkt ist dieser Stand des Projektes , den wir nach dem Einf\u00fcgen von Push-Notifications erreicht haben. Wir wollen nun die Kamera verwenden, um Bilder aufzunehmen, dazu erweiteren wir die Anwendung zun\u00e4chst, um neben title und location auch noch ein drittes EIngabefeld f\u00fcr die Bilder zu erhalten. Dazu erweiteren wir zun\u00e4chst die public/index.html : public/index.html 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 < div id = \"create-post\" > < video id = \"player\" autoplay ></ video > < canvas id = \"canvas\" width = \"320px\" height = \"240px\" ></ canvas > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\" id = \"capture-btn\" > Foto </ button > < div id = \"pick-image\" > < h6 > Bild ausw\u00e4hlen </ h6 > < input type = \"file\" accept = \"image/*\" id = \"image-picker\" > </ div > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > Das <video> - (Zeile 2 ) und das <cabvas> -Element (Zeile 3 ) werden verwendet, um mit der Kamera Bilder aufzunehmen, die mit dem <button> (Zeile 3 ) gespeichert werden. Der file-picker (Zeilen 7-9 ) wird ben\u00f6tigt, falls das Ger\u00e4t \u00fcber keine Kamera (oder keinen Kamerazugriff) verf\u00fcgt. Au\u00dferdem f\u00fcgen wir noch eine weitere Eingabesection f\u00fcr die Location hinzu mit einem Button und einem spinner , der anzeigen soll, dass etwas passiert. Wir verwenden die CSS-Klassen und -Ids auch noch, um die Eingabe etwas \"sch\u00f6ner\" aussehen zu lassen und erweiteren dazu die feed.css : public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : calc ( 100 vh - 56 px ); overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } # create-post video , # create-post canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } # create-post # pick-image { display : none ; } # create-post # capture-btn { margin : 10 px auto ; } . mdl-spinner { margin : auto ; } /* hier der Rest */ Die CSS-Definitionen sorgen insbesondere daf\u00fcr, dass das Video- , Canvas- und File-Picker-Element zun\u00e4chst versteckt ist.","title":"Anpassung der Anwendung"},{"location":"devices/#dom-zugriff","text":"Wir wollen uns zun\u00e4chst darum k\u00fcmmern, ein Live-Bild der Kamera in das Canvas-Element zu integrieren, d.h. wir k\u00fcmmern uns zun\u00e4chst um den Kamerazugriff.","title":"DOM-Zugriff"},{"location":"devices/#kamera","text":"F\u00fcr den Kamerazugriff ben\u00f6tigen wir etwas JavaScript-Code. Wir erweitern die feed.js . Zun\u00e4chst vereinfachen wir die Zugriffe auf die einzelnen Elemente und f\u00fcgen eine Funktion hinzu, mit der wir den Zugriff auf die Kamera pr\u00fcfen und herstellen wollen: public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); function initializeMedia () { } function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); } In der neuen Funktion initializeMedia() wollen wir die MediaDevices -API verwenden. Ein Blick in die Dokumentation dieser API zeigt, dass die Browser-Unterst\u00fctzung noch nicht besonders gut ist, zumindest f\u00fcr einige der Methoden darin. Wir wollen aber insbesondere die getUserMedia() -Funktion verwenden und daf\u00fcr ist die Browser-Unterst\u00fctzung wiederum doch sehr gut (Chrom, Firefox, Edge und alle mobilen Ger\u00e4te). F\u00fcr den Fall, dass die MediaDevices -API nicht unterst\u00fctzt werden, erstellen wir uns im navigator ein eigenes mediaDevices -Objekt und pr\u00fcfen, ob die getUserMedia() -Funktion unterst\u00fctzt wird. Wenn dies nicht der Fall ist, erstellen wir uns f\u00fcr das neue mediaDevices -Objekt eine neue Eigenschaft getUserDevices und definieren es als eine Funktion. Diese Funktion nutzt dann alte Funktionen, die in den jeweiligen Browsern angeboten wurden (und werden). Wie gesagt, das ist nur ein Fallback f\u00fcr den Fall, dass ein Browser verwendet wird, der die getUserMedia() -Funktion in der MediaDevices -API nicht unterst\u00fctzt (was, wie wir oben erl\u00e4utert haben, nur noch selten der Fall ist). Wir erweitern f\u00fcr diesen seltenen Fall die initializeMedia() -Funktion: public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } } Wenn also die MediaDevices -API nicht unterst\u00fctzt wird (Zeile 15 ), dann erstellen wir einen eigenes MediaDevices -Objekt (Zeile 16 ). F\u00fcr dieses eigene MediaDevices -Objekt erstellen wir eine getUserMedia() -Funktion (Zeile 20 ). Diese Funktion gibt eine Promise zur\u00fcck. Entweder, eine Promise mit dem Zustand rejected (Zeile 24 ), n\u00e4mlich genau dann, wenn der Browser auch nicht die alten Funktionen webkitUserMedia und mozGetUserMedia unterst\u00fctzt. Dann k\u00f6nnen wir wirklich nichts mehr machen. Oder die Promise verwendet eine der beiden Funktionen und gibt die Promise nach Anwendung zur\u00fcck - kann nat\u00fcrlich trotzdem noch sein, dass sie rejected wird, aber vielleicht auch resolved . Jedenfalls bezieht sich dieser gesamte Code auf den Fall, dass getUserMedia() in navigator.mediaDevices nicht unterst\u00fctzt wird. Es handelt sich bei diesem Code um ein sogenanntes Polyfill . Wir k\u00fcmmern uns jetzt darum, tats\u00e4chlich Zugriff zur Kamera zu bekommen. Das kann nun entweder \u00fcber die moderne getUserMedia() -Funktion aus navigator.mediaDevices geschehen oder \u00fcber das Polyfill unter Verwendung von webkitGetUserMedia() oder mozGetUserMedia() . Nur f\u00fcr den Fall, dass wir keinen Zugriff auf die Kamera erhalten, wollen wir den File-Picker verwenden, um eine Bilddatei hochzuladen. public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } navigator . mediaDevices . getUserMedia ({ video : true }) . then ( stream => { videoPlayer . srcObject = stream ; videoPlayer . style . display = 'block' ; }) . catch ( err => { imagePickerArea . style . display = 'block' ; }); } An Zeile 32 k\u00f6nnen wir auf jeden Fall auf die getUserMedia() -Funktion zugreifen und genau das tun wir auch in Zeile 33 . Dieser Funktion wird ein JavaScript-Objekt \u00fcbergeben. Dieses Objekt hat zwei Eigenschaften: video und audio . Beide sind auf false gesetzt, wir k\u00f6nnen sie jedoch mit true einschalten und erledigen das f\u00fcr video ebefalls in Zeile 33 . Diese Funktion gibt eine promise zur\u00fcck. Im resolve -Fall erhalten wir einen Video- und/oder Audio- Stream . Wir verwenden diesen stream als Quelle f\u00fcr unseren Videplayer (der aufgrund der Funktion autoplay den Stream sofort anzeigt). Wir setzen daf\u00fcr den Videoplayer auf sichtbar - display: 'block' . Der reject -Fall der Promise kann verschiedene Gr\u00fcnde haben. Ein Grund w\u00e4re, wie oben erl\u00e4utert, dass wir selbst mit dem Polyfill keinen Zugriff auf die Kamera bekommen. Ein anderer w\u00e4re, dass unser Ger\u00e4t gar nicht mit einer Kamera verbunden ist und ein dritter Fall w\u00e4re, dass der Zugriff auf die Kamera von der Nutzerin blockiert wird. Wenn die getUserMedia() -Funktion das erste Mal aufgerufen wird, erfolgt eine Abfrage, ob der Zugriff auf die Kamera zugelassen oder blockiert wird: Die Entscheidung l\u00e4sst sich auch nachtr\u00e4glich \u00e4ndern, indem man auf das i links neben der URL klickt. Wenn Sie die Anwendung ausf\u00fchren und den Zugriff auf die Kamera erlauben, wird das Video sofort angezeigt. Wird die Promise rejected , soll die gesamte imagePickerArea (wieder) auf display: 'block' gesetzt werden. In der Funktion closeCreatePostModal() setzen wir die Video- und File-Picker-Elemente ebenaflls alle (wieder) auf display: 'block' . public/src/js/feed.js 48 49 50 51 52 53 function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; } Wird der Zugriff auf die Kamera blockiert, wird stattdessen der File-Picker angezeigt: Nun wollen wir den Foto -Button implementieren, damit wir ein Foto von dem Kamerastream erzeugen k\u00f6nnen. Dazu implementieren wir f\u00fcr diesen Button die Behandlung des click -Ereignisses: public/src/js/feed.js 43 44 45 46 47 48 49 50 51 52 captureButton . addEventListener ( 'click' , event => { canvasElement . style . display = 'block' ; videoPlayer . style . display = 'none' ; captureButton . style . display = 'none' ; let context = canvasElement . getContext ( '2d' ); context . drawImage ( videoPlayer , 0 , 0 , canvas . width , videoPlayer . videoHeight / ( videoPlayer . videoWidth / canvas . width )); videoPlayer . srcObject . getVideoTracks (). forEach ( track => { track . stop (); }) }); Die Grundidee dabei ist die, dass wir das ktuelle Bild des videoPlayers in unser canvasElement einf\u00fcgen, das canvasElement sichtbar gestalten, den videoPlayer unsichtbar (und den Button dann auch gleich noch) und au\u00dferdem den Videoplayer stoppen. Das Canvas -Element verf\u00fcgt \u00fcber einen Grafikkontext, den wir in Zeile 52 als 2d ausw\u00e4hlen. Siehe dazu auch HTMLCanvasElement.getContext() . F\u00fcr diesen context rufen wir die drawImage() -Funktion auf (siehe CanvasRenderingContext2D.drawImage() ). der erste Parameter der drawImage() -Funktion ist das Bild. Wir \u00fcbergeben dazu den videoPlayer . der zweite und dritte Parameter ist die Koordinate des linken oberen Punktes innerhalb des Canvas-Elementes, hier x=0 und y= 0 . der dritte Parameter gibt die Breite des Bildes an. Wir nehmen hier die gesamte Breite des Canvas-Elementes. der vierte Parameter gibt die H\u00f6he des Bildes an. Da wir der Breite einen festen Wert zugewiesen haben (die Canvas-Breite), m\u00fcssen wir die H\u00f6he in Abh\u00e4ngigkeit der Relation des Videos berechnen. Wenn wir dieses Bild erstellt haben, k\u00f6nnen wir den Videoplayer stoppen. Die Funktion getVideoTracks() gibt ein Array allerlaufenden Streams auf der Webseite zur\u00fcck. Wir laufen durch dieses Array mithilfe der forEach -Schleife (Zeile 54 ) und stoppen alle laufenden Streams (Zeile 55 ). Wenn wir nun den Foto -Button klicken, sehen wir das (Stand-)Bild im canvasElement , der videoPlayer und der Button sind unsichtbar und der videoPlayer ist gestoppt.","title":"Kamera"},{"location":"devices/#speichern-des-bildes-im-backend","text":"Das so aufgenommene Foto wollen wir nun im Backend speichern. Daf\u00fcr ist im Backend zum Gl\u00fcck schon alles vorbereitet. Das Bild ist jetzt im Canvas, wir m\u00fcssen es noch in einen `base64String umwandeln. Wir definieren uns zwei neue Funktionen. Die eine wandelt das Bild in das blob -Format um. Das k\u00f6nnte man auch schon in die Datenbank speichern, aber wir haben das Backend so geschrieben, dass es einen base64String erwartet. Deswegen wandeln wir das blob -Format auch noch in diesen base64String um. Wir verwenden dazu jeweils Funktionen, die man im Netz findet. Ich habe diese jetzt zusammen mit der urlBase64ToUint8Array(base64String) -Funktion aus dem vorherigen Kapitel in eine eigene utility.js -Datei gepackt, um die Funktionen etwas besser zu strukturieren. Hier die neue Datei mit den neuen Funktion dataURItoBlob(dataURI) und blobToBase64 und der alten urlBase64ToUint8Array(base64String) , die ich aus app.js entfernt und hierher verschoben habe. public/src/js/utility.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 function urlBase64ToUint8Array ( base64String ) { var padding = '=' . repeat (( 4 - base64String . length % 4 ) % 4 ); var base64 = ( base64String + padding ) . replace ( /\\-/g , '+' ) . replace ( /_/g , '/' ); var rawData = window . atob ( base64 ); var outputArray = new Uint8Array ( rawData . length ); for ( var i = 0 ; i < rawData . length ; ++ i ) { outputArray [ i ] = rawData . charCodeAt ( i ); } return outputArray ; } function dataURItoBlob ( dataURI ) { var byteString = atob ( dataURI . split ( ',' )[ 1 ]); var mimeString = dataURI . split ( ',' )[ 0 ]. split ( ':' )[ 1 ]. split ( ';' )[ 0 ] var ab = new ArrayBuffer ( byteString . length ); var ia = new Uint8Array ( ab ); for ( var i = 0 ; i < byteString . length ; i ++ ) { ia [ i ] = byteString . charCodeAt ( i ); } var blob = new Blob ([ ab ], { type : mimeString }); return blob ; } const blobToBase64 = blob => { const reader = new FileReader (); reader . readAsDataURL ( blob ); return new Promise ( resolve => { reader . onloadend = () => { resolve ( reader . result ); }; }); }; Die blobToBase64 ist als Promise definiert. Die neue Datei utility.js muss nun in die index.html eingebettet werden: public/index.html 117 118 119 120 121 122 < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/db.js\" ></ script > < script src = \"/src/js/utility.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > Mit diesen Hilfsfunktionen sind die Anpassungen recht logisch, die wir nun vornehmen m\u00fcssen, um die Daten in das Backend zu speichern. In der feed.js erstellen wir uns f\u00fcr den base64String eine globale Variable und weisen dieser den entsprechenden Wert zu, sobald wir das Foto aufgemommen haben: public/src/js/feed.jslet shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let base64String = '' ; function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } navigator . mediaDevices . getUserMedia ({ video : true }) . then ( stream => { videoPlayer . srcObject = stream ; videoPlayer . style . display = 'block' ; }) . catch ( err => { imagePickerArea . style . display = 'block' ; }); } captureButton . addEventListener ( 'click' , event => { canvasElement . style . display = 'block' ; videoPlayer . style . display = 'none' ; captureButton . style . display = 'none' ; let context = canvasElement . getContext ( '2d' ); context . drawImage ( videoPlayer , 0 , 0 , canvas . width , videoPlayer . videoHeight / ( videoPlayer . videoWidth / canvas . width )); videoPlayer . srcObject . getVideoTracks (). forEach ( track => { track . stop (); }); let picture = dataURItoBlob ( canvasElement . toDataURL ()); console . log ( 'picture' , picture ); blobToBase64 ( picture ) . then ( res => { let base64StringWithTag = res ; base64String = base64StringWithTag . substr ( base64StringWithTag . indexOf ( ',' ) + 1 ) console . log ( 'base64String' , base64String ); } ) }); function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; } shareImageButton . addEventListener ( 'click' , openCreatePostModal ); closeCreatePostModalButton . addEventListener ( 'click' , closeCreatePostModal ); function clearCards () { while ( sharedMomentsArea . hasChildNodes ()) { sharedMomentsArea . removeChild ( sharedMomentsArea . lastChild ); } } function createCard ( data ) { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; let image = new Image (); image . src = \"data:image/png;base64,\" + data . image ; cardTitle . style . backgroundImage = 'url(' + image . src + ')' ; cardTitle . style . backgroundSize = 'cover' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text whiteText' ; cardTitleTextElement . textContent = data . title ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = data . location ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } function updateUI ( data ) { for ( let post of data ) { createCard ( post ); } } let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); if ( 'indexedDB' in window ) { readAllData ( 'posts' ) . then ( data => { if ( ! networkDataReceived ) { console . log ( 'From cache ...' , data ); updateUI ( data ); } }) } function sendDataToBackend () { fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : titleInput . value , location : locationInput . value , image : base64String , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); updateUI ( Object . entries ( data )); }); } form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden console . log ( ' in submit !' ); if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleInput . value , location : locationInput . value , image : base64String }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 1000 }; snackbarContainer . showSnackbar ( data ); }); }); } else { sendDataToBackend (); } }); In Zeile 13 ist die Deklaration der globalen Variablen. In den Zeilen 53-61 wird das Bild in einen base64String umgewandelt (unter Verwendung der neuen Funktionen aus der utility.js ). F\u00fcr das Senden der Daten an das Backend wird nun f\u00fcr die image -Eigenschaft der Wert aus der globalen Variablen gelesen und das Gleiche passiert, wenn wir das Bild in die IndexedDB speichern, um es per Hintergrundsynchronisation an das Backend zu senden. Bei der Behandlung des sync -Events im Service Worker lesen wir nun auch diesen Wert f\u00fcr die image -Eigenschaft aus: public/sw.js 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : data . title , location : data . location , image : data . image , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) Das war es schon, wir k\u00f6nnen nun die Daten an das Backend senden. Zum Testen nehmen Sie ein Foto auf, geben einen Titel und eine Location ein und klicken den Speichern -Button. Dann lednet - hoffentlich - alles im Backend (\u00fcber den \"Umweg\" IndexedDB nat\u00fcrlich). Sie erhalten auch eine Push-Nachricht, dass die Daten gespeichert wurden. Wir implementieren nun noch den Fall, dass die Kamera nicht zur Verf\u00fcgung steht oder die MediaDevices -API oder der Kamerazugriff blockiert wurde und erm\u00f6glichen daf\u00fcr das Hochladen einer Bilddatei.","title":"Speichern des Bildes im Backend"},{"location":"devices/#bilddatei-hochladen","text":"Das Hochladen einer Bilddatei kennen wir ja bereits von unserem anderen Frontend. Hier ist nun auch schon alles vorbereitet und wir m\u00fcssen in der feed.js nur noch das change -Event f\u00fcr den upload -Button behandeln. Das sieht im Prinzip genau so aus, wie die Umwandlung des Canvas-Bildes, nur dass picture hier die hochgeladene Datei ist: public/src/js/feed.js 104 105 106 107 108 109 110 111 112 113 imagePicker . addEventListener ( 'change' , event => { let picture = event . target . files [ 0 ]; blobToBase64 ( picture ) . then ( res => { let base64StringWithTag = res ; base64String = base64StringWithTag . substr ( base64StringWithTag . indexOf ( ',' ) + 1 ) console . log ( 'base64String' , base64String ); } ) }); Zum Testen muss im Browser links von der URL auf das i geklickt und Kamera blockieren ausgew\u00e4hlt werden. dann \u00f6ffnet sich der File-Picker.","title":"Bilddatei hochladen"},{"location":"devices/#geolocation-api","text":"Die Geolocation-API wird von allen Browsern unterst\u00fctzt (sogar Internet Explorer). Es gibt viele Dokumentationen dar\u00fcber, z.B. hier , hier und hier . Die Verwendung ist recht einfach. In der index.html haben wir uns bereits einen Button erstellt, f\u00fcr den wir \"nur noch\" das click -Ereignis behandeln m\u00fcssen. public/index.html 83 84 85 86 < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > Zun\u00e4chst vereinfachen wir uns in der feed.js wieder den Zugriff auf den Button und den Spinner (Loader) und erstellen noch eine globale Variable fetchedLocation : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let base64String = '' ; let locationButton = document . querySelector ( '#location-btn' ); let locationLoader = document . querySelector ( '#location-loader' ); let fetchedLocation ; und wir setzen den Loader in der feed.css auf unsichtbar: public/src/js/feed.css 23 24 25 # create-post # pick-image , # create-post # location-loader { display : none ; } create-post #pick-image stand dort schon, wir haben nur noch den Selektor #create-post #location-loader hinzugef\u00fcgt. Wir f\u00fcgen in der feed.js die Behandlung des click -Ereignisses f\u00fcr den Location -Button hinzu und auch noch, wie f\u00fcr die Kamera, eine initializeLocation() -Funktion, in der gepr\u00fcft wird, ob die Geolocation -API \u00fcberhaupt im Browser verf\u00fcgbar ist: public/src/js/feed.js 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 locationButton . addEventListener ( 'click' , event => { if ( ! ( 'geolocation' in navigator )) { return ; } locationButton . style . display = 'none' ; locationLoader . style . display = 'block' ; navigator . geolocation . getCurrentPosition ( position => { locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; fetchedLocation = { latitude : position . coords . latitude , longitude : position . coords . longitude }; console . log ( 'current position: ' , fetchedLocation ); locationInput . value = 'In Berlin' ; document . querySelector ( '#manual-location' ). classList . add ( 'is-focused' ); }, err => { console . log ( err ); locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; alert ( 'Couldn\\'t fetch location, please enter manually!' ); fetchedLocation = null ; }, { timeout : 5000 }); }); function initializeLocation () { if ( ! ( 'geolocation' in navigator )) { locationButton . style . display = 'none' ; } } In der initializeLocation() -Funktion wird gepr\u00fcft, ob der Browser die Geolocation -API unterst\u00fctzt. Wenn nicht, wird der Location -Button versteckt. Wir haben trotzdem, sicherheitshalber, die Abfrage nochmal in die Behandlung des click -Ereignisses f\u00fcr diesen Button eingef\u00fcgt (Zeilen 19-20 ), obwohl dies nicht wirklich notwendig ist, da der Button nicht angeklickt werden kann, wenn die Geolocation -API nicht unterst\u00fctzt wird, da er nicht angezeigt wird. Wenn auf den Button geklickt wurde, setzen wir den Button selbst auf unsichtbar (Zeile 23 ) und den Spinner (Loader) auf sichtbar (Zeile 24 ). Zeile 26 zeigt den eigentlichen Zugriff auf die aktuelle Position. Dort wird die Funktion getCurrentPosition() der Geolocation -API aufgerufen. Wir \u00fcbergeben drei Parameter: der erste Parameter ist die (Callback-)Funktion, die die aktuelle Position zur\u00fcckgibt. Wenn diese Funktion ausgef\u00fchrt wird, setzen wir den Button wieder auf sichtbar (Zeile 27 ) und den Loader auf unsichtbar (Zeile 28 ). Die aktuelle Position position enth\u00e4lt die Eigenschaft coords , die die latitude und longitude als Werte enth\u00e4lt (siehe GeolocationPosition und GeolocationPosition ). Diese Position geben wir auf der Konsole aus (Zeile 30 ). Wir bef\u00fcllen das locationInput -Eingabefeld noch mit einem Dummy-Wert und fokussieren auf das Eingabefeld (Zeilen 31-32 ). der zweite Parameter ist eine Funktion, die ausgef\u00fchrt wird, wenn ein Fehler auftritt. M\u00f6gliche Fehler sind, dass im Browser der Zugriff auf die Position deaktiviert wurde, dass die Nutzerin den Zugriff auf die aktuelle Position blockiert hat oder dass die Position nicht \"schnell genug\" ermittelt werden konnte. Im Fehlerfall geben wir den Fehler auf der Konsole aus und schalten den Button wieder ein und den Loader wieder aus (Zeilen 34-36 ). der dritte Parameter ist ein JavaScript-Objekt mit options . Wir w\u00e4hlen hier nur eine einzige Option, n\u00e4mlich wie lange nach der aktuellen Position gesucht werden soll. In der Einstellung erfolgt der timeout nach 5 sek . Wir passen nun in der feed.js noch die beiden Funktionen openCreatePostModal() und closeCreatePostModal() an: public/src/js/feed.js 109 110 111 112 113 114 115 116 117 118 119 120 121 122 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); initializeLocation (); } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; } Wenn Sie die Anwenung nun starten, werden Sie gefragt, ob Sie die Abfrage nach Ihrem Standort zulassen oder blockieren wollen. Die meisten von Ihnen werden aber die Ortungsdienste ausgeschaltet haben. Dann ist auch die Abfrage zun\u00e4chst egal. Im Mac kann man diese (kurzzeitig, dann wieder ausschalten) \u00fcber Systemeinstellungen --> Sicherheit & Datenschutz --> Reiter Datenschutz --> Ortungsdienste f\u00fcr Google Chrome aktivieren. Wenn Sie die Positionsbestimmung zulassen, dann wird nach dem Klicken auf den Location -Button die aktuelle Position auf der Konsole eingegeben und im Formular erscheint unter Ort In Berlin . Wir machen nichts weiter mit der aktuellen Position. Es gibt viele M\u00f6glichkeiten, die jetzt noch ausprobiert werden k\u00f6nnten. Dazu geh\u00f6ren besipeilsweise: Wir k\u00f6nnten mithilfe der Google-Geolocation-API die Adresse ermitteln, die Google f\u00fcr eine gegebene Position ( longitude und latitude ) zur\u00fcckgibt. Dazu br\u00e4uchten wir aber auch einen API-Key von Google. Wir k\u00f6nnten das Gleiche mit der Nominatim-API f\u00fcr Open Street Map machen. Sie k\u00f6nnen den Service hier einmal ausprobieren , indem Sie Ihre latitude und longitude aus der Konsolenausgabe eingeben. Wir k\u00f6nnten OpenLayers verwenden, um die Position auf einer Karte anzuzeigen. Wir k\u00f6nnten die Datenbank erweitern und f\u00fcr alle Posts auch noch die Koordinaten der Position abspeichern und dann alle Posts auf einer Karte (mithilfe von OpenLayers + OpenStreetMap) visualisieren. ...","title":"Geolocation-API"},{"location":"devices/#letzte-verbesserungen","text":"Ein Nachteil in unserer Anwendung ist noch, dass die Kamera die ganze Zeit l\u00e4uft, wenn wir einmal den modalen Dialog zur Eingabe von daten ge\u00f6ffnet hatten. Wir sollten sie beim Ausschalten des modalen Dialoges schlie\u00dfen. Das Stoppen aller Videostreams hatten wir bereits f\u00fcr die Aufnahme des Fotos gemacht. Weil jedoch das Schlie\u00dfen und erneutes \u00d6ffnen der Kamera sehr ressourcenverbrauchend ist, laufen die Animationen f\u00fcr das \u00d6ffnen und Schlie\u00dfen des modalen Dialogs nicht mehr fl\u00fcssig. Wir lagern diese Animationen deshalb in einen asynchronen \"Thread\" aus (ist nicht wirklich ein neuer Thread): public/src/js/feed.js 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 function openCreatePostModal () { setTimeout ( () => { createPostArea . style . transform = 'translateY(0)' ; }, 1 ); initializeMedia (); initializeLocation (); } function closeCreatePostModal () { imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; if ( videoPlayer . srcObject ) { videoPlayer . srcObject . getVideoTracks (). forEach ( track => track . stop ()); } setTimeout ( () => { createPostArea . style . transform = 'translateY(100vH)' ; }, 1 ); } Mithilfe des timeout -\"Tricks\" wird der modale Dialog flie\u00dfend geschlossen und das Kamerazeichen im Tab des Browsers schlie\u00dft asynchron etwas sp\u00e4ter. Success Wir haben erfolgreich den Zugriff auf die Kamera (MediaDevices-API) und die Geolocation-API ausprobiert und in unsere Anwendung eingebunden. Die MediaDevices-API bietet neben der video -Eigenschaft auch noch die audio -Eigenschaft, um das Mikrofon zu verwenden. Mit dem Zugriff auf Kamera und Position haben wir unsere letzte progressive Funktionalit\u00e4t f\u00fcr dieses Semester hinzugef\u00fcgt! Geschafft!","title":"Letzte Verbesserungen"},{"location":"einfuehrung/","text":"Einf\u00fchrung \u00b6 In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt. Webanwendungen vs. native Apps \u00b6 Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang PWAs vs. SPAs \u00b6 Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048game.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-) PWA Checklist \u00b6 Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier . Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"Einf\u00fchrung"},{"location":"einfuehrung/#einfuhrung","text":"In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt.","title":"Einf\u00fchrung"},{"location":"einfuehrung/#webanwendungen-vs-native-apps","text":"Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang","title":"Webanwendungen vs. native Apps"},{"location":"einfuehrung/#pwas-vs-spas","text":"Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren.","title":"PWAs vs. SPAs"},{"location":"einfuehrung/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048game.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-)","title":"Lighthouse"},{"location":"einfuehrung/#pwa-checklist","text":"Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier . Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"PWA Checklist"},{"location":"frontend/","text":"Frontend \u00b6 Um die Dateneingabe zu vereinfachen, erstellen wir uns ein einfaches Frontend mithilfe von Angular . Wie beim Backend auch, erstellen wir dieses Frontend Schritt f\u00fcr Schritt von Beginn an. Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Projekt erstellen - ng new \u00b6 Um ein Angular-Projekt zu erstellen, wird der Befehl ng new <projekt> verwenden. Wir nennen das Projekt frontend und geben deshalb ng new frontend ins Terminal ein. Die Frage nach stricter type checking beantworten wir mit N , also Enter . Das macht unser Leben etwas leichter. Fortgeschrittene Angular-Programmiererinnen k\u00f6nnen aber auch gerne mit y antworten. (Die neue Angular CLI-Version 12 fragt danach nicht mehr, sondern verwendet das strikte Typesetting einfach, das macht es an einigen Stellen etwas komplizierter). Die Frage nach routing beantworten wir mit y , d.h. hier w\u00e4hlen wir nicht die Standardantwort! Routing erl\u00e4utern wir gleich noch. Bei den Stylesheets entscheiden wir uns f\u00fcr CSS , k\u00f6nnen also einfach mit Enter best\u00e4tigen. Jetzt sollte das Projekt eigentlich fehlerfrei erstellt worden sein. Aktuell wirft die Angular CLi jedoch einen Fehler, der vielleicht bei einigen von Ihnen auch auftritt Stackoverflow : \u2839 Installing packages ( npm ) ...npm ERR! code ERESOLVE npm ERR! ERESOLVE unable to resolve dependency tree npm ERR! npm ERR! While resolving: frontend@0.0.0 npm ERR! Found: jasmine-core@3.6.0 npm ERR! node_modules/jasmine-core npm ERR! dev jasmine-core@ \"~3.6.0\" from the root project npm ERR! npm ERR! Could not resolve dependency: npm ERR! peer jasmine-core@ \">=3.7.1\" from karma-jasmine-html-reporter@1.6.0 npm ERR! node_modules/karma-jasmine-html-reporter npm ERR! dev karma-jasmine-html-reporter@ \"^1.5.0\" from the root project npm ERR! npm ERR! Fix the upstream dependency conflict, or retry npm ERR! this command with --force, or --legacy-peer-deps npm ERR! to accept an incorrect ( and potentially broken ) dependency resolution. npm ERR! npm ERR! See /Users/jornfreiheit/.npm/eresolve-report.txt for a full report. npm ERR! A complete log of this run can be found in : npm ERR! /Users/jornfreiheit/.npm/_logs/2021-05-28T06_28_54_229Z-debug.log \u2716 Package install failed, see above. The Schematic workflow failed. See above. In dem oben gezeigten Stackoverflow -Post wird vorgeschlagen, in der package.json die Versionsnummern f\u00fcr \"jasmine-core\" von 3.6.0 auf 3.7.1 und f\u00fcr \"karma-jasmine-html-reporter\" von 1.5.0 auf 1.6.0 zu \u00e4ndern und dann npm install im Projektordner auszuf\u00fchren. Das klappt auch (klappte bei mir). Die package.json sieht dann also so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 { \"name\" : \"frontend\" , \"version\" : \"0.0.0\" , \"scripts\" : { \"ng\" : \"ng\" , \"start\" : \"ng serve\" , \"build\" : \"ng build\" , \"test\" : \"ng test\" , \"lint\" : \"ng lint\" , \"e2e\" : \"ng e2e\" }, \"private\" : true , \"dependencies\" : { \"@angular/animations\" : \"~11.0.0\" , \"@angular/common\" : \"~11.0.0\" , \"@angular/compiler\" : \"~11.0.0\" , \"@angular/core\" : \"~11.0.0\" , \"@angular/forms\" : \"~11.0.0\" , \"@angular/platform-browser\" : \"~11.0.0\" , \"@angular/platform-browser-dynamic\" : \"~11.0.0\" , \"@angular/router\" : \"~11.0.0\" , \"rxjs\" : \"~6.6.0\" , \"tslib\" : \"^2.0.0\" , \"zone.js\" : \"~0.10.2\" }, \"devDependencies\" : { \"@angular-devkit/build-angular\" : \"~0.1100.1\" , \"@angular/cli\" : \"~11.0.1\" , \"@angular/compiler-cli\" : \"~11.0.0\" , \"@types/jasmine\" : \"~3.6.0\" , \"@types/node\" : \"^12.11.1\" , \"codelyzer\" : \"^6.0.0\" , \"jasmine-core\" : \"~3.7.1\" , \"jasmine-spec-reporter\" : \"~5.0.0\" , \"karma\" : \"~5.1.0\" , \"karma-chrome-launcher\" : \"~3.1.0\" , \"karma-coverage\" : \"~2.0.3\" , \"karma-jasmine\" : \"~4.0.0\" , \"karma-jasmine-html-reporter\" : \"^1.6.0\" , \"protractor\" : \"~7.0.0\" , \"ts-node\" : \"~8.3.0\" , \"tslint\" : \"~6.1.0\" , \"typescript\" : \"~4.0.2\" } } Die Anweisung npm install im Projekte-Ordner f\u00fchrt dazu, dass alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules -Verzeichnis erstellt. Siehe z.B. hier . Sollten Sie aufgefordert werden, npm audit fix oder npm audit fix --force auszuf\u00fchren, weil es noch high vulnerabilities gibt, dann f\u00fchren Sie einfach npm audit fix --force aus. Sollte auch das noch zu Fehlern f\u00fchren, k\u00f6nnen Sie auch npm install --legacy-peer-deps versuchen. Danach geben Sie ng serve ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B. \u280b Generating browser application bundles...**************************************************************************************** This is a simple server for use in testing or debugging Angular applications locally. It hasn't been reviewed for security issues. DON'T USE IT FOR PRODUCTION! **************************************************************************************** Compiling @angular/core : es2015 as esm2015 Compiling @angular/common : es2015 as esm2015 Compiling @angular/platform-browser : es2015 as esm2015 Compiling @angular/router : es2015 as esm2015 Compiling @angular/platform-browser-dynamic : es2015 as esm2015 \u2714 Browser application bundle generation complete. Initial Chunk Files | Names | Size main.js | main | 362.07 kB polyfills.js | polyfills | 44.15 kB runtime.js | runtime | 1.09 kB styles.css | styles | 0 bytes | Initial Total | 407.31 kB Build at: 2021-05-28T12:19:12.354Z - Hash: b1611690e9f20b1506e4 - Time: 28973ms ** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ ** \u2714 Compiled successfully. \u2714 Browser application bundle generation complete. 4 unchanged chunks Build at: 2021-05-28T12:19:13.393Z - Hash: 52a9999d2b3b3c4923f4 - Time: 643ms \u2714 Compiled successfully. Wenn Sie aber einmal ng serve ausgef\u00fchrt haben, wird im Browser automatisch auf die \u00c4nderungen reagiert. Sie m\u00fcssen also nicht jedes Mal neu ng serve eingeben, bzw. nicht jedes Mal neu auf das gr\u00fcne Dreieck in Ihrer IDE klicken: \u00d6ffnen Sie Ihren Browser und geben Sie als URL http://localhost:4200 ein. Folgende Seite sollte erscheinen: \u00d6ffnen Sie das Projekt in einer IDE. Die Projektstruktur ist wie folgt: README.md angular.json e2e karma.conf.js node_modules package-lock.json package.json src | -- app | | -- app-routing.module.ts | | -- app.component.css | | -- app.component.html | | -- app.component.spec.ts | | -- app.component.ts | | -- app.module.ts | | -- assets | -- environments | -- favicon.ico | -- index.html | -- main.ts | -- polyfills.ts | -- styles.css | -- test.ts tsconfig.app.json tsconfig.json tsconfig.spec.json tslint.json Die meiste Arbeit wird im src -Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung. Darin der wichtigste Ordner ist der app -Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen. In dem assets -Ordner werden Bilder, Icons und Daten abgelegt. Der node_modules -Ordner enth\u00e4lt alle ben\u00f6tigten 3 rd -party-libraries. Welche das sind, wird in der Datei package.json als dependencies definiert. Mithilfe des Befehls npm install werden alle ben\u00f6tigten Module dem Ordner node_modules hinzugef\u00fcgt. Der Ordner environments enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development - und den production -Modus. Wir entwickeln zun\u00e4chst im development -Modus. favicon.ico ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes. index.html ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application , d.h. es wird eine einzige HTML-Seite geladen ( index.html ) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt. styles.css enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen. Die app.component.* -Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML -, einer CSS - und einer TypeScript -Datei (auch noch eine *.spec.ts , aber die interessiert zun\u00e4chst nicht). \u00d6ffnen Sie in Ihrer IDE die Datei app.component.html . L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> die Zeile <h1>This is app</h1> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL localhost:4200 an. Es erscheint der folgende Inhalt: Single Page Application \u00b6 Angular ist, wie bereits erw\u00e4hnt, ein Framework zur Erstellung einer Single Page Application (SPA) . Das bedeutet, dass die gesamte Anwendung aus einer einzigen HTML -Datei besteht, der src/index.html -Datei und dass in diese Datei Inhalte asynchron eingespeist werden. Dieses Einspeisen erfolgt durch JavaScript. Die hier geladene Seite ist die index.html , die in unserem Projekte-Ordner frontend liegt. Sie sieht so aus: index.html <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < app-root ></ app-root > </ body > </ html > Das Element <app-root> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor ). In Angular sind die einzelnen Inhalte , die eingespeist werden, Komponenten . Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent . Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element. Eine Komponente besteht aus einer View ( Template ) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht. Neben der *.html - und der *.ts -Datei einer Komponente gibt es auch noch die *.css -Datei (also z.B. app.component.css ). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen. Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator @Component verwendet. Decoratoren erkennt man am f\u00fchrenden @ -Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier AppComponent - app.component.ts ): @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'book-app' ; } Der Selektor gibt an, dass \u00fcberall dort, wo app-root als Elementselektor <app-root> </app-root> verwendet wird, das in app.component.html definerte Template eingesetzt wird. Angenommen, in app.component.html ist der HTML-Code: < h1 > This is app </ h1 > definiert. Dann wird dieser Code als Inhalt in das HTML-Element <app-root> </app-root> eingesetzt: < app-root > < h1 > This is app </ h1 > </ app-root > Zu dem Komponentenselektor <router-outlet></router-outlet> kommen wir gleich noch. Der spielt beim Routing eine Rolle. Wir erzeugen uns zun\u00e4chst eine Navigationskomponente mithilfe von Angular Material . Angular Material und Schematics \u00b6 Angular Material ist ein CSS- (und JavaScript)-Framework f\u00fcr eine Angular-Anwendung, \u00e4hnlich wie Bootstrap . Wir verwenden hier Angular Material und f\u00fcgen es mit dem Befehl ng add @angular/material unserer Anwendung hinzu. Sie werden nach unterschiedlichen Farbkombinationen gefragt, da k\u00f6nnen Sie w\u00e4hlen, was Ihnen beliebt. Sie k\u00f6nnen auch alle Fragen einfach mit Enter beantworten und somit die Standardvorgaben \u00fcbernehmen. Es erfolgt eine Ausgabe in der Art \u2139 Using package manager: npm \u2714 Found compatible package version: @angular/material@12.0.2. \u2714 Package information loaded. The package @angular/material@12.0.2 will be installed and executed. Would you like to proceed? Yes \u2714 Package successfully installed. ? Choose a prebuilt theme name, or \"custom\" for a custom theme: Indigo/Pink [ Preview: https://material.angular.io?them e = indigo-pink ] ? Set up global Angular Material typography styles? No ? Set up browser animations for Angular Material? Yes UPDATE package.json ( 1262 bytes ) \u2714 Packages installed successfully. UPDATE src/app/app.module.ts ( 502 bytes ) UPDATE angular.json ( 3715 bytes ) UPDATE src/index.html ( 553 bytes ) UPDATE src/styles.css ( 181 bytes ) Eine n\u00fctzliche Sache bei Angular Material sind Schematics . Das sind vordefinierte Komponenten, die wir verwenden k\u00f6nnen. Wir w\u00e4hlen zun\u00e4chst die Navigations -Komponente, d.h. wir erstellen mithilfe des Navigations-Schmeas eine neue Komponente nav mit dem folgenden Befehl: ng generate @angular/material:navigation nav in dem Projektordner erscheint im /src/app -Ordner eine neuer Ordner nav , der die Dateien nav.component.css , nav.component.html , nav.component.spec.ts , und nav.component.ts . enth\u00e4lt. Es wurde also eine neue Angular-Komponente erzeugt. Wenn wir die nav.component.ts \u00f6ffnen, 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Component } from '@angular/core' ; import { BreakpointObserver , Breakpoints } from '@angular/cdk/layout' ; import { Observable } from 'rxjs' ; import { map , shareReplay } from 'rxjs/operators' ; @ Component ({ selector : 'app-nav' , templateUrl : './nav.component.html' , styleUrls : [ './nav.component.css' ] }) export class NavComponent { isHandset$ : Observable < boolean > = this . breakpointObserver . observe ( Breakpoints . Handset ) . pipe ( map ( result => result . matches ), shareReplay () ); constructor ( private breakpointObserver : BreakpointObserver ) {} } dann sehen wir in Zeile 7 , dass der Komponentenselektor dieser Komponente app-nav ist. Das hei\u00dft, wenn wir nun in app.component.html diesen Komponentenselektor einf\u00fcgen, dann wird an diese Stelle die neue Komponente eingef\u00fcgt: app.component.html 1 2 3 < app-nav ></ app-nav > < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Wenn man nun im Browser (nach ng server - falls noch nicht geschehen) http://localhost:4200/ eingibt, dann sieht man die Navigationskomponente, aber nicht mehr die \u00dcberschrift <h1>This is app</h1> (und bei <router-outlet></router-outlet> ist derzeit eh noch nichts zu sehen). Wir nehmen diese beiden Zeilen aus der app.component.html heraus app.component.html 1 < app-nav ></ app-nav > und f\u00fcgen Sie in die nav.component.html ein: nav/nav.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item href = \"#\" > Link 1 </ a > < a mat-list-item href = \"#\" > Link 2 </ a > < a mat-list-item href = \"#\" > Link 3 </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > frontend </ span > </ mat-toolbar > <!-- Add Content Here --> < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > Neue Komponente und Routing \u00b6 Wir erstellen nun eine weitere Komponente und binden diese \u00fcber Routing ein. Die neue Komponente soll create hei\u00dfen. Wir nutzen dazu den ng generate component <name-der-komponente> -Befehl, der auch abgek\u00fcrzt ng g c <name-der-komponente> werden kann. ng g c create Es entsteht ein /src/app/create -Ordner, der die vier Dateien create.component.css , create.component.html , create.component.spec.ts und create.component.ts enth\u00e4lt. In diese Komponente wollen wir sp\u00e4ter ein Formular hinzuf\u00fcgen, mit dessen Hilfe wir neue Daten eingeben k\u00f6nnen. Zun\u00e4chst binden wir diese Komponente in unsere Anwendung ein. Dieses Mal erfolgt die Einbindung jedoch nicht statisch \u00fcber den Komponentenselektor app-create , sondern dynamisch \u00fcber eine Route . Das bedeutet, dass wenn die Route http://localhost:4200/create in den Browser eingegeben wird, dann soll an die Stelle des dynamischen Komponenetenselektors <router-outlet></router-outlet> die CreateComponent eingebunden werden. dazu m\u00fcssen wir die Route in der app-routing.module.ts definieren: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { CreateComponent } from './create/create.component' ; const routes : Routes = [ { path : 'create' , component : CreateComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Dazu wird in dem Routes -Array (Zeilen 5-7 ) die neue Route definiert, indem der path angegeben wird ( create ) und welche Komponente f\u00fcr diesen Pfad aufgerufen werden soll ( CreateComponent ). Diese Komponente wird dazu in die app-routing.module.ts importiert (Zeile 3 ). Wenn wir nun in den Browser http://localhost:4200/create eingeben, dann wird diese Komponente in den <routing-outlet> -Selektor eingef\u00fcgt (also unterhalb der \u00dcberschrift <h1>This is app</h1> ). Es erscheint , da die View der CreateComponent derzeit nur aus dem Absatz <p>create works!</p> besteht (siehe create.component.html ). Um diese Route auch \u00fcber das Navigationsmen\u00fc aufrufen zu k\u00f6nnen, \u00e4ndern wir unsere nav.component.html : nav/nav.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item routerLink = \"/create\" routerLinkActive = \"active\" > Create </ a > < a mat-list-item href = \"#\" > Link 2 </ a > < a mat-list-item href = \"#\" > Link 3 </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > frontend </ span > </ mat-toolbar > <!-- Add Content Here --> < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > Routen werden also nicht \u00fcber href , sondern \u00fcber routerLink aufgerufen (siehe hier ). Das Attribut routerLinkActive erlaubt, CSS-Klassen f\u00fcr \"aktive\", also klickbare Links hinzuzuf\u00fcgen (siehe hier ). Weitere Details zum Routing in Angular finden Sie z.B. hier . Ein Formular erstellen \u00b6 Die Erstellung eines Formulars besteht in Angular aus zwei Teilschritten: Es wird in der .ts -Klasse eine FormGroup erstellt, die mehrere FormControl -Elemente enth\u00e4lt. FromGroup entspricht dem Formular und FormControl kann z.B. eine Eingabefeld in diesem Formular sein. Bei der Erstellung einer FormGroup hilft der FormBuilder . Es wird in der .html -Datei das Formular angelegt, wobei dem Formular und den einzelnen Eingabefeldern die CSS-Klassen des Frameworks zugeordnet werden, das verwendet wird (hier also Material ). Bevor uns diese Schritte genauer anschauen, erledigen wir erst eine Sache, die h\u00e4ufig vergessen wird. Bei dem Formular, das wir erstellen, handelt es sich um eine reactive form . Wir m\u00fcssen dazu das RactiveFormsModule in die app.module.ts einf\u00fcgen (ob FormsModule auch, wei\u00df ich immer nicht genau, aber es schadet nichts). app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , FormsModule , ReactiveFormsModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Wir schauen uns zun\u00e4chst den ersten Schritt anhand der create.component.ts an. Diese ist nach Erstellung noch \"leer\": /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { constructor () { } ngOnInit () : void { } } Nachdem wir das Formular hinzugef\u00fcgt haben, hat die create.component.ts folgendes Aussehen: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import { Component , OnInit } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; constructor ( private fb : FormBuilder ) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } } In zeile 2 werden die ben\u00f6tigten Klassen importiert. Der Klasse wird per dependency injection der FormBuilder hinzugef\u00fcgt (Zeile 12 ). Die eigentliche FormGroup (hier namens formGroup ) wird in den Zeilen 17-20 mithilfe des FormBuilder und dessen group() -Funktion erstellt. Dabei werden jedem FormControl -Element zun\u00e4chst kein value ( '' ), aber ein Validator hinzugef\u00fcgt, der daf\u00fcr verantwortlich ist, zu erkennen, ob das Feld (korrekt) ausgef\u00fcllt wurde. Die get() -Funktionen f\u00fcr die einzelnen FormControl -Elemente erm\u00f6glichen den Zugriff auf diese. Nun erstellen wir das Formular in der create.component.html -Datei: /create/create.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 < div class = \"container\" novalidate > < div class = \"form-container\" > < h3 > Post hinzuf\u00fcgen </ h3 > < form [ formGroup ]=\" formGroup \" > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post title </ mat-label > < input matInput placeholder = \"Titel\" formControlName = \"inp_title\" /> < mat-error * ngIf = \"!inp_title.valid && inp_title.touched\" > < span * ngIf = \"inp_title.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post location </ mat-label > < input matInput placeholder = \"Location\" formControlName = \"inp_location\" /> < mat-error * ngIf = \"!inp_location.valid && inp_location.touched\" > < span * ngIf = \"inp_location.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post image </ mat-label > < input matInput placeholder = \"Image file\" formControlName = \"inp_image\" /> < mat-error * ngIf = \"!inp_image.valid && inp_image.touched\" > < span * ngIf = \"inp_image.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > </ form > < button mat-stroked-button ( click )=\" onSubmit ()\" color = \"default\" class = \"button\" [ disabled ]=\"! formGroup . valid \" > Add post </ button > </ div > </ div > Wir haben zun\u00e4chst drei Eingabefelder, alle drei jeweils auch mit einem Label. Wir erhalten jedoch noch einige Fehler, da die passenden Module noch nicht in der app.module.ts importiert sind, z.B. MatFormField . Das m\u00fcssen wir zun\u00e4chst nachholen: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { MatInputModule } from '@angular/material/input' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , MatFormFieldModule , MatInputModule , FormsModule , ReactiveFormsModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Jetzt sollte es in unserer create.component.html nur noch einen Fehler geben, n\u00e4mlich die onSubmit() -Funktion ist noch nicht implementiert. Wir f\u00fcgen eine erste simple Implementierung der create.component.ts hinzu: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import { Component , OnInit } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; constructor ( private fb : FormBuilder ) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } onSubmit () : void { const post = { title : this . inp_title . value , location : this . inp_location . value , image : this . inp_image . value } console . log ( 'post : ' , post ); } } Die drei Werte der Eingabefelder werden ausgelesen und einem JavaScript-Objekt post hinzugef\u00fcgt. Dieses wird auf der Konsole ausgegeben. Sollte es in Ihrer create.component.html -Datei nun immer noch Fehler geben, dann liegt es daran, dass bei diesen Zugriffen inp_image.errors.required (3x f\u00fcr alle 3 FormControl-Elemente) das strikte Typesetting sagt, dass inp_image.errors eventuell null sein k\u00f6nnte und man dann gar nicht auf die Eigenschaft required zugreifen k\u00f6nnte. Daf\u00fcr k\u00f6nnen Sie den ? -Operator verwenden, das sieht dann so aus: < span * ngIf = \"inp_title.errors?.required\" > This field is mandatory. </ span > < span * ngIf = \"inp_location.errors?.required\" > This field is mandatory. </ span > < span * ngIf = \"inp_image.errors?.required\" > This field is mandatory. </ span > Das Formular ist f\u00fcr title und location bereits passend f\u00fcr die Eingabe eines post -Datensatzes. Allerdings wollen wir f\u00fcr das image ja eine Bilddatei hochladen, die dann in das base64 -Format umgewandelt werden soll. Dazu m\u00fcssen wir das image -Eingabefeld \u00e4ndern. Leider stellt Material nicht direkt ein File upload -Eingabeelement zur Verf\u00fcgung. Das folgende Vorgehen wurde deshalb hier entnommen und angepasst. Die create.component.html sieht nun so aus: /create/create.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 < div class = \"container\" novalidate > < div class = \"form-container\" > < h3 > Post hinzuf\u00fcgen </ h3 > < form [ formGroup ]=\" formGroup \" > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post title </ mat-label > < input matInput placeholder = \"Titel\" formControlName = \"inp_title\" /> < mat-error * ngIf = \"!inp_title.valid && inp_title.touched\" > < span * ngIf = \"inp_title.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post location </ mat-label > < input matInput placeholder = \"Location\" formControlName = \"inp_location\" /> < mat-error * ngIf = \"!inp_location.valid && inp_location.touched\" > < span * ngIf = \"inp_location.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field inputbreit\" appearance = \"standard\" > <!-- Readonly Input to show File names --> < input matInput readonly id = \"file_name\" placeholder = \"Browse image file\" /> <!-- Fetch selected filed on change --> < input type = \"file\" id = \"fileUpload\" ( change )=\" uploadFileEvt ($ event )\" formControlName = \"inp_image\" multiple = \"multiple\" accept = \"image/*\" /> </ mat-form-field > </ form > < button mat-stroked-button ( click )=\" onSubmit ()\" color = \"default\" class = \"button\" [ disabled ]=\"! formGroup . valid \" > Add post </ button > </ div > </ div > In der create.component.ts f\u00fcgen wir die uploadFileEvt() -Funktion hinzu, der das change -Event \u00fcbergeben wird. Dieses Objekt enth\u00e4lt f\u00fcr den input type=\"file\" unter der target -Eigenschaft ein files -Array, in dem alle ausgew\u00e4hlten Dateien enthalten sind. Die erste Implementierung liest diesen Wert aus: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import { Component , OnInit , ViewChild , ElementRef } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; imageBase64 = '' ; constructor ( private fb : FormBuilder ) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } onSubmit () : void { const post = { title : this . inp_title . value , location : this . inp_location . value , image : this . imageBase64 } console . log ( 'post : ' , post ); } uploadFileEvt ( imgFile : any ) : void { console . log ( 'upload' , imgFile . target . files ); } } Sollte es in Ihrer create.component.ts -Datei nun immer noch Fehler geben, dann liegt es daran, dass formGroup: FormGroup; nur deklariert, nicht jedoch auch initialisiert wird (striktes Typesetting). Das k\u00f6nnen Sie einfach umgehen, indem Sie sagen, dass Sie sich aber ganz sicher sind, dass es beim Initialisieren der Komponente initialisiert wird. Dazu f\u00fcgt man ein ! hinter den Variablennamen ein: formGroup !: FormGroup ; Wir erweitern diese Funktion nun noch um das Auslesen der Datei in einen FileReader . Damit k\u00f6nnen in Webanwendungen Dateien eingelesen werden. Das onload -Ereignis wird ausgel\u00f6st, wenn die Inhalte der Dateien verf\u00fcgbar sind, wenn die Datei also eingelesen wurde. Dieser Inhalt wird in ein Image -Objekt umgewandelt, da f\u00fcr ein Image die Quelle des Bildes das base64 -Format ist. /create/create.component.ts 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 uploadFileEvt ( imgFile : any ) : void { console . log ( 'upload' , imgFile . target . files ); if ( imgFile . target . files && imgFile . target . files [ 0 ]) { const reader = new FileReader (); reader . onload = ( e : any ) => { const image = new Image (); image . src = e . target . result ; image . onload = () => { // Return Base64 Data URL const imgBase64Path = e . target . result ; console . log ( 'base64' , imgBase64Path ); this . imageBase64 = imgBase64Path . substr ( imgBase64Path . indexOf ( ',' ) + 1 ); }; }; reader . readAsDataURL ( imgFile . target . files [ 0 ]); } } Dieser imgBase64Path beginnt jedoch stets mit data:image/png;base64 . Diesen Substring wollen wir entfernen, da er nicht zu den eigentlichen Bilddaten geh\u00f6rt (die in der Datenbank gespeichert werden). Der Aufbau dieses imgBase64Path -Strings ist wie folgt: data:image/png ; base64 , Bilddaten also der genannte Teilstring, gefolgt von Komma, gefolgt von den Bilddaten. In Zeile 61 wird deshalb der Teilstring extrahiert, der hinter dem ersten Komma beginnt - somit alle Bilddaten. Diese werden gespeichert. In der onSubmit() -Funktion nutzen wir als Wert der Eigenschaft image bereits diesen verbleibenden String. Das post -Objekt ist somit vollst\u00e4ndig. Das Formular in der create.component.html -Datei wurde noch mit einigen eigenen CSS-Klassen versehen. Die Definitionen dieser Klassen sind hier: /create/create.component.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 . vertikal { display : flex ; flex-direction : column ; align-items : flex-start ; margin : 1 % ; } . formbreit { min-width : 150 px ; max-width : 500 px ; width : 100 % ; } . inputbreit { width : 100 % ; } # fileUpload { position : absolute ; z-index : 9 ; opacity : 0 ; height : 100 % ; width : 100 % ; left : 0 px ; top : 0 px ; cursor : pointer ; } Das Frontend mit dem Backend verbinden \u00b6 Um das Frontend mit dem Backend zu verkn\u00fcpfen, erstellen wir uns einen Service . Ein Service in Angular ist eine TypeScript-Klasse, die einen bestimmten Zweck erf\u00fcllt und typischerweise allen Komponenten zur Verf\u00fcgung steht. Zu einem Service geh\u00f6rt also keine View. In Angular wird ein Service mittels ng generate service <name-des-services> erstellt - kurz ng g s <name-des-services> . Wir nennen unseren Service backend : ng g s backend Es entsteht eine Datei backend.service.ts : backend.service.ts 1 2 3 4 5 6 7 8 9 import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class BackendService { constructor () { } } In diesem Service verwenden wir zwei Angular-Module, um mittels HTTP auf das Backend zuzugreifen: das Modul HttpClient f\u00fcr die HTTP-Anfragen und das Modul HttpHeaders , um die HTTP- headers zu konfigurieren. Wir wollen an dieser Stelle nur die Funktion implementieren, mit der wir einen neuen Datensatz an das Backend \u00fcbertragen und dabei den Endpunkt http://localhost:3000/posts mittels einer POST -Anfrage ansprechen. Diese Implementierung sieht wie folgt aus: backend.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { Injectable } from '@angular/core' ; import { HttpClient , HttpHeaders } from '@angular/common/http' ; @ Injectable ({ providedIn : 'root' }) export class BackendService { apiUrl = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } public addPost ( post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiUrl } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' , }), }) . toPromise (); } } Der HttpClient bietet Funktionalit\u00e4ten f\u00fcr die Verwendung des HTTP-Protokolls in Angular. Wir verwenden hier die post -Funktion. Darin \u00fcbergeben wir die URL des Backends udn den Datensatz post . In den headers konfigurieren wir noch, dass wir ein JSON \u00fcbergeben und auch ein JSON zur\u00fcckerwarten. Wir verwenden hier einen Typen Post , der noch nicht existiert. Wir f\u00fcgen dazu ein Interface in unseren Service ein (k\u00f6nnte auch in einer extra Datei sein), in dem wir die Struktur eines Post -Objektes definieren (entspricht der Struktur, die wir auch in der Datenbank daf\u00fcr verwendet haben). backend.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { Injectable } from '@angular/core' ; import { HttpClient , HttpHeaders } from '@angular/common/http' ; export interface Post { id : number ; title : string ; location : string ; image : string ; } @ Injectable ({ providedIn : 'root' }) export class BackendService { apiUrl = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } public addPost ( post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiUrl } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' , }), }) . toPromise (); } } Nun k\u00f6nnen wir diesen Service in unseren Komponenten verwenden. Dazu binden wir ihn per dependency injection in die create.component.ts ein und rufen dort in der onSubmit() -Funktion die Funktion addPost() auf: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import { Component , OnInit , ViewChild , ElementRef } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; import { BackendService } from '../backend.service' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; imageBase64 : '' ; constructor ( private fb : FormBuilder , private bs : BackendService ,) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } onSubmit () : void { const post = { id : null , title : this . inp_title . value , location : this . inp_location . value , image : this . imageBase64 } console . log ( 'post : ' , post ); await this . bs . addPost ( post ); } uploadFileEvt ( imgFile : any ) : void { console . log ( 'upload' , imgFile . target . files ); if ( imgFile . target . files && imgFile . target . files [ 0 ]) { const reader = new FileReader (); reader . onload = ( e : any ) => { const image = new Image (); image . src = e . target . result ; image . onload = () => { // Return Base64 Data URL const imgBase64Path = e . target . result ; console . log ( 'base64' , imgBase64Path ); this . imageBase64 = imgBase64Path . substr ( imgBase64Path . indexOf ( ',' ) + 1 ); }; }; reader . readAsDataURL ( imgFile . target . files [ 0 ]); } } } Wichtig ist, dass wir nicht vergessen d\u00fcrfen, das HttpClientModule in der app.module.ts zu importieren: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { MatInputModule } from '@angular/material/input' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; import { HttpClientModule } from '@angular/common/http' ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , HttpClientModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , MatFormFieldModule , MatInputModule , FormsModule , ReactiveFormsModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Somit sollte unser Frontend fertig und an das Backend angebunden sein. Um es vollst\u00e4ndig zu testen, starten wir das Backend ! Geben Sie im Frontend ( /create ) Daten ein und schicken Sie das Formular ab. Die Datenbank sollte mit den neuen Daten bef\u00fcllt sein - das k\u00f6nnen Sie unter phpmyadmin \u00fcberpr\u00fcfen. Success Wir haben uns zwar in Sachen Progressive Web Apps nicht wirklich weiterentwickelt, aber wir haben nun erstmal einige n\u00fctzliche Hilfsmittel geschaffen, um eine \"gr\u00f6\u00dfere\" Anwendung sp\u00e4ter progressive zu gestalten. Es gibt nun eine Datenbank, die Bilder speichern kann und das passende Backend zur Anbindung der Datenbank. Zur Erleichterung der Dateneingabe in die Datenbank haben wir uns auch ein Frontend erstellt.","title":"Frontend"},{"location":"frontend/#frontend","text":"Um die Dateneingabe zu vereinfachen, erstellen wir uns ein einfaches Frontend mithilfe von Angular . Wie beim Backend auch, erstellen wir dieses Frontend Schritt f\u00fcr Schritt von Beginn an. Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only )","title":"Frontend"},{"location":"frontend/#projekt-erstellen-ng-new","text":"Um ein Angular-Projekt zu erstellen, wird der Befehl ng new <projekt> verwenden. Wir nennen das Projekt frontend und geben deshalb ng new frontend ins Terminal ein. Die Frage nach stricter type checking beantworten wir mit N , also Enter . Das macht unser Leben etwas leichter. Fortgeschrittene Angular-Programmiererinnen k\u00f6nnen aber auch gerne mit y antworten. (Die neue Angular CLI-Version 12 fragt danach nicht mehr, sondern verwendet das strikte Typesetting einfach, das macht es an einigen Stellen etwas komplizierter). Die Frage nach routing beantworten wir mit y , d.h. hier w\u00e4hlen wir nicht die Standardantwort! Routing erl\u00e4utern wir gleich noch. Bei den Stylesheets entscheiden wir uns f\u00fcr CSS , k\u00f6nnen also einfach mit Enter best\u00e4tigen. Jetzt sollte das Projekt eigentlich fehlerfrei erstellt worden sein. Aktuell wirft die Angular CLi jedoch einen Fehler, der vielleicht bei einigen von Ihnen auch auftritt Stackoverflow : \u2839 Installing packages ( npm ) ...npm ERR! code ERESOLVE npm ERR! ERESOLVE unable to resolve dependency tree npm ERR! npm ERR! While resolving: frontend@0.0.0 npm ERR! Found: jasmine-core@3.6.0 npm ERR! node_modules/jasmine-core npm ERR! dev jasmine-core@ \"~3.6.0\" from the root project npm ERR! npm ERR! Could not resolve dependency: npm ERR! peer jasmine-core@ \">=3.7.1\" from karma-jasmine-html-reporter@1.6.0 npm ERR! node_modules/karma-jasmine-html-reporter npm ERR! dev karma-jasmine-html-reporter@ \"^1.5.0\" from the root project npm ERR! npm ERR! Fix the upstream dependency conflict, or retry npm ERR! this command with --force, or --legacy-peer-deps npm ERR! to accept an incorrect ( and potentially broken ) dependency resolution. npm ERR! npm ERR! See /Users/jornfreiheit/.npm/eresolve-report.txt for a full report. npm ERR! A complete log of this run can be found in : npm ERR! /Users/jornfreiheit/.npm/_logs/2021-05-28T06_28_54_229Z-debug.log \u2716 Package install failed, see above. The Schematic workflow failed. See above. In dem oben gezeigten Stackoverflow -Post wird vorgeschlagen, in der package.json die Versionsnummern f\u00fcr \"jasmine-core\" von 3.6.0 auf 3.7.1 und f\u00fcr \"karma-jasmine-html-reporter\" von 1.5.0 auf 1.6.0 zu \u00e4ndern und dann npm install im Projektordner auszuf\u00fchren. Das klappt auch (klappte bei mir). Die package.json sieht dann also so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 { \"name\" : \"frontend\" , \"version\" : \"0.0.0\" , \"scripts\" : { \"ng\" : \"ng\" , \"start\" : \"ng serve\" , \"build\" : \"ng build\" , \"test\" : \"ng test\" , \"lint\" : \"ng lint\" , \"e2e\" : \"ng e2e\" }, \"private\" : true , \"dependencies\" : { \"@angular/animations\" : \"~11.0.0\" , \"@angular/common\" : \"~11.0.0\" , \"@angular/compiler\" : \"~11.0.0\" , \"@angular/core\" : \"~11.0.0\" , \"@angular/forms\" : \"~11.0.0\" , \"@angular/platform-browser\" : \"~11.0.0\" , \"@angular/platform-browser-dynamic\" : \"~11.0.0\" , \"@angular/router\" : \"~11.0.0\" , \"rxjs\" : \"~6.6.0\" , \"tslib\" : \"^2.0.0\" , \"zone.js\" : \"~0.10.2\" }, \"devDependencies\" : { \"@angular-devkit/build-angular\" : \"~0.1100.1\" , \"@angular/cli\" : \"~11.0.1\" , \"@angular/compiler-cli\" : \"~11.0.0\" , \"@types/jasmine\" : \"~3.6.0\" , \"@types/node\" : \"^12.11.1\" , \"codelyzer\" : \"^6.0.0\" , \"jasmine-core\" : \"~3.7.1\" , \"jasmine-spec-reporter\" : \"~5.0.0\" , \"karma\" : \"~5.1.0\" , \"karma-chrome-launcher\" : \"~3.1.0\" , \"karma-coverage\" : \"~2.0.3\" , \"karma-jasmine\" : \"~4.0.0\" , \"karma-jasmine-html-reporter\" : \"^1.6.0\" , \"protractor\" : \"~7.0.0\" , \"ts-node\" : \"~8.3.0\" , \"tslint\" : \"~6.1.0\" , \"typescript\" : \"~4.0.2\" } } Die Anweisung npm install im Projekte-Ordner f\u00fchrt dazu, dass alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules -Verzeichnis erstellt. Siehe z.B. hier . Sollten Sie aufgefordert werden, npm audit fix oder npm audit fix --force auszuf\u00fchren, weil es noch high vulnerabilities gibt, dann f\u00fchren Sie einfach npm audit fix --force aus. Sollte auch das noch zu Fehlern f\u00fchren, k\u00f6nnen Sie auch npm install --legacy-peer-deps versuchen. Danach geben Sie ng serve ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B. \u280b Generating browser application bundles...**************************************************************************************** This is a simple server for use in testing or debugging Angular applications locally. It hasn't been reviewed for security issues. DON'T USE IT FOR PRODUCTION! **************************************************************************************** Compiling @angular/core : es2015 as esm2015 Compiling @angular/common : es2015 as esm2015 Compiling @angular/platform-browser : es2015 as esm2015 Compiling @angular/router : es2015 as esm2015 Compiling @angular/platform-browser-dynamic : es2015 as esm2015 \u2714 Browser application bundle generation complete. Initial Chunk Files | Names | Size main.js | main | 362.07 kB polyfills.js | polyfills | 44.15 kB runtime.js | runtime | 1.09 kB styles.css | styles | 0 bytes | Initial Total | 407.31 kB Build at: 2021-05-28T12:19:12.354Z - Hash: b1611690e9f20b1506e4 - Time: 28973ms ** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ ** \u2714 Compiled successfully. \u2714 Browser application bundle generation complete. 4 unchanged chunks Build at: 2021-05-28T12:19:13.393Z - Hash: 52a9999d2b3b3c4923f4 - Time: 643ms \u2714 Compiled successfully. Wenn Sie aber einmal ng serve ausgef\u00fchrt haben, wird im Browser automatisch auf die \u00c4nderungen reagiert. Sie m\u00fcssen also nicht jedes Mal neu ng serve eingeben, bzw. nicht jedes Mal neu auf das gr\u00fcne Dreieck in Ihrer IDE klicken: \u00d6ffnen Sie Ihren Browser und geben Sie als URL http://localhost:4200 ein. Folgende Seite sollte erscheinen: \u00d6ffnen Sie das Projekt in einer IDE. Die Projektstruktur ist wie folgt: README.md angular.json e2e karma.conf.js node_modules package-lock.json package.json src | -- app | | -- app-routing.module.ts | | -- app.component.css | | -- app.component.html | | -- app.component.spec.ts | | -- app.component.ts | | -- app.module.ts | | -- assets | -- environments | -- favicon.ico | -- index.html | -- main.ts | -- polyfills.ts | -- styles.css | -- test.ts tsconfig.app.json tsconfig.json tsconfig.spec.json tslint.json Die meiste Arbeit wird im src -Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung. Darin der wichtigste Ordner ist der app -Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen. In dem assets -Ordner werden Bilder, Icons und Daten abgelegt. Der node_modules -Ordner enth\u00e4lt alle ben\u00f6tigten 3 rd -party-libraries. Welche das sind, wird in der Datei package.json als dependencies definiert. Mithilfe des Befehls npm install werden alle ben\u00f6tigten Module dem Ordner node_modules hinzugef\u00fcgt. Der Ordner environments enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development - und den production -Modus. Wir entwickeln zun\u00e4chst im development -Modus. favicon.ico ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes. index.html ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application , d.h. es wird eine einzige HTML-Seite geladen ( index.html ) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt. styles.css enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen. Die app.component.* -Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML -, einer CSS - und einer TypeScript -Datei (auch noch eine *.spec.ts , aber die interessiert zun\u00e4chst nicht). \u00d6ffnen Sie in Ihrer IDE die Datei app.component.html . L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> die Zeile <h1>This is app</h1> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL localhost:4200 an. Es erscheint der folgende Inhalt:","title":"Projekt erstellen - ng new"},{"location":"frontend/#single-page-application","text":"Angular ist, wie bereits erw\u00e4hnt, ein Framework zur Erstellung einer Single Page Application (SPA) . Das bedeutet, dass die gesamte Anwendung aus einer einzigen HTML -Datei besteht, der src/index.html -Datei und dass in diese Datei Inhalte asynchron eingespeist werden. Dieses Einspeisen erfolgt durch JavaScript. Die hier geladene Seite ist die index.html , die in unserem Projekte-Ordner frontend liegt. Sie sieht so aus: index.html <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < app-root ></ app-root > </ body > </ html > Das Element <app-root> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor ). In Angular sind die einzelnen Inhalte , die eingespeist werden, Komponenten . Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent . Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element. Eine Komponente besteht aus einer View ( Template ) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht. Neben der *.html - und der *.ts -Datei einer Komponente gibt es auch noch die *.css -Datei (also z.B. app.component.css ). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen. Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator @Component verwendet. Decoratoren erkennt man am f\u00fchrenden @ -Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier AppComponent - app.component.ts ): @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'book-app' ; } Der Selektor gibt an, dass \u00fcberall dort, wo app-root als Elementselektor <app-root> </app-root> verwendet wird, das in app.component.html definerte Template eingesetzt wird. Angenommen, in app.component.html ist der HTML-Code: < h1 > This is app </ h1 > definiert. Dann wird dieser Code als Inhalt in das HTML-Element <app-root> </app-root> eingesetzt: < app-root > < h1 > This is app </ h1 > </ app-root > Zu dem Komponentenselektor <router-outlet></router-outlet> kommen wir gleich noch. Der spielt beim Routing eine Rolle. Wir erzeugen uns zun\u00e4chst eine Navigationskomponente mithilfe von Angular Material .","title":"Single Page Application"},{"location":"frontend/#angular-material-und-schematics","text":"Angular Material ist ein CSS- (und JavaScript)-Framework f\u00fcr eine Angular-Anwendung, \u00e4hnlich wie Bootstrap . Wir verwenden hier Angular Material und f\u00fcgen es mit dem Befehl ng add @angular/material unserer Anwendung hinzu. Sie werden nach unterschiedlichen Farbkombinationen gefragt, da k\u00f6nnen Sie w\u00e4hlen, was Ihnen beliebt. Sie k\u00f6nnen auch alle Fragen einfach mit Enter beantworten und somit die Standardvorgaben \u00fcbernehmen. Es erfolgt eine Ausgabe in der Art \u2139 Using package manager: npm \u2714 Found compatible package version: @angular/material@12.0.2. \u2714 Package information loaded. The package @angular/material@12.0.2 will be installed and executed. Would you like to proceed? Yes \u2714 Package successfully installed. ? Choose a prebuilt theme name, or \"custom\" for a custom theme: Indigo/Pink [ Preview: https://material.angular.io?them e = indigo-pink ] ? Set up global Angular Material typography styles? No ? Set up browser animations for Angular Material? Yes UPDATE package.json ( 1262 bytes ) \u2714 Packages installed successfully. UPDATE src/app/app.module.ts ( 502 bytes ) UPDATE angular.json ( 3715 bytes ) UPDATE src/index.html ( 553 bytes ) UPDATE src/styles.css ( 181 bytes ) Eine n\u00fctzliche Sache bei Angular Material sind Schematics . Das sind vordefinierte Komponenten, die wir verwenden k\u00f6nnen. Wir w\u00e4hlen zun\u00e4chst die Navigations -Komponente, d.h. wir erstellen mithilfe des Navigations-Schmeas eine neue Komponente nav mit dem folgenden Befehl: ng generate @angular/material:navigation nav in dem Projektordner erscheint im /src/app -Ordner eine neuer Ordner nav , der die Dateien nav.component.css , nav.component.html , nav.component.spec.ts , und nav.component.ts . enth\u00e4lt. Es wurde also eine neue Angular-Komponente erzeugt. Wenn wir die nav.component.ts \u00f6ffnen, 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Component } from '@angular/core' ; import { BreakpointObserver , Breakpoints } from '@angular/cdk/layout' ; import { Observable } from 'rxjs' ; import { map , shareReplay } from 'rxjs/operators' ; @ Component ({ selector : 'app-nav' , templateUrl : './nav.component.html' , styleUrls : [ './nav.component.css' ] }) export class NavComponent { isHandset$ : Observable < boolean > = this . breakpointObserver . observe ( Breakpoints . Handset ) . pipe ( map ( result => result . matches ), shareReplay () ); constructor ( private breakpointObserver : BreakpointObserver ) {} } dann sehen wir in Zeile 7 , dass der Komponentenselektor dieser Komponente app-nav ist. Das hei\u00dft, wenn wir nun in app.component.html diesen Komponentenselektor einf\u00fcgen, dann wird an diese Stelle die neue Komponente eingef\u00fcgt: app.component.html 1 2 3 < app-nav ></ app-nav > < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Wenn man nun im Browser (nach ng server - falls noch nicht geschehen) http://localhost:4200/ eingibt, dann sieht man die Navigationskomponente, aber nicht mehr die \u00dcberschrift <h1>This is app</h1> (und bei <router-outlet></router-outlet> ist derzeit eh noch nichts zu sehen). Wir nehmen diese beiden Zeilen aus der app.component.html heraus app.component.html 1 < app-nav ></ app-nav > und f\u00fcgen Sie in die nav.component.html ein: nav/nav.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item href = \"#\" > Link 1 </ a > < a mat-list-item href = \"#\" > Link 2 </ a > < a mat-list-item href = \"#\" > Link 3 </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > frontend </ span > </ mat-toolbar > <!-- Add Content Here --> < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container >","title":"Angular Material und Schematics"},{"location":"frontend/#neue-komponente-und-routing","text":"Wir erstellen nun eine weitere Komponente und binden diese \u00fcber Routing ein. Die neue Komponente soll create hei\u00dfen. Wir nutzen dazu den ng generate component <name-der-komponente> -Befehl, der auch abgek\u00fcrzt ng g c <name-der-komponente> werden kann. ng g c create Es entsteht ein /src/app/create -Ordner, der die vier Dateien create.component.css , create.component.html , create.component.spec.ts und create.component.ts enth\u00e4lt. In diese Komponente wollen wir sp\u00e4ter ein Formular hinzuf\u00fcgen, mit dessen Hilfe wir neue Daten eingeben k\u00f6nnen. Zun\u00e4chst binden wir diese Komponente in unsere Anwendung ein. Dieses Mal erfolgt die Einbindung jedoch nicht statisch \u00fcber den Komponentenselektor app-create , sondern dynamisch \u00fcber eine Route . Das bedeutet, dass wenn die Route http://localhost:4200/create in den Browser eingegeben wird, dann soll an die Stelle des dynamischen Komponenetenselektors <router-outlet></router-outlet> die CreateComponent eingebunden werden. dazu m\u00fcssen wir die Route in der app-routing.module.ts definieren: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { CreateComponent } from './create/create.component' ; const routes : Routes = [ { path : 'create' , component : CreateComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Dazu wird in dem Routes -Array (Zeilen 5-7 ) die neue Route definiert, indem der path angegeben wird ( create ) und welche Komponente f\u00fcr diesen Pfad aufgerufen werden soll ( CreateComponent ). Diese Komponente wird dazu in die app-routing.module.ts importiert (Zeile 3 ). Wenn wir nun in den Browser http://localhost:4200/create eingeben, dann wird diese Komponente in den <routing-outlet> -Selektor eingef\u00fcgt (also unterhalb der \u00dcberschrift <h1>This is app</h1> ). Es erscheint , da die View der CreateComponent derzeit nur aus dem Absatz <p>create works!</p> besteht (siehe create.component.html ). Um diese Route auch \u00fcber das Navigationsmen\u00fc aufrufen zu k\u00f6nnen, \u00e4ndern wir unsere nav.component.html : nav/nav.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item routerLink = \"/create\" routerLinkActive = \"active\" > Create </ a > < a mat-list-item href = \"#\" > Link 2 </ a > < a mat-list-item href = \"#\" > Link 3 </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > frontend </ span > </ mat-toolbar > <!-- Add Content Here --> < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > Routen werden also nicht \u00fcber href , sondern \u00fcber routerLink aufgerufen (siehe hier ). Das Attribut routerLinkActive erlaubt, CSS-Klassen f\u00fcr \"aktive\", also klickbare Links hinzuzuf\u00fcgen (siehe hier ). Weitere Details zum Routing in Angular finden Sie z.B. hier .","title":"Neue Komponente und Routing"},{"location":"frontend/#ein-formular-erstellen","text":"Die Erstellung eines Formulars besteht in Angular aus zwei Teilschritten: Es wird in der .ts -Klasse eine FormGroup erstellt, die mehrere FormControl -Elemente enth\u00e4lt. FromGroup entspricht dem Formular und FormControl kann z.B. eine Eingabefeld in diesem Formular sein. Bei der Erstellung einer FormGroup hilft der FormBuilder . Es wird in der .html -Datei das Formular angelegt, wobei dem Formular und den einzelnen Eingabefeldern die CSS-Klassen des Frameworks zugeordnet werden, das verwendet wird (hier also Material ). Bevor uns diese Schritte genauer anschauen, erledigen wir erst eine Sache, die h\u00e4ufig vergessen wird. Bei dem Formular, das wir erstellen, handelt es sich um eine reactive form . Wir m\u00fcssen dazu das RactiveFormsModule in die app.module.ts einf\u00fcgen (ob FormsModule auch, wei\u00df ich immer nicht genau, aber es schadet nichts). app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , FormsModule , ReactiveFormsModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Wir schauen uns zun\u00e4chst den ersten Schritt anhand der create.component.ts an. Diese ist nach Erstellung noch \"leer\": /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { constructor () { } ngOnInit () : void { } } Nachdem wir das Formular hinzugef\u00fcgt haben, hat die create.component.ts folgendes Aussehen: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import { Component , OnInit } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; constructor ( private fb : FormBuilder ) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } } In zeile 2 werden die ben\u00f6tigten Klassen importiert. Der Klasse wird per dependency injection der FormBuilder hinzugef\u00fcgt (Zeile 12 ). Die eigentliche FormGroup (hier namens formGroup ) wird in den Zeilen 17-20 mithilfe des FormBuilder und dessen group() -Funktion erstellt. Dabei werden jedem FormControl -Element zun\u00e4chst kein value ( '' ), aber ein Validator hinzugef\u00fcgt, der daf\u00fcr verantwortlich ist, zu erkennen, ob das Feld (korrekt) ausgef\u00fcllt wurde. Die get() -Funktionen f\u00fcr die einzelnen FormControl -Elemente erm\u00f6glichen den Zugriff auf diese. Nun erstellen wir das Formular in der create.component.html -Datei: /create/create.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 < div class = \"container\" novalidate > < div class = \"form-container\" > < h3 > Post hinzuf\u00fcgen </ h3 > < form [ formGroup ]=\" formGroup \" > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post title </ mat-label > < input matInput placeholder = \"Titel\" formControlName = \"inp_title\" /> < mat-error * ngIf = \"!inp_title.valid && inp_title.touched\" > < span * ngIf = \"inp_title.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post location </ mat-label > < input matInput placeholder = \"Location\" formControlName = \"inp_location\" /> < mat-error * ngIf = \"!inp_location.valid && inp_location.touched\" > < span * ngIf = \"inp_location.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post image </ mat-label > < input matInput placeholder = \"Image file\" formControlName = \"inp_image\" /> < mat-error * ngIf = \"!inp_image.valid && inp_image.touched\" > < span * ngIf = \"inp_image.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > </ form > < button mat-stroked-button ( click )=\" onSubmit ()\" color = \"default\" class = \"button\" [ disabled ]=\"! formGroup . valid \" > Add post </ button > </ div > </ div > Wir haben zun\u00e4chst drei Eingabefelder, alle drei jeweils auch mit einem Label. Wir erhalten jedoch noch einige Fehler, da die passenden Module noch nicht in der app.module.ts importiert sind, z.B. MatFormField . Das m\u00fcssen wir zun\u00e4chst nachholen: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { MatInputModule } from '@angular/material/input' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , MatFormFieldModule , MatInputModule , FormsModule , ReactiveFormsModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Jetzt sollte es in unserer create.component.html nur noch einen Fehler geben, n\u00e4mlich die onSubmit() -Funktion ist noch nicht implementiert. Wir f\u00fcgen eine erste simple Implementierung der create.component.ts hinzu: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import { Component , OnInit } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; constructor ( private fb : FormBuilder ) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } onSubmit () : void { const post = { title : this . inp_title . value , location : this . inp_location . value , image : this . inp_image . value } console . log ( 'post : ' , post ); } } Die drei Werte der Eingabefelder werden ausgelesen und einem JavaScript-Objekt post hinzugef\u00fcgt. Dieses wird auf der Konsole ausgegeben. Sollte es in Ihrer create.component.html -Datei nun immer noch Fehler geben, dann liegt es daran, dass bei diesen Zugriffen inp_image.errors.required (3x f\u00fcr alle 3 FormControl-Elemente) das strikte Typesetting sagt, dass inp_image.errors eventuell null sein k\u00f6nnte und man dann gar nicht auf die Eigenschaft required zugreifen k\u00f6nnte. Daf\u00fcr k\u00f6nnen Sie den ? -Operator verwenden, das sieht dann so aus: < span * ngIf = \"inp_title.errors?.required\" > This field is mandatory. </ span > < span * ngIf = \"inp_location.errors?.required\" > This field is mandatory. </ span > < span * ngIf = \"inp_image.errors?.required\" > This field is mandatory. </ span > Das Formular ist f\u00fcr title und location bereits passend f\u00fcr die Eingabe eines post -Datensatzes. Allerdings wollen wir f\u00fcr das image ja eine Bilddatei hochladen, die dann in das base64 -Format umgewandelt werden soll. Dazu m\u00fcssen wir das image -Eingabefeld \u00e4ndern. Leider stellt Material nicht direkt ein File upload -Eingabeelement zur Verf\u00fcgung. Das folgende Vorgehen wurde deshalb hier entnommen und angepasst. Die create.component.html sieht nun so aus: /create/create.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 < div class = \"container\" novalidate > < div class = \"form-container\" > < h3 > Post hinzuf\u00fcgen </ h3 > < form [ formGroup ]=\" formGroup \" > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post title </ mat-label > < input matInput placeholder = \"Titel\" formControlName = \"inp_title\" /> < mat-error * ngIf = \"!inp_title.valid && inp_title.touched\" > < span * ngIf = \"inp_title.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field\" appearance = \"standard\" > < mat-label > Post location </ mat-label > < input matInput placeholder = \"Location\" formControlName = \"inp_location\" /> < mat-error * ngIf = \"!inp_location.valid && inp_location.touched\" > < span * ngIf = \"inp_location.errors.required\" > This field is mandatory. </ span > </ mat-error > </ mat-form-field > < mat-form-field class = \"form-field inputbreit\" appearance = \"standard\" > <!-- Readonly Input to show File names --> < input matInput readonly id = \"file_name\" placeholder = \"Browse image file\" /> <!-- Fetch selected filed on change --> < input type = \"file\" id = \"fileUpload\" ( change )=\" uploadFileEvt ($ event )\" formControlName = \"inp_image\" multiple = \"multiple\" accept = \"image/*\" /> </ mat-form-field > </ form > < button mat-stroked-button ( click )=\" onSubmit ()\" color = \"default\" class = \"button\" [ disabled ]=\"! formGroup . valid \" > Add post </ button > </ div > </ div > In der create.component.ts f\u00fcgen wir die uploadFileEvt() -Funktion hinzu, der das change -Event \u00fcbergeben wird. Dieses Objekt enth\u00e4lt f\u00fcr den input type=\"file\" unter der target -Eigenschaft ein files -Array, in dem alle ausgew\u00e4hlten Dateien enthalten sind. Die erste Implementierung liest diesen Wert aus: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import { Component , OnInit , ViewChild , ElementRef } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; imageBase64 = '' ; constructor ( private fb : FormBuilder ) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } onSubmit () : void { const post = { title : this . inp_title . value , location : this . inp_location . value , image : this . imageBase64 } console . log ( 'post : ' , post ); } uploadFileEvt ( imgFile : any ) : void { console . log ( 'upload' , imgFile . target . files ); } } Sollte es in Ihrer create.component.ts -Datei nun immer noch Fehler geben, dann liegt es daran, dass formGroup: FormGroup; nur deklariert, nicht jedoch auch initialisiert wird (striktes Typesetting). Das k\u00f6nnen Sie einfach umgehen, indem Sie sagen, dass Sie sich aber ganz sicher sind, dass es beim Initialisieren der Komponente initialisiert wird. Dazu f\u00fcgt man ein ! hinter den Variablennamen ein: formGroup !: FormGroup ; Wir erweitern diese Funktion nun noch um das Auslesen der Datei in einen FileReader . Damit k\u00f6nnen in Webanwendungen Dateien eingelesen werden. Das onload -Ereignis wird ausgel\u00f6st, wenn die Inhalte der Dateien verf\u00fcgbar sind, wenn die Datei also eingelesen wurde. Dieser Inhalt wird in ein Image -Objekt umgewandelt, da f\u00fcr ein Image die Quelle des Bildes das base64 -Format ist. /create/create.component.ts 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 uploadFileEvt ( imgFile : any ) : void { console . log ( 'upload' , imgFile . target . files ); if ( imgFile . target . files && imgFile . target . files [ 0 ]) { const reader = new FileReader (); reader . onload = ( e : any ) => { const image = new Image (); image . src = e . target . result ; image . onload = () => { // Return Base64 Data URL const imgBase64Path = e . target . result ; console . log ( 'base64' , imgBase64Path ); this . imageBase64 = imgBase64Path . substr ( imgBase64Path . indexOf ( ',' ) + 1 ); }; }; reader . readAsDataURL ( imgFile . target . files [ 0 ]); } } Dieser imgBase64Path beginnt jedoch stets mit data:image/png;base64 . Diesen Substring wollen wir entfernen, da er nicht zu den eigentlichen Bilddaten geh\u00f6rt (die in der Datenbank gespeichert werden). Der Aufbau dieses imgBase64Path -Strings ist wie folgt: data:image/png ; base64 , Bilddaten also der genannte Teilstring, gefolgt von Komma, gefolgt von den Bilddaten. In Zeile 61 wird deshalb der Teilstring extrahiert, der hinter dem ersten Komma beginnt - somit alle Bilddaten. Diese werden gespeichert. In der onSubmit() -Funktion nutzen wir als Wert der Eigenschaft image bereits diesen verbleibenden String. Das post -Objekt ist somit vollst\u00e4ndig. Das Formular in der create.component.html -Datei wurde noch mit einigen eigenen CSS-Klassen versehen. Die Definitionen dieser Klassen sind hier: /create/create.component.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 . vertikal { display : flex ; flex-direction : column ; align-items : flex-start ; margin : 1 % ; } . formbreit { min-width : 150 px ; max-width : 500 px ; width : 100 % ; } . inputbreit { width : 100 % ; } # fileUpload { position : absolute ; z-index : 9 ; opacity : 0 ; height : 100 % ; width : 100 % ; left : 0 px ; top : 0 px ; cursor : pointer ; }","title":"Ein Formular erstellen"},{"location":"frontend/#das-frontend-mit-dem-backend-verbinden","text":"Um das Frontend mit dem Backend zu verkn\u00fcpfen, erstellen wir uns einen Service . Ein Service in Angular ist eine TypeScript-Klasse, die einen bestimmten Zweck erf\u00fcllt und typischerweise allen Komponenten zur Verf\u00fcgung steht. Zu einem Service geh\u00f6rt also keine View. In Angular wird ein Service mittels ng generate service <name-des-services> erstellt - kurz ng g s <name-des-services> . Wir nennen unseren Service backend : ng g s backend Es entsteht eine Datei backend.service.ts : backend.service.ts 1 2 3 4 5 6 7 8 9 import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class BackendService { constructor () { } } In diesem Service verwenden wir zwei Angular-Module, um mittels HTTP auf das Backend zuzugreifen: das Modul HttpClient f\u00fcr die HTTP-Anfragen und das Modul HttpHeaders , um die HTTP- headers zu konfigurieren. Wir wollen an dieser Stelle nur die Funktion implementieren, mit der wir einen neuen Datensatz an das Backend \u00fcbertragen und dabei den Endpunkt http://localhost:3000/posts mittels einer POST -Anfrage ansprechen. Diese Implementierung sieht wie folgt aus: backend.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { Injectable } from '@angular/core' ; import { HttpClient , HttpHeaders } from '@angular/common/http' ; @ Injectable ({ providedIn : 'root' }) export class BackendService { apiUrl = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } public addPost ( post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiUrl } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' , }), }) . toPromise (); } } Der HttpClient bietet Funktionalit\u00e4ten f\u00fcr die Verwendung des HTTP-Protokolls in Angular. Wir verwenden hier die post -Funktion. Darin \u00fcbergeben wir die URL des Backends udn den Datensatz post . In den headers konfigurieren wir noch, dass wir ein JSON \u00fcbergeben und auch ein JSON zur\u00fcckerwarten. Wir verwenden hier einen Typen Post , der noch nicht existiert. Wir f\u00fcgen dazu ein Interface in unseren Service ein (k\u00f6nnte auch in einer extra Datei sein), in dem wir die Struktur eines Post -Objektes definieren (entspricht der Struktur, die wir auch in der Datenbank daf\u00fcr verwendet haben). backend.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { Injectable } from '@angular/core' ; import { HttpClient , HttpHeaders } from '@angular/common/http' ; export interface Post { id : number ; title : string ; location : string ; image : string ; } @ Injectable ({ providedIn : 'root' }) export class BackendService { apiUrl = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } public addPost ( post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiUrl } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' , }), }) . toPromise (); } } Nun k\u00f6nnen wir diesen Service in unseren Komponenten verwenden. Dazu binden wir ihn per dependency injection in die create.component.ts ein und rufen dort in der onSubmit() -Funktion die Funktion addPost() auf: /create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import { Component , OnInit , ViewChild , ElementRef } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; import { BackendService } from '../backend.service' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { formGroup : FormGroup ; imageBase64 : '' ; constructor ( private fb : FormBuilder , private bs : BackendService ,) { // constructor function } ngOnInit () : void { this . formGroup = this . fb . group ({ inp_title : [ '' , Validators . required ], inp_location : [ '' , Validators . required ], inp_image : [ '' , Validators . required ] }); } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } get inp_image () : FormControl { return this . formGroup . get ( 'inp_image' ) as FormControl ; } onSubmit () : void { const post = { id : null , title : this . inp_title . value , location : this . inp_location . value , image : this . imageBase64 } console . log ( 'post : ' , post ); await this . bs . addPost ( post ); } uploadFileEvt ( imgFile : any ) : void { console . log ( 'upload' , imgFile . target . files ); if ( imgFile . target . files && imgFile . target . files [ 0 ]) { const reader = new FileReader (); reader . onload = ( e : any ) => { const image = new Image (); image . src = e . target . result ; image . onload = () => { // Return Base64 Data URL const imgBase64Path = e . target . result ; console . log ( 'base64' , imgBase64Path ); this . imageBase64 = imgBase64Path . substr ( imgBase64Path . indexOf ( ',' ) + 1 ); }; }; reader . readAsDataURL ( imgFile . target . files [ 0 ]); } } } Wichtig ist, dass wir nicht vergessen d\u00fcrfen, das HttpClientModule in der app.module.ts zu importieren: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { MatInputModule } from '@angular/material/input' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; import { HttpClientModule } from '@angular/common/http' ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , HttpClientModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , MatFormFieldModule , MatInputModule , FormsModule , ReactiveFormsModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Somit sollte unser Frontend fertig und an das Backend angebunden sein. Um es vollst\u00e4ndig zu testen, starten wir das Backend ! Geben Sie im Frontend ( /create ) Daten ein und schicken Sie das Formular ab. Die Datenbank sollte mit den neuen Daten bef\u00fcllt sein - das k\u00f6nnen Sie unter phpmyadmin \u00fcberpr\u00fcfen. Success Wir haben uns zwar in Sachen Progressive Web Apps nicht wirklich weiterentwickelt, aber wir haben nun erstmal einige n\u00fctzliche Hilfsmittel geschaffen, um eine \"gr\u00f6\u00dfere\" Anwendung sp\u00e4ter progressive zu gestalten. Es gibt nun eine Datenbank, die Bilder speichern kann und das passende Backend zur Anbindung der Datenbank. Zur Erleichterung der Dateneingabe in die Datenbank haben wir uns auch ein Frontend erstellt.","title":"Das Frontend mit dem Backend verbinden"},{"location":"frontend_alt/","text":"Frontend \u00b6 Um die Dateneingabe zu vereinfachen, erstellen wir uns ein einfaches Frontend mithilfe von Angular https://angular.io/ . Wie beim Backend auch, erstellen wir dieses Frontend Schritt f\u00fcr Schritt von Beginn an. Der im Folgenden beschriebene Code ist unter GitHub verf\u00fcgbar. Dieses Frontend ist zun\u00e4chst bewusst einfach gehalten und enth\u00e4lt nur eine einzige Komponente CreateComponent zum Erstellen eines Datensatzes. Da wir Angular Material verwenden, sieht die app.module.ts wie folgt aus: app.module.ts import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatInputModule } from '@angular/material/input' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { MatCardModule } from '@angular/material/card' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { CreateComponent } from './create/create.component' ; import { HttpClientModule } from '@angular/common/http' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; import { ToastrModule } from 'ngx-toastr' ; @ NgModule ({ declarations : [ AppComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , HttpClientModule , ReactiveFormsModule , FormsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatInputModule , MatSidenavModule , MatIconModule , MatListModule , MatCardModule , MatFormFieldModule , ToastrModule . forRoot ({ timeOut : 2000 , preventDuplicates : true , }), ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Als einzige Route ist /create in der app-routing.module.ts definiert, wodurch die CreateComponent aufgerufen wird: app-routing.module.ts import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { CreateComponent } from './create/create.component' ; const routes : Routes = [ { path : 'create' , component : CreateComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } AppComponent \u00b6 Die AppComponent enth\u00e4lt ausschlie\u00dflich das mithilfe des Navigation schematic erstellte Navigationsger\u00fcst. Als Inhalt in diesem Ger\u00fcst ist <router-outlet></router-outlet> enthalten, um die einzelnen Komponenten einzubinden: app.component.html < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item routerLink = \"/create\" routerLinkActive = \"active\" > Neuen Datensatz </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > Posts verwalten </ span > </ mat-toolbar > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > app.component.ts import { Component } from '@angular/core' ; import { BreakpointObserver , Breakpoints } from '@angular/cdk/layout' ; import { Observable } from 'rxjs' ; import { map , shareReplay } from 'rxjs/operators' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'frontend' ; isHandset$ : Observable < boolean > = this . breakpointObserver . observe ( Breakpoints . Handset ) . pipe ( map ( result => result . matches ), shareReplay () ); constructor ( private breakpointObserver : BreakpointObserver ) {} } Beide Dateien sind unver\u00e4ndert so \u00fcbernommen, wie vom Navigation schematic erstellt. CreateComponent \u00b6 Selbst erstellt wurde nur die CreateComponent . In dieser Komponente wurde ein Formular nach Material Design -Vorgaben erstellt. Die create.component.ts sieht so aus: create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 import { Component , OnInit , ViewChild , ElementRef } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; import { ToastrService } from 'ngx-toastr' ; import { PostService , Post } from '../post.service' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { @ ViewChild ( 'fileInput' ) fileInput : ElementRef ; fileAttr = 'Choose File' ; formGroup : FormGroup ; titleAlert = 'This field is required' ; imgBase64 = '' ; post : Post ; constructor ( private formBuilder : FormBuilder , private postService : PostService , private toastr : ToastrService ) { } ngOnInit () : void { this . formGroup = this . formBuilder . group ({ inp_title : [ null , Validators . required ], inp_location : [ null , Validators . required ], uploadFile : [ null , Validators . required ] }); } uploadFileEvt ( imgFile : any ) : void { if ( imgFile . target . files && imgFile . target . files [ 0 ]) { this . fileAttr = '' ; Array . from ( imgFile . target . files ). forEach (( file : File ) => { this . fileAttr += file . name + ' - ' ; }); // HTML5 FileReader API const reader = new FileReader (); reader . onload = ( e : any ) => { const image = new Image (); image . src = e . target . result ; image . onload = rs => { const imgBase64Path = e . target . result ; this . imgBase64 = imgBase64Path . substr ( imgBase64Path . indexOf ( ',' ) + 1 ); console . log ( 'imgBase64Path' , imgBase64Path ); console . log ( 'imgBase64' , this . imgBase64 ); }; this . formGroup . patchValue ({ uploadFile : reader . result }); }; reader . readAsDataURL ( imgFile . target . files [ 0 ]); // Reset if duplicate image uploaded again this . fileInput . nativeElement . value = '' ; } else { this . fileAttr = 'Choose File' ; } } get uploadFile () : FormControl { return this . formGroup . get ( 'uploadFile' ) as FormControl ; } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } async onSubmit () : Promise < void > { this . post = { id : 0 , title : this . inp_title . value , location : this . inp_location . value , image : this . imgBase64 }; console . log ( 'post' , this . post ); await this . postService . addPost ( JSON . stringify ( this . post )); this . toastr . success ( 'success' ); this . formGroup . reset (); } } create/create.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 < div class = \"container\" novalidate > < mat-card class = \"example-card\" > < mat-card-header > < mat-card-title > Post hinzuf\u00fcgen </ mat-card-title > </ mat-card-header > < mat-card-content > < div [ formGroup ]=\" formGroup \" class = \"my-form\" > < mat-form-field class = \"form-element\" > < mat-label > Post title </ mat-label > < input matInput placeholder = \"Titel\" formControlName = \"inp_title\" /> < mat-error * ngIf = \"!inp_title.valid && inp_title.touched\" > {{ titleAlert }} </ mat-error > </ mat-form-field > < mat-form-field class = \"form-element\" > < mat-label > Post location </ mat-label > < input matInput placeholder = \"Location\" formControlName = \"inp_location\" /> < mat-error * ngIf = \"!inp_location.valid && inp_location.touched\" > {{ titleAlert }} </ mat-error > </ mat-form-field > < mat-form-field > < div > < mat-toolbar > <!-- Display files names --> < input matInput [( ngModel )]=\" fileAttr \" readonly name = \"name\" /> <!-- Browse Button --> < button mat-flat-button color = \"primary\" > Browse File </ button > </ mat-toolbar > <!-- Fetch selected filed on change --> < input type = \"file\" # fileInput id = \"uploadFile\" ( change )=\" uploadFileEvt ($ event )\" name = \"uploadFile\" multiple = \"multiple\" accept = \"image/*\" /> </ div > </ mat-form-field > </ div > </ mat-card-content > < mat-card-actions > < div class = \"form-element\" > < button mat-stroked-button ( click )=\" onSubmit ()\" color = \"default\" class = \"button\" [ disabled ]=\"! formGroup . valid \" > Add post </ button > </ div > </ mat-card-actions > </ mat-card > < div * ngIf = \"imgBase64\" > {{ imgBase64 }} </ div > </ div > In Zeile 15 wird eine Variable formGroup vom Typ FormGroup deklariert. Erzeugt wird das Formular mithilfe des FormBuilder (siehe Zeile 21 ) in der ngOnInit() -Funktion (Zeilen 25-30 ). Die drei get -Methoden (Zeilen 61-71 ) dienen dem Zugriff auf die drei einzelnen Formularelemente. Am unfrangreichsten ist hier die uploadFileEvt -Methode. Diese wird aufgerufen, wenn eine Bilddatei zum Upload ausgew\u00e4hlt wurde. Prinzipiell ist sogar die Auswahl mehrerer Dateien m\u00f6glich. In Zeile 46 wird der Base64-Code des Bildes \u00fcbergeben, dieser enth\u00e4lt aber noch den String data:image/jpeg;base64, . Dieser wird in Zeile 47 entfernt und der verbleibende Code in imgBase64 gespeichert. Ist das gesamte Formular ausgef\u00fcllt, wird durch Klicken des Add post -Buttons (siehe create.component.html ) die onSubmit() -Methode ausgel\u00f6st. In dieser Methode wird das post -Objekt erzeugt, welches an die addPost -Methode des postService \u00fcbergeben wird. post.service.ts \u00b6 Der PostService stellt die Verbindung zum Backend dar. Dazu verwendet der PostService das HttpClient - und das HttpHeaders -Modul: post.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import { HttpClient , HttpHeaders } from '@angular/common/http' ; import { Injectable } from '@angular/core' ; export interface Post { id : number ; title : string ; location : string ; image : string ; } @ Injectable ({ providedIn : 'root' }) export class PostService { apiUrl = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } public async addPost ( post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiUrl } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , }), }) . toPromise (); } } Derzeit ist im PostService noch nur eine Funktion implementiert, die addPost() . Diese ruft im Backend den Endpunkt POST http://localhost:3000/posts auf und \u00fcbergibt das post -Objekt, das im Request-Body versendet wird. Success Wir haben uns zwar in Sachen Progressive Web Apps nicht wirklich weiterentwickelt, aber wir haben nun erstmal einige n\u00fctzliche Hilfsmittel geschaffen, um eine \"gr\u00f6\u00dfere\" Anwendung sp\u00e4ter progressive zu gestalten. Es gibt nun eine Datenbank, die Bilder speichern kann und das passende Backend zur Anbindung der Datenbank. Zur Erleichterung der Dateneingabe in die Datenbank haben wir uns auch ein Frontend erstellt.","title":"Frontend alt"},{"location":"frontend_alt/#frontend","text":"Um die Dateneingabe zu vereinfachen, erstellen wir uns ein einfaches Frontend mithilfe von Angular https://angular.io/ . Wie beim Backend auch, erstellen wir dieses Frontend Schritt f\u00fcr Schritt von Beginn an. Der im Folgenden beschriebene Code ist unter GitHub verf\u00fcgbar. Dieses Frontend ist zun\u00e4chst bewusst einfach gehalten und enth\u00e4lt nur eine einzige Komponente CreateComponent zum Erstellen eines Datensatzes. Da wir Angular Material verwenden, sieht die app.module.ts wie folgt aus: app.module.ts import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatInputModule } from '@angular/material/input' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { MatCardModule } from '@angular/material/card' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { CreateComponent } from './create/create.component' ; import { HttpClientModule } from '@angular/common/http' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; import { ToastrModule } from 'ngx-toastr' ; @ NgModule ({ declarations : [ AppComponent , CreateComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , HttpClientModule , ReactiveFormsModule , FormsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatInputModule , MatSidenavModule , MatIconModule , MatListModule , MatCardModule , MatFormFieldModule , ToastrModule . forRoot ({ timeOut : 2000 , preventDuplicates : true , }), ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Als einzige Route ist /create in der app-routing.module.ts definiert, wodurch die CreateComponent aufgerufen wird: app-routing.module.ts import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { CreateComponent } from './create/create.component' ; const routes : Routes = [ { path : 'create' , component : CreateComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { }","title":"Frontend"},{"location":"frontend_alt/#appcomponent","text":"Die AppComponent enth\u00e4lt ausschlie\u00dflich das mithilfe des Navigation schematic erstellte Navigationsger\u00fcst. Als Inhalt in diesem Ger\u00fcst ist <router-outlet></router-outlet> enthalten, um die einzelnen Komponenten einzubinden: app.component.html < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item routerLink = \"/create\" routerLinkActive = \"active\" > Neuen Datensatz </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > Posts verwalten </ span > </ mat-toolbar > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > app.component.ts import { Component } from '@angular/core' ; import { BreakpointObserver , Breakpoints } from '@angular/cdk/layout' ; import { Observable } from 'rxjs' ; import { map , shareReplay } from 'rxjs/operators' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'frontend' ; isHandset$ : Observable < boolean > = this . breakpointObserver . observe ( Breakpoints . Handset ) . pipe ( map ( result => result . matches ), shareReplay () ); constructor ( private breakpointObserver : BreakpointObserver ) {} } Beide Dateien sind unver\u00e4ndert so \u00fcbernommen, wie vom Navigation schematic erstellt.","title":"AppComponent"},{"location":"frontend_alt/#createcomponent","text":"Selbst erstellt wurde nur die CreateComponent . In dieser Komponente wurde ein Formular nach Material Design -Vorgaben erstellt. Die create.component.ts sieht so aus: create/create.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 import { Component , OnInit , ViewChild , ElementRef } from '@angular/core' ; import { FormBuilder , FormControl , FormGroup , Validators } from '@angular/forms' ; import { ToastrService } from 'ngx-toastr' ; import { PostService , Post } from '../post.service' ; @ Component ({ selector : 'app-create' , templateUrl : './create.component.html' , styleUrls : [ './create.component.css' ] }) export class CreateComponent implements OnInit { @ ViewChild ( 'fileInput' ) fileInput : ElementRef ; fileAttr = 'Choose File' ; formGroup : FormGroup ; titleAlert = 'This field is required' ; imgBase64 = '' ; post : Post ; constructor ( private formBuilder : FormBuilder , private postService : PostService , private toastr : ToastrService ) { } ngOnInit () : void { this . formGroup = this . formBuilder . group ({ inp_title : [ null , Validators . required ], inp_location : [ null , Validators . required ], uploadFile : [ null , Validators . required ] }); } uploadFileEvt ( imgFile : any ) : void { if ( imgFile . target . files && imgFile . target . files [ 0 ]) { this . fileAttr = '' ; Array . from ( imgFile . target . files ). forEach (( file : File ) => { this . fileAttr += file . name + ' - ' ; }); // HTML5 FileReader API const reader = new FileReader (); reader . onload = ( e : any ) => { const image = new Image (); image . src = e . target . result ; image . onload = rs => { const imgBase64Path = e . target . result ; this . imgBase64 = imgBase64Path . substr ( imgBase64Path . indexOf ( ',' ) + 1 ); console . log ( 'imgBase64Path' , imgBase64Path ); console . log ( 'imgBase64' , this . imgBase64 ); }; this . formGroup . patchValue ({ uploadFile : reader . result }); }; reader . readAsDataURL ( imgFile . target . files [ 0 ]); // Reset if duplicate image uploaded again this . fileInput . nativeElement . value = '' ; } else { this . fileAttr = 'Choose File' ; } } get uploadFile () : FormControl { return this . formGroup . get ( 'uploadFile' ) as FormControl ; } get inp_title () : FormControl { return this . formGroup . get ( 'inp_title' ) as FormControl ; } get inp_location () : FormControl { return this . formGroup . get ( 'inp_location' ) as FormControl ; } async onSubmit () : Promise < void > { this . post = { id : 0 , title : this . inp_title . value , location : this . inp_location . value , image : this . imgBase64 }; console . log ( 'post' , this . post ); await this . postService . addPost ( JSON . stringify ( this . post )); this . toastr . success ( 'success' ); this . formGroup . reset (); } } create/create.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 < div class = \"container\" novalidate > < mat-card class = \"example-card\" > < mat-card-header > < mat-card-title > Post hinzuf\u00fcgen </ mat-card-title > </ mat-card-header > < mat-card-content > < div [ formGroup ]=\" formGroup \" class = \"my-form\" > < mat-form-field class = \"form-element\" > < mat-label > Post title </ mat-label > < input matInput placeholder = \"Titel\" formControlName = \"inp_title\" /> < mat-error * ngIf = \"!inp_title.valid && inp_title.touched\" > {{ titleAlert }} </ mat-error > </ mat-form-field > < mat-form-field class = \"form-element\" > < mat-label > Post location </ mat-label > < input matInput placeholder = \"Location\" formControlName = \"inp_location\" /> < mat-error * ngIf = \"!inp_location.valid && inp_location.touched\" > {{ titleAlert }} </ mat-error > </ mat-form-field > < mat-form-field > < div > < mat-toolbar > <!-- Display files names --> < input matInput [( ngModel )]=\" fileAttr \" readonly name = \"name\" /> <!-- Browse Button --> < button mat-flat-button color = \"primary\" > Browse File </ button > </ mat-toolbar > <!-- Fetch selected filed on change --> < input type = \"file\" # fileInput id = \"uploadFile\" ( change )=\" uploadFileEvt ($ event )\" name = \"uploadFile\" multiple = \"multiple\" accept = \"image/*\" /> </ div > </ mat-form-field > </ div > </ mat-card-content > < mat-card-actions > < div class = \"form-element\" > < button mat-stroked-button ( click )=\" onSubmit ()\" color = \"default\" class = \"button\" [ disabled ]=\"! formGroup . valid \" > Add post </ button > </ div > </ mat-card-actions > </ mat-card > < div * ngIf = \"imgBase64\" > {{ imgBase64 }} </ div > </ div > In Zeile 15 wird eine Variable formGroup vom Typ FormGroup deklariert. Erzeugt wird das Formular mithilfe des FormBuilder (siehe Zeile 21 ) in der ngOnInit() -Funktion (Zeilen 25-30 ). Die drei get -Methoden (Zeilen 61-71 ) dienen dem Zugriff auf die drei einzelnen Formularelemente. Am unfrangreichsten ist hier die uploadFileEvt -Methode. Diese wird aufgerufen, wenn eine Bilddatei zum Upload ausgew\u00e4hlt wurde. Prinzipiell ist sogar die Auswahl mehrerer Dateien m\u00f6glich. In Zeile 46 wird der Base64-Code des Bildes \u00fcbergeben, dieser enth\u00e4lt aber noch den String data:image/jpeg;base64, . Dieser wird in Zeile 47 entfernt und der verbleibende Code in imgBase64 gespeichert. Ist das gesamte Formular ausgef\u00fcllt, wird durch Klicken des Add post -Buttons (siehe create.component.html ) die onSubmit() -Methode ausgel\u00f6st. In dieser Methode wird das post -Objekt erzeugt, welches an die addPost -Methode des postService \u00fcbergeben wird.","title":"CreateComponent"},{"location":"frontend_alt/#postservicets","text":"Der PostService stellt die Verbindung zum Backend dar. Dazu verwendet der PostService das HttpClient - und das HttpHeaders -Modul: post.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import { HttpClient , HttpHeaders } from '@angular/common/http' ; import { Injectable } from '@angular/core' ; export interface Post { id : number ; title : string ; location : string ; image : string ; } @ Injectable ({ providedIn : 'root' }) export class PostService { apiUrl = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } public async addPost ( post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiUrl } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , }), }) . toPromise (); } } Derzeit ist im PostService noch nur eine Funktion implementiert, die addPost() . Diese ruft im Backend den Endpunkt POST http://localhost:3000/posts auf und \u00fcbergibt das post -Objekt, das im Request-Body versendet wird. Success Wir haben uns zwar in Sachen Progressive Web Apps nicht wirklich weiterentwickelt, aber wir haben nun erstmal einige n\u00fctzliche Hilfsmittel geschaffen, um eine \"gr\u00f6\u00dfere\" Anwendung sp\u00e4ter progressive zu gestalten. Es gibt nun eine Datenbank, die Bilder speichern kann und das passende Backend zur Anbindung der Datenbank. Zur Erleichterung der Dateneingabe in die Datenbank haben wir uns auch ein Frontend erstellt.","title":"post.service.ts"},{"location":"grundgeruest/","text":"Grundger\u00fcst unserer PWA \u00b6 Wir beginnen jetzt mit der Implementierung von progressive Funktionalit\u00e4ten. Das machen wir, indem wir sukzessive eine Progressive Web app erstellen, die viele der derzeit verf\u00fcgbaren Funktionalit\u00e4ten enth\u00e4lt, die derzeit f\u00fcr Progressive Web Apps verf\u00fcgbar sind. Das Grundger\u00fcst (oder der Ausgangspunkt) unserer PWA wird deshalb zur Verf\u00fcgung gestellt, weil wir uns nicht um die Implementierung von HTML, CSS und JavaScript, sondern nur um die progressive Funktionalit\u00e4ten k\u00fcmmern wollen. Auf Basis dieses Grundger\u00fcstes werden sukzessive Funktionalit\u00e4ten, wie Push-Notifikationen, Offline-Verwendung, Geolocation, Kameranutzung usw. hinzuf\u00fcgen. Die Idee ist, dass wir eine Art HTW-Instagram erstellen. ich habe Instagram aber noch nie genutzt, deshalb wei\u00df ich nicht, ob wir dem \"Original\" nahe kommen werden. Wahrscheinlich nicht, aber daf\u00fcr behalten wir unsere Daten auch bei uns. Installation \u00b6 Den Quellcode f\u00fcr das Grundger\u00fcst finden Sie hier (GitHub) . Clonen Sie sich das Projekt in einem Ordner Ihrer Wahl und folgen Sie dann der README.MD : Zum Ausf\u00fchren des Projektes wird Node.js verendet. Sie m\u00fcssen es auf Ihren Rechner installieren. In der Wahl Ihrer IDE sind Sie v\u00f6llig frei. Empfehlungen finden Sie unter https://freiheit.f4.htw-berlin.de/ikt/tools/#integrated-development-environment-ide Zum Starten des Projektes wechseln Sie im Terminal (Terminal Ihres Rechners oder das Terminal in der IDE) in den Projektordner ( cd IKT-PWA-01 ) und f\u00fchren dort npm install aus. Damit werden alle erforderlichen Abh\u00e4ngigkeiten installiert. Nach erfolgreicher Installation der Abh\u00e4ngigkeiten, geben Sie npm start ein, um Ihr Projekt auszuf\u00fchren. Klicken Sie danach auf localhost:8080 oder geben Sie die URL direkt in Ihren Browser ein. Sollten Sie \u00c4nderungen an der Implementierung vornehmen und diese ausprobieren wollen, m\u00fcssen Sie den Server zun\u00e4chst wieder stoppen: Ctrl-C und geben dann erneut npm start ein. Starten \u00b6 Starten Sie das Projekt mit npm start (nachdem Sie einmalig npm install ausgef\u00fcrht haben) und \u00f6ffnen Sie dann den Browser mit der URL http://localhost:8080/ . Es erscheint bzw. wenn Sie die Viewport-Breite verkleinern . Sie erkennen wahrscheinlich schon, dass wir Material Design Lite verwenden. Die Navigationskomponente kennen wir auch schon aus WebTech. Wenn Sie auf den + -Button klicken, erscheint ein kleines Men\u00fc. Dort k\u00f6nnen Sie zwar schon etwas eintragen, aber der SPEICHERN -Button funktioniert noch nicht. Auch beim BENACHRICHTIGUNGEN EIN -Button ist noch keine Ereignisbehandlung hinterlegt. Wenn Sie im Men\u00fc Hilfe klicken, \u00f6ffnet sich die (fast leere) Hilfe-Seite. Schalten Sie beim Betrachten der Anwendung stets die DeveloperTools ein. Sie k\u00f6nnen dort sehr leicht auf die mobile Ansicht wechseln. Wichtig ist, dass Sie - zum besseren Ausprobieren der Anwendung - in den DeveloperTools unter dem Reiter Network ein H\u00e4kchen bei Disable Cache setzen. Wir wollen in Zukunft das Caching unseren Service workern \u00fcberlassen und nicht den Cache des Browsers verwenden. Projekt \u00b6 Bevor wir loslegen, werfen wir noch einen kurzen Blick auf die bisherigen Dateien im Projekt. Wir beginnen mit der index.html aus dem public -Ordner. public/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div id = \"create-post\" > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > < img src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > < div class = \"page-content\" > < h5 class = \"text-center mdl-color-text--primary\" > HTW-Insta </ h5 > < div id = \"shared-moments\" ></ div > </ div > < div class = \"floating-button\" > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" id = \"share-image-button\" > < i class = \"material-icons\" > add </ i > </ button > </ div > < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Sie sieht recht umfangreich aus. tats\u00e4chlich ist aber das meiste darin f\u00fcr das Navigationstemplate. Die Zeilen 21-36 und 38-49 beschreiben das gleiche, n\u00e4mlich die Navigationsleiste. Der obere Block ist f\u00fcr breite Viewports (Klasse mdl-layout--large-screen-only ). Alle mdl -Klassen sind von Material. Einen guten \u00dcberblick \u00fcber die einzelnen Material-Komponenten finden Sie hier . N\u00e4heres zu den Navigationen finden Sie darin z.B. hier . Dann kommt das Bild (Zeilen 75-77 ), dann der Text HTW Insta (Zeilen 78-81 ) und dann der + -Button (Zeilen 82-87 ). In den Zeilen 88-91 ist bereits eine Best\u00e4tigungsnachricht hinterlegt, derzeit aber noch hidden . In den eingeundenen eigenen Stylesheets app.css und feed.css steht nicht viel: public/src/css/app.css 1 2 3 4 5 6 7 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; display : none ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } Kurze Erinnerung an CSS: Punktselektoren beschreiben Klassen (z.B. .input-selection ) und #-Selektoren beschreiben Ids (z.B. #create-post ). Sie k\u00f6nnen die Anwendung der Klassen und der Ids ja mal in der index.html suchen, wenn Sie m\u00f6chten. Die public/help/index.html enth\u00e4lt noch weniger als die public/index.html . Erw\u00e4hnenswert ist hier, dass wir mit einem Framework wie z.B. Angular nat\u00fcrlich der Navigation eine eigenen Komponente spendiert und diese nicht in beiden Dateien wiederholt h\u00e4tten. public/help/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Help </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/help.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/settings\" > Einstellungen </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Feed </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Help </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Brauchst Du Hilfe? </ h3 > < p > Hier erf\u00e4hrst Du, wie Du die App benutzen und neue Bildeintr\u00e4ge erstellen kannst. </ p > </ div > </ div > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Kontakt </ h3 > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > call </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > email </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > chat_bubble </ i > </ button > </ div > </ div > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > </ body > </ html > Von den beiden JavaScript-Dateien public/src/js/app.js und public/src/js/feed.js steht derzeit nur etwas in der feed.js . Das schauen wir uns aber erst dann an, wenn wir neue Bildeintr\u00e4ge speichern wollen.","title":"Grundger\u00fcst"},{"location":"grundgeruest/#grundgerust-unserer-pwa","text":"Wir beginnen jetzt mit der Implementierung von progressive Funktionalit\u00e4ten. Das machen wir, indem wir sukzessive eine Progressive Web app erstellen, die viele der derzeit verf\u00fcgbaren Funktionalit\u00e4ten enth\u00e4lt, die derzeit f\u00fcr Progressive Web Apps verf\u00fcgbar sind. Das Grundger\u00fcst (oder der Ausgangspunkt) unserer PWA wird deshalb zur Verf\u00fcgung gestellt, weil wir uns nicht um die Implementierung von HTML, CSS und JavaScript, sondern nur um die progressive Funktionalit\u00e4ten k\u00fcmmern wollen. Auf Basis dieses Grundger\u00fcstes werden sukzessive Funktionalit\u00e4ten, wie Push-Notifikationen, Offline-Verwendung, Geolocation, Kameranutzung usw. hinzuf\u00fcgen. Die Idee ist, dass wir eine Art HTW-Instagram erstellen. ich habe Instagram aber noch nie genutzt, deshalb wei\u00df ich nicht, ob wir dem \"Original\" nahe kommen werden. Wahrscheinlich nicht, aber daf\u00fcr behalten wir unsere Daten auch bei uns.","title":"Grundger\u00fcst unserer PWA"},{"location":"grundgeruest/#installation","text":"Den Quellcode f\u00fcr das Grundger\u00fcst finden Sie hier (GitHub) . Clonen Sie sich das Projekt in einem Ordner Ihrer Wahl und folgen Sie dann der README.MD : Zum Ausf\u00fchren des Projektes wird Node.js verendet. Sie m\u00fcssen es auf Ihren Rechner installieren. In der Wahl Ihrer IDE sind Sie v\u00f6llig frei. Empfehlungen finden Sie unter https://freiheit.f4.htw-berlin.de/ikt/tools/#integrated-development-environment-ide Zum Starten des Projektes wechseln Sie im Terminal (Terminal Ihres Rechners oder das Terminal in der IDE) in den Projektordner ( cd IKT-PWA-01 ) und f\u00fchren dort npm install aus. Damit werden alle erforderlichen Abh\u00e4ngigkeiten installiert. Nach erfolgreicher Installation der Abh\u00e4ngigkeiten, geben Sie npm start ein, um Ihr Projekt auszuf\u00fchren. Klicken Sie danach auf localhost:8080 oder geben Sie die URL direkt in Ihren Browser ein. Sollten Sie \u00c4nderungen an der Implementierung vornehmen und diese ausprobieren wollen, m\u00fcssen Sie den Server zun\u00e4chst wieder stoppen: Ctrl-C und geben dann erneut npm start ein.","title":"Installation"},{"location":"grundgeruest/#starten","text":"Starten Sie das Projekt mit npm start (nachdem Sie einmalig npm install ausgef\u00fcrht haben) und \u00f6ffnen Sie dann den Browser mit der URL http://localhost:8080/ . Es erscheint bzw. wenn Sie die Viewport-Breite verkleinern . Sie erkennen wahrscheinlich schon, dass wir Material Design Lite verwenden. Die Navigationskomponente kennen wir auch schon aus WebTech. Wenn Sie auf den + -Button klicken, erscheint ein kleines Men\u00fc. Dort k\u00f6nnen Sie zwar schon etwas eintragen, aber der SPEICHERN -Button funktioniert noch nicht. Auch beim BENACHRICHTIGUNGEN EIN -Button ist noch keine Ereignisbehandlung hinterlegt. Wenn Sie im Men\u00fc Hilfe klicken, \u00f6ffnet sich die (fast leere) Hilfe-Seite. Schalten Sie beim Betrachten der Anwendung stets die DeveloperTools ein. Sie k\u00f6nnen dort sehr leicht auf die mobile Ansicht wechseln. Wichtig ist, dass Sie - zum besseren Ausprobieren der Anwendung - in den DeveloperTools unter dem Reiter Network ein H\u00e4kchen bei Disable Cache setzen. Wir wollen in Zukunft das Caching unseren Service workern \u00fcberlassen und nicht den Cache des Browsers verwenden.","title":"Starten"},{"location":"grundgeruest/#projekt","text":"Bevor wir loslegen, werfen wir noch einen kurzen Blick auf die bisherigen Dateien im Projekt. Wir beginnen mit der index.html aus dem public -Ordner. public/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div id = \"create-post\" > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > < img src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > < div class = \"page-content\" > < h5 class = \"text-center mdl-color-text--primary\" > HTW-Insta </ h5 > < div id = \"shared-moments\" ></ div > </ div > < div class = \"floating-button\" > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" id = \"share-image-button\" > < i class = \"material-icons\" > add </ i > </ button > </ div > < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Sie sieht recht umfangreich aus. tats\u00e4chlich ist aber das meiste darin f\u00fcr das Navigationstemplate. Die Zeilen 21-36 und 38-49 beschreiben das gleiche, n\u00e4mlich die Navigationsleiste. Der obere Block ist f\u00fcr breite Viewports (Klasse mdl-layout--large-screen-only ). Alle mdl -Klassen sind von Material. Einen guten \u00dcberblick \u00fcber die einzelnen Material-Komponenten finden Sie hier . N\u00e4heres zu den Navigationen finden Sie darin z.B. hier . Dann kommt das Bild (Zeilen 75-77 ), dann der Text HTW Insta (Zeilen 78-81 ) und dann der + -Button (Zeilen 82-87 ). In den Zeilen 88-91 ist bereits eine Best\u00e4tigungsnachricht hinterlegt, derzeit aber noch hidden . In den eingeundenen eigenen Stylesheets app.css und feed.css steht nicht viel: public/src/css/app.css 1 2 3 4 5 6 7 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; display : none ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } Kurze Erinnerung an CSS: Punktselektoren beschreiben Klassen (z.B. .input-selection ) und #-Selektoren beschreiben Ids (z.B. #create-post ). Sie k\u00f6nnen die Anwendung der Klassen und der Ids ja mal in der index.html suchen, wenn Sie m\u00f6chten. Die public/help/index.html enth\u00e4lt noch weniger als die public/index.html . Erw\u00e4hnenswert ist hier, dass wir mit einem Framework wie z.B. Angular nat\u00fcrlich der Navigation eine eigenen Komponente spendiert und diese nicht in beiden Dateien wiederholt h\u00e4tten. public/help/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Help </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/help.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/settings\" > Einstellungen </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Feed </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Help </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Brauchst Du Hilfe? </ h3 > < p > Hier erf\u00e4hrst Du, wie Du die App benutzen und neue Bildeintr\u00e4ge erstellen kannst. </ p > </ div > </ div > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Kontakt </ h3 > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > call </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > email </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > chat_bubble </ i > </ button > </ div > </ div > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > </ body > </ html > Von den beiden JavaScript-Dateien public/src/js/app.js und public/src/js/feed.js steht derzeit nur etwas in der feed.js . Das schauen wir uns aber erst dann an, wenn wir neue Bildeintr\u00e4ge speichern wollen.","title":"Projekt"},{"location":"hilfen/","text":"Hilfen \u00b6 Hier erl\u00e4utern wir in losem Zusammenhang einzelne Aspekte. Arrow-Funktionen \u00b6 Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von function() schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar return weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent: function ( foo ) = { return foo + 1 ;} ( foo ) => { return foo + 1 ;} foo => { return foo + 1 ;} foo => foo + 1 ; Callback-Funktionen \u00b6 Eine Callback -Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion: 1 2 3 4 5 6 7 8 9 10 function greeting ( name ) { alert ( 'Hello ' + name ); } function processUserInput ( callback ) { var name = prompt ( 'Please enter your name.' ); callback ( name ); } processUserInput ( greeting ); In den Zeilen 1-3 wird eine Funktion greeting() definiert, welche einen name erwartet. Diese Funktion gibt Hello zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion greeting() wird als Callback -Funktion in der Funktion processUserInput() (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion greeting() wird der Funktion processUserInput() als Parameter \u00fcbergeben. Innerhalb der Funktion processUserInput() hei\u00dft die Referenz auf die Funktion greeting() callback . Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion processUserInput() aufgerufen (Zeile 10) und die Funktion greeting() als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der greeting() -Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe Hello plus dem Namen. Der Funktion processUserInput() k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden. JSON Web Tokens (JWT) \u00b6 Mithilfe von JSON Web Tokens (JWT) verwalten wir den Zugriff auf Webseiten (oder auf andere Server). Ein JSON Web Token besteht aus drei Teilen: einem Header , der den Typ des Tokens enth\u00e4lt ( JWT ) und den Verschl\u00fcsselungsalgorithmus, der zur Verschl\u00fcsselung der Informationen verwendet wird, z.B. SHA256 . einem Paload , der die Informationen \u00fcber die Ntzerin enth\u00e4lt und eventuell weitere Informationen, wie z.B. Rolle der Nutzerin, z.B. admin einer Signatur , die mithilfe des angegebenen Verschl\u00fcsselungsalgorithmus die Inforationen des Headers und der Payload verschl\u00fcsselt. Mithilfe der Signatur kann \u00fcberpr\u00fcft werden, ob ide Informationen im Header oder im Payload ge\u00e4ndert wurden oder nicht. Die drei Teile werden jeweils durch einen Punkt getrennt, d.h. ein JWT hat die Form header.payload.signature . Mithilfe des Codierers/De-Codierers von JWT k\u00f6nnen Sie das Codieren bzw. Decodieren nachvollziehen. Angenommen, Ihr Header ist { \"alg\": \"HS256\", \"typ\": \"JWT\" } , d.h. Sie verwenden SHA256 zur Verschl\u00fcsselung und der Typ ist JWT . Dann ist der erste Teil des JWT eyJhbGciOiJIUzI 1 NiIsI n R 5 cCI 6 IkpXVCJ 9 Angenommen, Ihr Payload ist { \"data\": [ { \"id\": 1, \"username\": \"test\", \"email\": \"test@test.de\", \"password\": \"098f6bcd4621d373cade4e832627b4f6\" } ], \"iat\": 1609061622 } Die data haben hier eine Struktur, wie sie h\u00e4ufig f\u00fcr Login-Daten verwendet werden. Das Passwort test ist md5 -verschl\u00fcsselt. iat steht f\u00fcr issued at und gibt die Zeit ( Unix-Time ) an, zu der das JWT erzeugt wurde (hier 27.12.2020). Dann ist der zweite Teil des JWT eyJkYXRhIjpbeyJpZCI 6 MSwidXNlcm 5 hbWUiOiJ 0 ZXN 0 IiwiZW 1 haWwiOiJ 0 ZXN 0 QHRlc 3 QuZGUiLCJwYXNzd 29 yZCI 6 IjA 5 OGY 2 YmNkNDYyMWQzNzNjYWRlNGU 4 MzI 2 MjdiNGY 2 I n 1 dLCJpYXQiOjE 2 MDkwNjE 2 MjJ 9 Wenn Sie als \"sichere\" Passphrase secret w\u00e4hlen und damit die Signatur erstellen, dann ist der dritet Teil des JWT XBWOvX 8 OceGmx 8 u 77 Y fs yQ tu pYYO 9 p 9 mUurvIqqwgdk Ausf\u00fchrliche Informationen \u00fcber JWT finden Sie hier .","title":"Hilfen"},{"location":"hilfen/#hilfen","text":"Hier erl\u00e4utern wir in losem Zusammenhang einzelne Aspekte.","title":"Hilfen"},{"location":"hilfen/#arrow-funktionen","text":"Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von function() schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar return weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent: function ( foo ) = { return foo + 1 ;} ( foo ) => { return foo + 1 ;} foo => { return foo + 1 ;} foo => foo + 1 ;","title":"Arrow-Funktionen"},{"location":"hilfen/#callback-funktionen","text":"Eine Callback -Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion: 1 2 3 4 5 6 7 8 9 10 function greeting ( name ) { alert ( 'Hello ' + name ); } function processUserInput ( callback ) { var name = prompt ( 'Please enter your name.' ); callback ( name ); } processUserInput ( greeting ); In den Zeilen 1-3 wird eine Funktion greeting() definiert, welche einen name erwartet. Diese Funktion gibt Hello zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion greeting() wird als Callback -Funktion in der Funktion processUserInput() (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion greeting() wird der Funktion processUserInput() als Parameter \u00fcbergeben. Innerhalb der Funktion processUserInput() hei\u00dft die Referenz auf die Funktion greeting() callback . Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion processUserInput() aufgerufen (Zeile 10) und die Funktion greeting() als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der greeting() -Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe Hello plus dem Namen. Der Funktion processUserInput() k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden.","title":"Callback-Funktionen"},{"location":"hilfen/#json-web-tokens-jwt","text":"Mithilfe von JSON Web Tokens (JWT) verwalten wir den Zugriff auf Webseiten (oder auf andere Server). Ein JSON Web Token besteht aus drei Teilen: einem Header , der den Typ des Tokens enth\u00e4lt ( JWT ) und den Verschl\u00fcsselungsalgorithmus, der zur Verschl\u00fcsselung der Informationen verwendet wird, z.B. SHA256 . einem Paload , der die Informationen \u00fcber die Ntzerin enth\u00e4lt und eventuell weitere Informationen, wie z.B. Rolle der Nutzerin, z.B. admin einer Signatur , die mithilfe des angegebenen Verschl\u00fcsselungsalgorithmus die Inforationen des Headers und der Payload verschl\u00fcsselt. Mithilfe der Signatur kann \u00fcberpr\u00fcft werden, ob ide Informationen im Header oder im Payload ge\u00e4ndert wurden oder nicht. Die drei Teile werden jeweils durch einen Punkt getrennt, d.h. ein JWT hat die Form header.payload.signature . Mithilfe des Codierers/De-Codierers von JWT k\u00f6nnen Sie das Codieren bzw. Decodieren nachvollziehen. Angenommen, Ihr Header ist { \"alg\": \"HS256\", \"typ\": \"JWT\" } , d.h. Sie verwenden SHA256 zur Verschl\u00fcsselung und der Typ ist JWT . Dann ist der erste Teil des JWT eyJhbGciOiJIUzI 1 NiIsI n R 5 cCI 6 IkpXVCJ 9 Angenommen, Ihr Payload ist { \"data\": [ { \"id\": 1, \"username\": \"test\", \"email\": \"test@test.de\", \"password\": \"098f6bcd4621d373cade4e832627b4f6\" } ], \"iat\": 1609061622 } Die data haben hier eine Struktur, wie sie h\u00e4ufig f\u00fcr Login-Daten verwendet werden. Das Passwort test ist md5 -verschl\u00fcsselt. iat steht f\u00fcr issued at und gibt die Zeit ( Unix-Time ) an, zu der das JWT erzeugt wurde (hier 27.12.2020). Dann ist der zweite Teil des JWT eyJkYXRhIjpbeyJpZCI 6 MSwidXNlcm 5 hbWUiOiJ 0 ZXN 0 IiwiZW 1 haWwiOiJ 0 ZXN 0 QHRlc 3 QuZGUiLCJwYXNzd 29 yZCI 6 IjA 5 OGY 2 YmNkNDYyMWQzNzNjYWRlNGU 4 MzI 2 MjdiNGY 2 I n 1 dLCJpYXQiOjE 2 MDkwNjE 2 MjJ 9 Wenn Sie als \"sichere\" Passphrase secret w\u00e4hlen und damit die Signatur erstellen, dann ist der dritet Teil des JWT XBWOvX 8 OceGmx 8 u 77 Y fs yQ tu pYYO 9 p 9 mUurvIqqwgdk Ausf\u00fchrliche Informationen \u00fcber JWT finden Sie hier .","title":"JSON Web Tokens (JWT)"},{"location":"indexeddb/","text":"IndexedDB \u00b6 Wir haben jetzt verschiedene Ressourcen in statischen und dynamischen Caches gespeichert. Unsere HTW-Insta -Anwendung sieht nun so aus . Diese Ressourcen lagen als Dateien vor, die wir \u00fcber eine URL abrufen konnten, also *.html -, *.js -, *.css - Dateien und Bilder. Jetzt wollen wir dynamisch Daten speichern, sogenannten dynamischen Inhalt . Diese Daten k\u00f6nnen ausgelesen und den unterschiedlichen Dateien hinzugef\u00fcgt bzw. durch Dateien hinzugef\u00fcgt werden. Wir k\u00f6nnen uns das wirklich wie eine Datenbank vorstellen, aus der wir diese Daten ziehen, nur dass diese Datenbank nicht extern in einem Datenbankmanagementsystem verwaltet wird, sondern durch den Browser. Wir haben unter den Developer Tools diese \"Datenbank\" vielleicht schon im Application -Reiter auf der linken Seite unter Storage entdeckt. Es handelt sich um die IndexedDB . Bei der IndexedDB handelt es sich um eine transaktionsbasierte Datenbank, die Schl\u00fcssel-Werte-Paare im Browser speichert. Transaktionsbasiert bedeutet dabei, dass ganze Transaktionen ausgef\u00fchrt werden, die aus einzelnen Aktionen bestehen k\u00f6nnen. Wenn nur eine Aktion einer Transaktion fehlschl\u00e4gt, dann wird keine der Aktionen dieser Transaktion ausgef\u00fchrt. Das bedeutet, eine Transaktion wird entweder ganz oder gar nicht ausgef\u00fchrt. Unsere Transaktionen bestehen aber typischerweise nur aus wenigen Aktionen, das Transaktionskonzept spielt deshalb keine gro\u00dfe Rolle. Wir k\u00f6nnen beliebige Daten in die IndexedDB speichern, also auch Bilder, Dateien, Arrays, Objekte, usw. Ein wichtiger Unterschied zum Lokal Storage ist, dass wir sowohl \u00fcber den \"normalen\" JavaScript-Thread unserer Webanwendung als auch \u00fcber den Service Worker auf die IndexedDB zugreifen k\u00f6nnen. Das Backend nutzen \u00b6 Ehe wir aber mit der IndexedDB loslegen, wollen wir zun\u00e4chst einige Anpassungen in unserer HTW Insta -Anwendung durchf\u00fchren, damit sich unsere M\u00fchen mit dem Backend und dem Frontend auch gelohnt haben. Wir wollen die Daten f\u00fcr unsere Cards aus der Datenbank holen. Dazu muss das Backend gestartet sein ! \u00d6ffnen Sie die feed.js . Die fetch -Funktion passen wir nun so an, dass sie auf unser Backend zugreift: fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir nutzen also den GET http://localhost:3000/posts -Endpunkt, um uns alle Daten aus der Datenbank zu holen. Wir f\u00fcgen einen Funktionsaufruf einer neuen Funktion updateUI(data) ein. Diese Funktion macht nichts weiter, als die createCard() -Funktion f\u00fcr jeden einzelnen Datensatz aufzurufen: function updateUI ( data ) { for ( let i = 0 ; i < data . length ; i ++ ) { createCard ( data [ i ]); } } Die createCard() -Funktion war allerdings bis jetzt parameterlos. Nun \u00fcbergeben wir unseren Datensatz und nutzen die einzelnen Werte daraus f\u00fcr die Erstellung einer Card : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function createCard ( data ) { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; let image = new Image (); image . src = \"data:image/png;base64,\" + data . image ; cardTitle . style . backgroundImage = 'url(' + image . src + ')' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = data . title ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = data . location ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } Das \"Zusammenbauen\" des base64 -Strings ist ein wenig aufwendiger. Wir ben\u00f6tigen ein Image -Objekt, dem wir als Wert des src -Attributes den durch die Konkatenation \"data:image/png;base64,\" + data.image Strings \u00fcbergeben. Dann wird der src -Wert des Image -Objektes als eine URL f\u00fcr das Hintergrundbild einer Card verwendet (Zeilen 6-8 ). Damit die image -Eigenschaft unseres Datensatzes kein ArrayBuffer ist, sondern ein String, habe ich im Backend im PostController die readAll -Methode ver\u00e4ndert. Mit \"plain\" JavaScript konnte ich nicht aus dem ArrayBuffer ein Bild erzeugen. Falls Ihnen das gelingt, dann w\u00fcrde ich mich \u00fcber Information freuen! In der readAll -Funktion habe ich aus dem Buffer mithilfe der toString() -Methode einen String erzeugt und diesen anstelle des ArrayBuffers gesendet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 readAll : ( req , res ) => { PostService . getAll (( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting all posts\" , }); else { console . log ( result ); let arr = []; result . forEach ( post => { let buff = new Buffer ( post . image , 'base64' ); let text = buff . toString ( 'ascii' ); //console.log(text); post . image = text ; arr . push ( post ); }); res . json ( arr ); } }); }, Dadurch kommen die Daten auch bereits als Array im Frontend an. Je nachdem, welche Daten Sie alle in Ihrer Datenbank haben, sieht die Anwendung nun so aus: Beachten Sie auch, dass sowohl der statische als auch der dynamische Service-Worker-Cache funktioniert. Das hei\u00dft, wenn Sie Ihre Anwendung offline schalten, dann ist immer noch alles da. Warum dynamische Inhalte \"cachen\"? \u00b6 Wenn wir nun bereits alle Ressourcen (html-Dateien, js-Dateien, css-Dateien und Bilddateien) im Service-Worker-Cache gespeichert haben (statisch und oder dynamisch), dann stellt sich nat\u00fcrlich die Frage, warum wir \u00fcberhaupt noch eine In-Browser-Datenbank verwenden sollen und wollen. Die beiden Terme, die dabei unterschieden werden, sind dynamic caching und caching dynamic content , also dynamische Inhalte speichern. Beides hat caching im Namen und dynamic , ist auch nicht so viel anders. Dynamic caching haben wir bis jetzt durchgef\u00fchrt. Die Webanwendung stellt eine Anfrage an den Webserver, der Service Worker schaltet sich jedoch als Proxy dazwischen. Wenn der Service Worker die Anfrage selbst aus dem Cache beantworten kann, wird sie gar nicht erst an den Webserver weitergeleitet. Wenn nicht, dann geht die Anfrage zum Webserver, der schickt eine Antwort zur\u00fcck, die der Service Worker aber auch in seinen dynamischen Cache ablegt, um sie beim n\u00e4chsten Mal aus dem Cache beantworten zu k\u00f6nnen. Beim dynamic caching werden also dynamisch Ressourcen im Cache abgelegt. Beim Speichern von dynamischen Inhalten mithilfe der In-Browser-IndexedDB spielt die Fetch-API keine Rolle. es geht auch nicht darum, Ressourcen, wie html-, css, oder js-Dateien zu speichern. Vielmehr werden in der Datenbank strukturierte (aber auch unstrukturierte) Daten, wie JSON- oder XML-Daten gespeichert. Prinzipiell geht es um das Speichern von Schl\u00fcssel-Werte-Paaren . Prim\u00e4r handelt es sich bei den Daten in der IndexedDB aber um dynamische, sich h\u00e4ufig \u00e4ndernde Daten - dynamic content . W\u00e4hrend wir beim dynamic caching eher davon ausgehen, Ressourcen zu speichern, die sich nicht h\u00e4ufig \u00e4ndern, ist das bei der IndexedDB anders. Dort gehen wir davon aus, dass sich diese Daten h\u00e4ufig \u00e4ndern. Ein weiterer Unterschied liegt darin, dass wir mit dynamic caching stets nur vollst\u00e4ndige Responses speichern, also eine Ressource gaz oder gar nicht. Das muss in der IndexedDB nicht sein. Wir k\u00f6nnten in der IndexedDB z.B. von einem Post immer nur post.title und post.location speichern, nicht aber post.image (oder umgekehrt). Au\u00dferdem lassen sich die Daten in der IndexedDB auch \u00e4ndern oder in ein anderes Format umwandeln. Wir haben in Bezug auf die gespeicherten Ressourcen in der IndexedDB mehr Flexibilit\u00e4t. Das idb-Paket \u00b6 Da die API zur IndexedDB sehr umst\u00e4ndlich zu handhaben ist und viele Callbacks erfordert, wird die Verwendung anderer Pakete empfohlen, die sich als Wrapper um die API legen und die Verwendung von Promises erm\u00f6glichen. Oft wird z.B. Dexie verwendet. Wir verwenden zun\u00e4chst den idb-Warpper von Jake Archibald. Ich verwende im Folgenden dieses idb.js , das Sie sich hier herunterladen und einfach in Ihren /public/src/js -Ordner kopieren k\u00f6nnen. Diese Datei binden wir zun\u00e4chst \u00fcber die index.html -Datei ein: index.html 107 108 109 110 111 112 113 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Im Service Worker haben wir normalerweise keinen direkten Zugriff auf die Skripte und Dateien unserer Webanwendung. Daf\u00fcr gibt es jedoch die importScripts() -Anweisung. Wir importieren damit unsere idb.js -Datei in den Service Worker und wir laden diese Datei auch in den Cache: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wir f\u00fchren zun\u00e4chst noch einige \u00c4nderungen in unserer Service Worker Datei sw.js durch. Zun\u00e4chst lagern wir alle Dateien, die wir in dem statischen Cache speichern wollen, in ein eigenes Array STATIC_FILES aus: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; const STATIC_FILES = [ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ( STATIC_FILES ); }) ); }) // hier der Rest Das hat keine weitere Bedeutung und strukturiert nur den Code besser. Wichtiger aber ist es, die Behandlung des fetch -Ereignisses zu \u00fcberdenken. Derzeit sieht die Behandlung so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Das hei\u00dft, dass jeder Request \u00fcberpr\u00fcft wird, ob er aus dem Cache beantwortet werden kann und wenn ja, dann wird die response aus dem Cache zur\u00fcckgegeben (Zeile 10 ). Wenn nicht, dann wird der Request an den Webserver weitergeleitet, die Antwort in den dynamischen Cache gelegt und an die Webanwendung weitergereicht (Zeilen 12-20 ). Das betrifft jeden Request. Wir wollen nun aber die Anfragen, die an http//localhost:3000/posts gestellt werden, anders behandeln. Dazu speichern wir dieses url und pr\u00fcfen, ob diese Anfrage an diese URL geht. Wenn ja, behandeln wir sie anders, wenn nicht, dann so, wie bisher: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wie wir diese Anfragen an http://localhost:3000/posts behandeln, schauen wir uns gleich an. Wir haben jetzt nur eine Unterscheidung hinzugef\u00fcgt, ob die Anfrage an http://localhost:3000/posts geht oder nicht. Wenn ja, leiten wir die Anfrage an den Webserver weiter (Zeile 9 ) und geben die Response zur\u00fcck (Zeile 12 ). Wenn nicht, dann behandeln wir die Anfrage wir bisher. Zun\u00e4chst erstellen wir aber die IndexedDB. Erstellen und \u00d6ffnen einer IndexedDB \u00b6 Nachdem wir f\u00fcr den Service Worker die importScripts() -Anweisung kennengelernt haben, k\u00f6nnten wir nun verschiedene Skripts erstellen und diese in den Service Worker einbinden, also z.B. ein Skript f\u00fcr die Behandlung des fetch -Ereignisses und ein Skript f\u00fcr die Verwaltung der IndexedDB . Wir lassen aber hier alles in der sw.js und erstellen und \u00f6ffnen zun\u00e4chst eine neue IndexedDB, die wir posts-store nennen. Dies geht mit der openDB() -Funktion aus dem idb -Paket (siehe README.md ): public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wir haben nun eine \"eigene\" IndexDB namens post-store erstellt. Der store darin hei\u00dft posts . In diesem store speichern wir alle Daten der Posts. Mit der Eigenschaft keyPath definieren wir den Schl\u00fcssel f\u00fcr diesen store . \u00dcber diesen Schl\u00fcssel gelangen wir an unserer Daten. Mithilfe der Funktion createIndex() verbinden wir das Attribut id unserer Posts-Datens\u00e4tze mit diesem Schl\u00fcssel. F\u00fcr uns bedeutet das schlicht, dass id der Schl\u00fcssel sowoehl in der IndexedDB als auch in unserer MySQL-Datenbank f\u00fcr alle Posts ist. Wenn wir die Anwendung nun ausf\u00fchren, dann sehen wir in den Developer Tools im Reiter Application links im Men\u00fc unter Storage --> IndexedDB diese Datenbank. Diese ist noch leer, wir machen ja noch nichts damit. Behandlung fetch -Event anpassen \u00b6 Nun passen wir die Behandlung des fetch -Ereignisses f\u00fcr die Anfragen an http://localhost:3000/posts an. Wir haben derzeit folgende Ausgangssituation (siehe oben): 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { // dynamischer Cache }) Wir behandeln die Anfrage an das Backend nun wie folgt: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { // dynamischer Cache }) Wir clonen zun\u00e4chst die Response, da sie nur einmal \"verbraucht\" werden kann (Zeile 70 ). Dann wird diese geclonte Response in ein JSON umgewandelt (Zeile 71 ). Dieses JSON beschreibt ein JavaScript-Objekt mit den Schl\u00fcsseln id , title , location und image - so, wie es unser Backend zur\u00fcckgibt. Wir gehen nun in einer for -Schleife durch alle diese Schl\u00fcssel-Werte-Paare durch (Zeile 73 ). In Zeile 75 greifen wir auf das Promise-Objekt zu, das die Datenbank verwaltet, die wir zuvor mittels openDB() ge\u00f6ffnet haben. Dieser Promise verwaltet sich selbst. Das bedeutet, dass dbPosts genau f\u00fcr die von uns ge\u00f6ffnete IndexedDB steht. Wir k\u00f6nnen nur nicht erneut db benutzen, deshalb dbPosts (Zeile 76 ). Als erstes erstellen wir eine Transaktion . Wie bereits gesagt, ist die IndexedDB transaktionsbasiert . Jede Operation ist somit eine Transaktion . Wir erstellen eine Transaktion tx (Zeile 77 ). Diese Transaktion wird durch die Funktion transaction() erzeugt. Die Funktion erwaret zwei Parameter: der erste Parameter beschreibt den store , auf den die Transaktion zugreift (bei uns posts ). der zweite Parameter beschreibt, ob wir nur lesend auf diesen store zugreifen wollen ( 'readonly' ) oder auch schreibend ( 'readwrite' ). Nach der Definition der Transaktion muss f\u00fcr die Transaktion nochmal die Eigenschaft store aufgerufen werden (siehe README.md des idb-Paketes ). Darin steht aber auch, dass man tx.objectStore(storeName) aufrufen soll, wenn die Transaktion mehrere Stores verwendet. Deshalb rufen wir einfach immer tx.objectStore(storeName) auf, da das auch funktioniert, wenn nur ein store verwendet wird (Zeile 78 ). In Zeile 79 werden die einzelnen Schl\u00fcssel-Werte-Paare dann in die IndexedDB gespeichert. Nach Ausf\u00fchren der Anwendung sieht die IndexedDB nun (je nachdem, welche Daten Sie bereits in Ihrer Datenbank gespeichert haben) so aus: Sie k\u00f6nnen sich auch hier eine Datei herunterladen, die INSERT INTO posts -SQL-Anweisungen f\u00fcr die angezeigten 5 Datens\u00e4tze enth\u00e4lt (k\u00f6nnen Sie so in phpmyadmin als Datei importieren). Wir haben nun die IndexedDB des Browsers mit unseren Datens\u00e4tzen bef\u00fcllt. Nun \u00fcberlegen wir uns, wie wir diese Datens\u00e4tze aus der IndexedDB auslesen k\u00f6nnen, wenn wir sie dort gespeichert haben und dann gar nicht mehr an das Backend Anfragen schicken m\u00fcssen. Datens\u00e4tze aus der IndexedDB auslesen \u00b6 Zun\u00e4chst einmal stellen wir fest, dass ein geeigneter Ort, die Datens\u00e4tze aus der IndexedDB auszulesen, die feed.js ist, da dort ja die Daten zum Erstellen der Cards verwendet werden. Schauen wir uns deshalb dort die fetch() -Funktion an (siehe auch Das Backend nutzen ). 1 2 3 4 5 6 7 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir stellen dort eine Anfrage an das Backend und verwenden die vom Backend \u00fcbergebenen Daten ( data ), um die Cards zu erstellen ( updateUI(data) ). Das hei\u00dft, dass wir nun die IndexedDB auch in feed.js verwenden wollen - also in unserer \"Webanwendung\" (und nicht \"nur\" im Service Worker). Das hei\u00dft aber auch, dass wir nun auch in der Webanwendung die IndexedDB \u00f6ffnen m\u00fcssen usw. und wir dort \u00e4hnlichen Code h\u00e4tten, wie auch bereits im Service Worker. Um doppelten Code zu vermeiden, lagern wir deshalb einigen Code in eine db.js aus. Wir bewegen (move) zun\u00e4chst den Code zum \u00d6ffnen der IndexedDB aus der sw.js nach db.js : /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); Dann erstellen wir uns in der db.js eine Funktion writeData() , die in die IndexedDB die Daten schreibt. Dazu bewegen wir den folgenden Block aus der sw.js nach db.js : sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Die db.js sieht dann so aus: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData () { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } Damit die writeData() -Funktion m\u00f6glichst generisch ist, \u00fcbergeben wir als Parameter den store ( posts ) und wir m\u00fcssen nat\u00fcrlich auch data \u00fcbergeben: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } Wichtig ist, dass wir das db -Promise-Objekt in writeData() nun zur\u00fcckgeben m\u00fcssen, d.h. wir ben\u00f6tigen ein return in Zeile 16 . Nun m\u00fcssen wir diese db.js nat\u00fcrlich importieren, sowohl in den Service Worker als auch in die Webanwendung (da sie ja feed.js zur Verf\u00fcgung stehen soll). Beide Importe m\u00fcssen hinter dem Import der idb.js stehen, da die db.js Funktionen der idb.js verwendet. sw.js 1 2 3 4 5 6 7 importScripts ( '/src/js/idb.js' ); importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v4' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v4' ; // ... und hier der Rest sowie f\u00fcr die /public/src/js/*.js -Datein in der index.html : index.html 107 108 109 110 111 112 113 114 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/db.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > In die sw.js setzen wir noch den Aufruf von writeData('posts', data) an der richtigen Stelle ein: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { writeData ( 'posts' , data [ key ]); } }) return res ; }) ) } else { \u00dcbrigens: Da wir f\u00fcr die Behandlung des fetch -Events nun zwischen den Aufrufen an den Webserver und an das Backend unterscheiden, werden die Requests der Backend-Aufrufe nun nicht mehr im (dynamischen) Cache gespeichert. Das bedeutet, dass unsere Anwendung in dem derzeitigen Zustand offline nicht funktioniert, da dann die Cards nicht angezeigt werden. Deshalb wollen wir ja in die feed.js nun die Abfrage an die IndexedDB einbauen, damit die Daten von dort geholt werden k\u00f6nnen. Dazu erweitern wir die db.js zun\u00e4chst um eine readAllData(store) -Funktion, in der wir alle Daten aus der IndexedDB auslesen. /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } Im Gegensatz zur writeData() -Funktion m\u00fcssen wir beim Lesen der Daten ( readonly ) nicht darauf warten, dass die Transaktion vollst\u00e4ndig abgearbeitet ist ( tx.done ), sondern wir k\u00f6nnen die Funktion mit dem Promise verlassen, in dem alle Daten zur Verf\u00fcgung gestellt sind. Rein lesende Transaktionen k\u00f6nnen auf der Datenbank keinen \"Schaden\" anrichten. Deshalb k\u00f6nnen wir auf das tx.done verzichten. Alles andere ist im Prinzip wie bei writeData() , nur dass wir nun nur readonly Zugriff haben und die getAll() -Funktion aufrufen. Diese readAllData() -Funktion bauen wir nun in die feed.js ein. Dazu betrachten wir die fetch -Funktion darin zun\u00e4chst noch einmal: /public/src/js/feed.js 55 56 57 58 59 60 61 62 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { console . log ( data ); updateUI ( data ); }); Diese Funktion f\u00fchrt ein GET auf das Backend durch und holt sich von dort alle Daten. Wir \u00e4ndern diese Funktion zun\u00e4chst leicht, um zu erkennen, wann die Daten tats\u00e4chlich vom Backend geholt wurden. /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); Dazu erstellen wir uns eine Variable networkDataReceived , die auf true gesetzt wird, falls wir die Daten vom Backend holen. Dazu eine passende Ausgabe auf die Konsole. Nun erweiteren wir die feed.js um das Lesen der Daten aus der IndexedDB. Dazu f\u00fcgen wir folgende Anweisung hinzu: /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); if ( 'indexedDB' in window ) { readAllData ( 'posts' ) . then ( data => { if ( ! networkDataReceived ) { console . log ( 'From cache ...' , data ); updateUI ( data ); } }) } In Zeile 67 \u00fcberpr\u00fcfen wir zun\u00e4chst, ob der Browser \u00fcberhaupt die IndexedDB-API unterst\u00fctzt. Wenn ja, dann lesen wir mithilfe der readAllData() -Funktion aus der db.js alle Daten aus dem posts -Store. Sollten die Daten nicht vom Backend geholt worden sein (sonst w\u00e4re networkDataReceived === true ), dann werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen ( updateUI(data) in Zeile 72 ). Das hei\u00dft, wir haben hier eine network first -Strategie implemntiert. Wenn der Zugriff auf das Backend m\u00f6glich ist, dann werden die Daten von dort geholt und auch dazu verwendet, um die Cards zu erstellen. Nur f\u00fcr den Fall, dass das Netzwerk nicht verf\u00fcgbar ist, werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen. Wir testen diese Implementierung. Achten Sie darauf , die Versionsnummern der Caches in der sw.js zu \u00e4ndern, denn wir haben ja die index.html und die feed.js ge\u00e4ndert. Diese \u00c4nderungen w\u00fcrden nicht wirksam sein, ohne Versions\u00e4nderungen der Caches, da ansonsten die Dateien aus dem statischen Cache und nicht vom Webserver gelesen w\u00fcrden. Stellen Sie auch sicher, dass Ihr Backend gestartet ist. Reloaden Sie die Anwendung im Browser. skipWaiting den neuen Service Worker checken, ob der neuen statische Cache unter Cache --> Cache-Storage verwendet wird checken, ob die IndexedDB bef\u00fcllt ist (sollte durch writeData() im Service Worker passieren) In der Console steht From backend ... mit dem dazugeh\u00f6rigen Data-Array Schalten Sie im Service Worker die Anwendung nun offline und reloaden Sie die Anwendung In der Console erscheint Fetch failed loading GET http://localhost:3000/posts mit dem dazugeh\u00f6rigen Fehler, aber es erscheint auch From cache ... mit dem dazugeh\u00f6rigen Daten-Array. Es werden alle cards erstellt und angezeigt. Die Anwendung ist nun auch insofern offline -f\u00e4hig geworden, dass nun die dynamischen Daten in die IndexedDB geschrieben und aus der IndexedDB gelesen werden. L\u00f6schen der IndexedDB \u00b6 Wir schreiben unsere Daten in die IndexedDB mithilfe der put() -Funktion (sie Funktion writeDate() in der db.js und darin store.put(data) ). Diese Funktion schreibt ein Schl\u00fcssel-Werte-Paar in den entsprechenden store . Existiert der \u00fcbergebene Schl\u00fcssel noch nicht, wird das Schl\u00fcssel-Werte-Paar der IndexedDB hinzugef\u00fcgt. Existiert der Schl\u00fcssel bereits, wird der alte Wert mit dem neuen Wert \u00fcberschrieben. Dadurch, dass es sich um lauter Schl\u00fcssel-Werte-Paare in der IndexedDB handelt, werden \"alte\" Schl\u00fcssel-Werte-Paare jedoch nicht gel\u00f6scht. Angenommen, wir rufen die writeData() -Funktion f\u00fcr alle Datens\u00e4tze auf, die in unserer Datenbank gespeichert haben und angenommen, wir haben aus dieser Datenbank einen Datensatz gel\u00f6scht, der aber noch in der IndexedDB gespeichert ist. Dann w\u00fcrde dieser Datensatz auch in der IndexedDB verbleiben. Wir schreiben uns deshalb eine Funktion, die zun\u00e4chst alle Daten in der Datenbank l\u00f6scht. Diese f\u00fchren wir dann immer aus, bevor wir die neuen Daten hinzuf\u00fcgen. In der db.js f\u00fcgen wir dazu die Funktion clearAllData() hinzu: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } function clearAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . clear (); return tx . done ; }) } Diese rufen wir nun in der sw.js auf, bevor wir die neuen Daten in die IndexedDB schreiben: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { clonedResponse . json () . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }) }); return res ; }) ) } else { Die Funktion clearAllData() gibt ein Promise-Objekt zur\u00fcck. Nach dem erfolgreichen L\u00f6schen der Datenbank, k\u00f6nnen die neuen Daten hinzugef\u00fcgt werden. Deshalb wird das komplette clonedResponse -Promise-Objekt in die then() -Funktion des clearAllData() -Promise-Objektes geschoben. Aus dieser Verschachtelung k\u00f6nnen wir aber auch eine .then() -Verkettung machen, die vielleicht besser zu lesen ist (dann aber nicht das return vor clonedResponse.json(); vergessen): sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }); return res ; }) ) } else { L\u00f6schen einzelner Eintr\u00e4ge \u00b6 Es k\u00f6nnen auch einzelne Eintr\u00e4ge aus der IndexedDb gel\u00f6scht werden. Der Zugriff auf die Datens\u00e4tze erfolgt \u00fcber den keyPath id (siehe Erstellen der Datenbank und dort openDB() ). Wir f\u00fcgen der db.js eine weitere Funktion deleteOneData() hinzu. Diese Funktion ben\u00f6tigt als Parameter nebden dem store auch die id des Datensatzes, den wir l\u00f6schen wollen. /public/src/js/db.js 45 46 47 48 49 50 51 52 53 54 55 56 function deleteOneData ( st , id ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . delete ( id ); return tx . done ; }) . then ( () => { console . log ( 'Data deleted ...' ); }); } Wir geben das promise-Objekt db nicht zur\u00fcck, sondern \"verwerten\" es gleich hier, indem wir nach dem L\u00f6schen eine Ausgabe auf die Konsole erzeugen. Das Testen dieser Funktion in unserer Anwendnung ist derzeit nur \"Spielerei\". Sp\u00e4ter nutzen wir diese Funktion aber sinnvoll. Der Test k\u00f6nnte in der sw.js z.B. so aussehen, dass wir nach dem Schreiben eines neuen Datensatzes fragen, ob er die id === 5 hat und wenn ja, l\u00f6schen wir ihn gleich wieder: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); if ( data [ key ]. id === 5 ) deleteOneData ( 'posts' , 5 ); } }); return res ; }) ) } else { Die Zeile 73 k\u00f6nnen wir danach gleich wieder l\u00f6schen. Wir werden diese Funktion aber sp\u00e4ter noch sinnvoll einsetzen. Beachten Sie , dass Sie nach \u00c4nderungen an der IndexedDB diese zun\u00e4chst \"refreshen\" m\u00fcssen (Button Refresh database - siehe Abbildung). Success Wir k\u00f6nnen nun die In-Browser-Datenbank IndexedDB verwenden, um dynamische Daten zu speichern, auszulesen und zu l\u00f6schen. Somit bleibt unsere Anwendung auch dann noch aktiv, auch wenn das Backend (und/oder die Datenbank) nicht erreichbar ist. Die IndexedDB kann f\u00fcr alle Arten von Schl\u00fcssel-Werte-Paaren verwendet werden. Weitere Informationen finden Sie unter IndexedDB API .","title":"IndexedDB"},{"location":"indexeddb/#indexeddb","text":"Wir haben jetzt verschiedene Ressourcen in statischen und dynamischen Caches gespeichert. Unsere HTW-Insta -Anwendung sieht nun so aus . Diese Ressourcen lagen als Dateien vor, die wir \u00fcber eine URL abrufen konnten, also *.html -, *.js -, *.css - Dateien und Bilder. Jetzt wollen wir dynamisch Daten speichern, sogenannten dynamischen Inhalt . Diese Daten k\u00f6nnen ausgelesen und den unterschiedlichen Dateien hinzugef\u00fcgt bzw. durch Dateien hinzugef\u00fcgt werden. Wir k\u00f6nnen uns das wirklich wie eine Datenbank vorstellen, aus der wir diese Daten ziehen, nur dass diese Datenbank nicht extern in einem Datenbankmanagementsystem verwaltet wird, sondern durch den Browser. Wir haben unter den Developer Tools diese \"Datenbank\" vielleicht schon im Application -Reiter auf der linken Seite unter Storage entdeckt. Es handelt sich um die IndexedDB . Bei der IndexedDB handelt es sich um eine transaktionsbasierte Datenbank, die Schl\u00fcssel-Werte-Paare im Browser speichert. Transaktionsbasiert bedeutet dabei, dass ganze Transaktionen ausgef\u00fchrt werden, die aus einzelnen Aktionen bestehen k\u00f6nnen. Wenn nur eine Aktion einer Transaktion fehlschl\u00e4gt, dann wird keine der Aktionen dieser Transaktion ausgef\u00fchrt. Das bedeutet, eine Transaktion wird entweder ganz oder gar nicht ausgef\u00fchrt. Unsere Transaktionen bestehen aber typischerweise nur aus wenigen Aktionen, das Transaktionskonzept spielt deshalb keine gro\u00dfe Rolle. Wir k\u00f6nnen beliebige Daten in die IndexedDB speichern, also auch Bilder, Dateien, Arrays, Objekte, usw. Ein wichtiger Unterschied zum Lokal Storage ist, dass wir sowohl \u00fcber den \"normalen\" JavaScript-Thread unserer Webanwendung als auch \u00fcber den Service Worker auf die IndexedDB zugreifen k\u00f6nnen.","title":"IndexedDB"},{"location":"indexeddb/#das-backend-nutzen","text":"Ehe wir aber mit der IndexedDB loslegen, wollen wir zun\u00e4chst einige Anpassungen in unserer HTW Insta -Anwendung durchf\u00fchren, damit sich unsere M\u00fchen mit dem Backend und dem Frontend auch gelohnt haben. Wir wollen die Daten f\u00fcr unsere Cards aus der Datenbank holen. Dazu muss das Backend gestartet sein ! \u00d6ffnen Sie die feed.js . Die fetch -Funktion passen wir nun so an, dass sie auf unser Backend zugreift: fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir nutzen also den GET http://localhost:3000/posts -Endpunkt, um uns alle Daten aus der Datenbank zu holen. Wir f\u00fcgen einen Funktionsaufruf einer neuen Funktion updateUI(data) ein. Diese Funktion macht nichts weiter, als die createCard() -Funktion f\u00fcr jeden einzelnen Datensatz aufzurufen: function updateUI ( data ) { for ( let i = 0 ; i < data . length ; i ++ ) { createCard ( data [ i ]); } } Die createCard() -Funktion war allerdings bis jetzt parameterlos. Nun \u00fcbergeben wir unseren Datensatz und nutzen die einzelnen Werte daraus f\u00fcr die Erstellung einer Card : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function createCard ( data ) { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; let image = new Image (); image . src = \"data:image/png;base64,\" + data . image ; cardTitle . style . backgroundImage = 'url(' + image . src + ')' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = data . title ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = data . location ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } Das \"Zusammenbauen\" des base64 -Strings ist ein wenig aufwendiger. Wir ben\u00f6tigen ein Image -Objekt, dem wir als Wert des src -Attributes den durch die Konkatenation \"data:image/png;base64,\" + data.image Strings \u00fcbergeben. Dann wird der src -Wert des Image -Objektes als eine URL f\u00fcr das Hintergrundbild einer Card verwendet (Zeilen 6-8 ). Damit die image -Eigenschaft unseres Datensatzes kein ArrayBuffer ist, sondern ein String, habe ich im Backend im PostController die readAll -Methode ver\u00e4ndert. Mit \"plain\" JavaScript konnte ich nicht aus dem ArrayBuffer ein Bild erzeugen. Falls Ihnen das gelingt, dann w\u00fcrde ich mich \u00fcber Information freuen! In der readAll -Funktion habe ich aus dem Buffer mithilfe der toString() -Methode einen String erzeugt und diesen anstelle des ArrayBuffers gesendet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 readAll : ( req , res ) => { PostService . getAll (( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting all posts\" , }); else { console . log ( result ); let arr = []; result . forEach ( post => { let buff = new Buffer ( post . image , 'base64' ); let text = buff . toString ( 'ascii' ); //console.log(text); post . image = text ; arr . push ( post ); }); res . json ( arr ); } }); }, Dadurch kommen die Daten auch bereits als Array im Frontend an. Je nachdem, welche Daten Sie alle in Ihrer Datenbank haben, sieht die Anwendung nun so aus: Beachten Sie auch, dass sowohl der statische als auch der dynamische Service-Worker-Cache funktioniert. Das hei\u00dft, wenn Sie Ihre Anwendung offline schalten, dann ist immer noch alles da.","title":"Das Backend nutzen"},{"location":"indexeddb/#warum-dynamische-inhalte-cachen","text":"Wenn wir nun bereits alle Ressourcen (html-Dateien, js-Dateien, css-Dateien und Bilddateien) im Service-Worker-Cache gespeichert haben (statisch und oder dynamisch), dann stellt sich nat\u00fcrlich die Frage, warum wir \u00fcberhaupt noch eine In-Browser-Datenbank verwenden sollen und wollen. Die beiden Terme, die dabei unterschieden werden, sind dynamic caching und caching dynamic content , also dynamische Inhalte speichern. Beides hat caching im Namen und dynamic , ist auch nicht so viel anders. Dynamic caching haben wir bis jetzt durchgef\u00fchrt. Die Webanwendung stellt eine Anfrage an den Webserver, der Service Worker schaltet sich jedoch als Proxy dazwischen. Wenn der Service Worker die Anfrage selbst aus dem Cache beantworten kann, wird sie gar nicht erst an den Webserver weitergeleitet. Wenn nicht, dann geht die Anfrage zum Webserver, der schickt eine Antwort zur\u00fcck, die der Service Worker aber auch in seinen dynamischen Cache ablegt, um sie beim n\u00e4chsten Mal aus dem Cache beantworten zu k\u00f6nnen. Beim dynamic caching werden also dynamisch Ressourcen im Cache abgelegt. Beim Speichern von dynamischen Inhalten mithilfe der In-Browser-IndexedDB spielt die Fetch-API keine Rolle. es geht auch nicht darum, Ressourcen, wie html-, css, oder js-Dateien zu speichern. Vielmehr werden in der Datenbank strukturierte (aber auch unstrukturierte) Daten, wie JSON- oder XML-Daten gespeichert. Prinzipiell geht es um das Speichern von Schl\u00fcssel-Werte-Paaren . Prim\u00e4r handelt es sich bei den Daten in der IndexedDB aber um dynamische, sich h\u00e4ufig \u00e4ndernde Daten - dynamic content . W\u00e4hrend wir beim dynamic caching eher davon ausgehen, Ressourcen zu speichern, die sich nicht h\u00e4ufig \u00e4ndern, ist das bei der IndexedDB anders. Dort gehen wir davon aus, dass sich diese Daten h\u00e4ufig \u00e4ndern. Ein weiterer Unterschied liegt darin, dass wir mit dynamic caching stets nur vollst\u00e4ndige Responses speichern, also eine Ressource gaz oder gar nicht. Das muss in der IndexedDB nicht sein. Wir k\u00f6nnten in der IndexedDB z.B. von einem Post immer nur post.title und post.location speichern, nicht aber post.image (oder umgekehrt). Au\u00dferdem lassen sich die Daten in der IndexedDB auch \u00e4ndern oder in ein anderes Format umwandeln. Wir haben in Bezug auf die gespeicherten Ressourcen in der IndexedDB mehr Flexibilit\u00e4t.","title":"Warum dynamische Inhalte \"cachen\"?"},{"location":"indexeddb/#das-idb-paket","text":"Da die API zur IndexedDB sehr umst\u00e4ndlich zu handhaben ist und viele Callbacks erfordert, wird die Verwendung anderer Pakete empfohlen, die sich als Wrapper um die API legen und die Verwendung von Promises erm\u00f6glichen. Oft wird z.B. Dexie verwendet. Wir verwenden zun\u00e4chst den idb-Warpper von Jake Archibald. Ich verwende im Folgenden dieses idb.js , das Sie sich hier herunterladen und einfach in Ihren /public/src/js -Ordner kopieren k\u00f6nnen. Diese Datei binden wir zun\u00e4chst \u00fcber die index.html -Datei ein: index.html 107 108 109 110 111 112 113 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Im Service Worker haben wir normalerweise keinen direkten Zugriff auf die Skripte und Dateien unserer Webanwendung. Daf\u00fcr gibt es jedoch die importScripts() -Anweisung. Wir importieren damit unsere idb.js -Datei in den Service Worker und wir laden diese Datei auch in den Cache: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wir f\u00fchren zun\u00e4chst noch einige \u00c4nderungen in unserer Service Worker Datei sw.js durch. Zun\u00e4chst lagern wir alle Dateien, die wir in dem statischen Cache speichern wollen, in ein eigenes Array STATIC_FILES aus: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; const STATIC_FILES = [ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ( STATIC_FILES ); }) ); }) // hier der Rest Das hat keine weitere Bedeutung und strukturiert nur den Code besser. Wichtiger aber ist es, die Behandlung des fetch -Ereignisses zu \u00fcberdenken. Derzeit sieht die Behandlung so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Das hei\u00dft, dass jeder Request \u00fcberpr\u00fcft wird, ob er aus dem Cache beantwortet werden kann und wenn ja, dann wird die response aus dem Cache zur\u00fcckgegeben (Zeile 10 ). Wenn nicht, dann wird der Request an den Webserver weitergeleitet, die Antwort in den dynamischen Cache gelegt und an die Webanwendung weitergereicht (Zeilen 12-20 ). Das betrifft jeden Request. Wir wollen nun aber die Anfragen, die an http//localhost:3000/posts gestellt werden, anders behandeln. Dazu speichern wir dieses url und pr\u00fcfen, ob diese Anfrage an diese URL geht. Wenn ja, behandeln wir sie anders, wenn nicht, dann so, wie bisher: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wie wir diese Anfragen an http://localhost:3000/posts behandeln, schauen wir uns gleich an. Wir haben jetzt nur eine Unterscheidung hinzugef\u00fcgt, ob die Anfrage an http://localhost:3000/posts geht oder nicht. Wenn ja, leiten wir die Anfrage an den Webserver weiter (Zeile 9 ) und geben die Response zur\u00fcck (Zeile 12 ). Wenn nicht, dann behandeln wir die Anfrage wir bisher. Zun\u00e4chst erstellen wir aber die IndexedDB.","title":"Das idb-Paket"},{"location":"indexeddb/#erstellen-und-offnen-einer-indexeddb","text":"Nachdem wir f\u00fcr den Service Worker die importScripts() -Anweisung kennengelernt haben, k\u00f6nnten wir nun verschiedene Skripts erstellen und diese in den Service Worker einbinden, also z.B. ein Skript f\u00fcr die Behandlung des fetch -Ereignisses und ein Skript f\u00fcr die Verwaltung der IndexedDB . Wir lassen aber hier alles in der sw.js und erstellen und \u00f6ffnen zun\u00e4chst eine neue IndexedDB, die wir posts-store nennen. Dies geht mit der openDB() -Funktion aus dem idb -Paket (siehe README.md ): public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wir haben nun eine \"eigene\" IndexDB namens post-store erstellt. Der store darin hei\u00dft posts . In diesem store speichern wir alle Daten der Posts. Mit der Eigenschaft keyPath definieren wir den Schl\u00fcssel f\u00fcr diesen store . \u00dcber diesen Schl\u00fcssel gelangen wir an unserer Daten. Mithilfe der Funktion createIndex() verbinden wir das Attribut id unserer Posts-Datens\u00e4tze mit diesem Schl\u00fcssel. F\u00fcr uns bedeutet das schlicht, dass id der Schl\u00fcssel sowoehl in der IndexedDB als auch in unserer MySQL-Datenbank f\u00fcr alle Posts ist. Wenn wir die Anwendung nun ausf\u00fchren, dann sehen wir in den Developer Tools im Reiter Application links im Men\u00fc unter Storage --> IndexedDB diese Datenbank. Diese ist noch leer, wir machen ja noch nichts damit.","title":"Erstellen und \u00d6ffnen einer IndexedDB"},{"location":"indexeddb/#behandlung-fetch-event-anpassen","text":"Nun passen wir die Behandlung des fetch -Ereignisses f\u00fcr die Anfragen an http://localhost:3000/posts an. Wir haben derzeit folgende Ausgangssituation (siehe oben): 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { // dynamischer Cache }) Wir behandeln die Anfrage an das Backend nun wie folgt: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { // dynamischer Cache }) Wir clonen zun\u00e4chst die Response, da sie nur einmal \"verbraucht\" werden kann (Zeile 70 ). Dann wird diese geclonte Response in ein JSON umgewandelt (Zeile 71 ). Dieses JSON beschreibt ein JavaScript-Objekt mit den Schl\u00fcsseln id , title , location und image - so, wie es unser Backend zur\u00fcckgibt. Wir gehen nun in einer for -Schleife durch alle diese Schl\u00fcssel-Werte-Paare durch (Zeile 73 ). In Zeile 75 greifen wir auf das Promise-Objekt zu, das die Datenbank verwaltet, die wir zuvor mittels openDB() ge\u00f6ffnet haben. Dieser Promise verwaltet sich selbst. Das bedeutet, dass dbPosts genau f\u00fcr die von uns ge\u00f6ffnete IndexedDB steht. Wir k\u00f6nnen nur nicht erneut db benutzen, deshalb dbPosts (Zeile 76 ). Als erstes erstellen wir eine Transaktion . Wie bereits gesagt, ist die IndexedDB transaktionsbasiert . Jede Operation ist somit eine Transaktion . Wir erstellen eine Transaktion tx (Zeile 77 ). Diese Transaktion wird durch die Funktion transaction() erzeugt. Die Funktion erwaret zwei Parameter: der erste Parameter beschreibt den store , auf den die Transaktion zugreift (bei uns posts ). der zweite Parameter beschreibt, ob wir nur lesend auf diesen store zugreifen wollen ( 'readonly' ) oder auch schreibend ( 'readwrite' ). Nach der Definition der Transaktion muss f\u00fcr die Transaktion nochmal die Eigenschaft store aufgerufen werden (siehe README.md des idb-Paketes ). Darin steht aber auch, dass man tx.objectStore(storeName) aufrufen soll, wenn die Transaktion mehrere Stores verwendet. Deshalb rufen wir einfach immer tx.objectStore(storeName) auf, da das auch funktioniert, wenn nur ein store verwendet wird (Zeile 78 ). In Zeile 79 werden die einzelnen Schl\u00fcssel-Werte-Paare dann in die IndexedDB gespeichert. Nach Ausf\u00fchren der Anwendung sieht die IndexedDB nun (je nachdem, welche Daten Sie bereits in Ihrer Datenbank gespeichert haben) so aus: Sie k\u00f6nnen sich auch hier eine Datei herunterladen, die INSERT INTO posts -SQL-Anweisungen f\u00fcr die angezeigten 5 Datens\u00e4tze enth\u00e4lt (k\u00f6nnen Sie so in phpmyadmin als Datei importieren). Wir haben nun die IndexedDB des Browsers mit unseren Datens\u00e4tzen bef\u00fcllt. Nun \u00fcberlegen wir uns, wie wir diese Datens\u00e4tze aus der IndexedDB auslesen k\u00f6nnen, wenn wir sie dort gespeichert haben und dann gar nicht mehr an das Backend Anfragen schicken m\u00fcssen.","title":"Behandlung fetch-Event anpassen"},{"location":"indexeddb/#datensatze-aus-der-indexeddb-auslesen","text":"Zun\u00e4chst einmal stellen wir fest, dass ein geeigneter Ort, die Datens\u00e4tze aus der IndexedDB auszulesen, die feed.js ist, da dort ja die Daten zum Erstellen der Cards verwendet werden. Schauen wir uns deshalb dort die fetch() -Funktion an (siehe auch Das Backend nutzen ). 1 2 3 4 5 6 7 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir stellen dort eine Anfrage an das Backend und verwenden die vom Backend \u00fcbergebenen Daten ( data ), um die Cards zu erstellen ( updateUI(data) ). Das hei\u00dft, dass wir nun die IndexedDB auch in feed.js verwenden wollen - also in unserer \"Webanwendung\" (und nicht \"nur\" im Service Worker). Das hei\u00dft aber auch, dass wir nun auch in der Webanwendung die IndexedDB \u00f6ffnen m\u00fcssen usw. und wir dort \u00e4hnlichen Code h\u00e4tten, wie auch bereits im Service Worker. Um doppelten Code zu vermeiden, lagern wir deshalb einigen Code in eine db.js aus. Wir bewegen (move) zun\u00e4chst den Code zum \u00d6ffnen der IndexedDB aus der sw.js nach db.js : /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); Dann erstellen wir uns in der db.js eine Funktion writeData() , die in die IndexedDB die Daten schreibt. Dazu bewegen wir den folgenden Block aus der sw.js nach db.js : sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Die db.js sieht dann so aus: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData () { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } Damit die writeData() -Funktion m\u00f6glichst generisch ist, \u00fcbergeben wir als Parameter den store ( posts ) und wir m\u00fcssen nat\u00fcrlich auch data \u00fcbergeben: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } Wichtig ist, dass wir das db -Promise-Objekt in writeData() nun zur\u00fcckgeben m\u00fcssen, d.h. wir ben\u00f6tigen ein return in Zeile 16 . Nun m\u00fcssen wir diese db.js nat\u00fcrlich importieren, sowohl in den Service Worker als auch in die Webanwendung (da sie ja feed.js zur Verf\u00fcgung stehen soll). Beide Importe m\u00fcssen hinter dem Import der idb.js stehen, da die db.js Funktionen der idb.js verwendet. sw.js 1 2 3 4 5 6 7 importScripts ( '/src/js/idb.js' ); importScripts ( '/src/js/db.js' ); const CURRENT_STATIC_CACHE = 'static-v4' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v4' ; // ... und hier der Rest sowie f\u00fcr die /public/src/js/*.js -Datein in der index.html : index.html 107 108 109 110 111 112 113 114 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/db.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > In die sw.js setzen wir noch den Aufruf von writeData('posts', data) an der richtigen Stelle ein: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { writeData ( 'posts' , data [ key ]); } }) return res ; }) ) } else { \u00dcbrigens: Da wir f\u00fcr die Behandlung des fetch -Events nun zwischen den Aufrufen an den Webserver und an das Backend unterscheiden, werden die Requests der Backend-Aufrufe nun nicht mehr im (dynamischen) Cache gespeichert. Das bedeutet, dass unsere Anwendung in dem derzeitigen Zustand offline nicht funktioniert, da dann die Cards nicht angezeigt werden. Deshalb wollen wir ja in die feed.js nun die Abfrage an die IndexedDB einbauen, damit die Daten von dort geholt werden k\u00f6nnen. Dazu erweitern wir die db.js zun\u00e4chst um eine readAllData(store) -Funktion, in der wir alle Daten aus der IndexedDB auslesen. /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } Im Gegensatz zur writeData() -Funktion m\u00fcssen wir beim Lesen der Daten ( readonly ) nicht darauf warten, dass die Transaktion vollst\u00e4ndig abgearbeitet ist ( tx.done ), sondern wir k\u00f6nnen die Funktion mit dem Promise verlassen, in dem alle Daten zur Verf\u00fcgung gestellt sind. Rein lesende Transaktionen k\u00f6nnen auf der Datenbank keinen \"Schaden\" anrichten. Deshalb k\u00f6nnen wir auf das tx.done verzichten. Alles andere ist im Prinzip wie bei writeData() , nur dass wir nun nur readonly Zugriff haben und die getAll() -Funktion aufrufen. Diese readAllData() -Funktion bauen wir nun in die feed.js ein. Dazu betrachten wir die fetch -Funktion darin zun\u00e4chst noch einmal: /public/src/js/feed.js 55 56 57 58 59 60 61 62 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { console . log ( data ); updateUI ( data ); }); Diese Funktion f\u00fchrt ein GET auf das Backend durch und holt sich von dort alle Daten. Wir \u00e4ndern diese Funktion zun\u00e4chst leicht, um zu erkennen, wann die Daten tats\u00e4chlich vom Backend geholt wurden. /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); Dazu erstellen wir uns eine Variable networkDataReceived , die auf true gesetzt wird, falls wir die Daten vom Backend holen. Dazu eine passende Ausgabe auf die Konsole. Nun erweiteren wir die feed.js um das Lesen der Daten aus der IndexedDB. Dazu f\u00fcgen wir folgende Anweisung hinzu: /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); if ( 'indexedDB' in window ) { readAllData ( 'posts' ) . then ( data => { if ( ! networkDataReceived ) { console . log ( 'From cache ...' , data ); updateUI ( data ); } }) } In Zeile 67 \u00fcberpr\u00fcfen wir zun\u00e4chst, ob der Browser \u00fcberhaupt die IndexedDB-API unterst\u00fctzt. Wenn ja, dann lesen wir mithilfe der readAllData() -Funktion aus der db.js alle Daten aus dem posts -Store. Sollten die Daten nicht vom Backend geholt worden sein (sonst w\u00e4re networkDataReceived === true ), dann werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen ( updateUI(data) in Zeile 72 ). Das hei\u00dft, wir haben hier eine network first -Strategie implemntiert. Wenn der Zugriff auf das Backend m\u00f6glich ist, dann werden die Daten von dort geholt und auch dazu verwendet, um die Cards zu erstellen. Nur f\u00fcr den Fall, dass das Netzwerk nicht verf\u00fcgbar ist, werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen. Wir testen diese Implementierung. Achten Sie darauf , die Versionsnummern der Caches in der sw.js zu \u00e4ndern, denn wir haben ja die index.html und die feed.js ge\u00e4ndert. Diese \u00c4nderungen w\u00fcrden nicht wirksam sein, ohne Versions\u00e4nderungen der Caches, da ansonsten die Dateien aus dem statischen Cache und nicht vom Webserver gelesen w\u00fcrden. Stellen Sie auch sicher, dass Ihr Backend gestartet ist. Reloaden Sie die Anwendung im Browser. skipWaiting den neuen Service Worker checken, ob der neuen statische Cache unter Cache --> Cache-Storage verwendet wird checken, ob die IndexedDB bef\u00fcllt ist (sollte durch writeData() im Service Worker passieren) In der Console steht From backend ... mit dem dazugeh\u00f6rigen Data-Array Schalten Sie im Service Worker die Anwendung nun offline und reloaden Sie die Anwendung In der Console erscheint Fetch failed loading GET http://localhost:3000/posts mit dem dazugeh\u00f6rigen Fehler, aber es erscheint auch From cache ... mit dem dazugeh\u00f6rigen Daten-Array. Es werden alle cards erstellt und angezeigt. Die Anwendung ist nun auch insofern offline -f\u00e4hig geworden, dass nun die dynamischen Daten in die IndexedDB geschrieben und aus der IndexedDB gelesen werden.","title":"Datens\u00e4tze aus der IndexedDB auslesen"},{"location":"indexeddb/#loschen-der-indexeddb","text":"Wir schreiben unsere Daten in die IndexedDB mithilfe der put() -Funktion (sie Funktion writeDate() in der db.js und darin store.put(data) ). Diese Funktion schreibt ein Schl\u00fcssel-Werte-Paar in den entsprechenden store . Existiert der \u00fcbergebene Schl\u00fcssel noch nicht, wird das Schl\u00fcssel-Werte-Paar der IndexedDB hinzugef\u00fcgt. Existiert der Schl\u00fcssel bereits, wird der alte Wert mit dem neuen Wert \u00fcberschrieben. Dadurch, dass es sich um lauter Schl\u00fcssel-Werte-Paare in der IndexedDB handelt, werden \"alte\" Schl\u00fcssel-Werte-Paare jedoch nicht gel\u00f6scht. Angenommen, wir rufen die writeData() -Funktion f\u00fcr alle Datens\u00e4tze auf, die in unserer Datenbank gespeichert haben und angenommen, wir haben aus dieser Datenbank einen Datensatz gel\u00f6scht, der aber noch in der IndexedDB gespeichert ist. Dann w\u00fcrde dieser Datensatz auch in der IndexedDB verbleiben. Wir schreiben uns deshalb eine Funktion, die zun\u00e4chst alle Daten in der Datenbank l\u00f6scht. Diese f\u00fchren wir dann immer aus, bevor wir die neuen Daten hinzuf\u00fcgen. In der db.js f\u00fcgen wir dazu die Funktion clearAllData() hinzu: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } function clearAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . clear (); return tx . done ; }) } Diese rufen wir nun in der sw.js auf, bevor wir die neuen Daten in die IndexedDB schreiben: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { clonedResponse . json () . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }) }); return res ; }) ) } else { Die Funktion clearAllData() gibt ein Promise-Objekt zur\u00fcck. Nach dem erfolgreichen L\u00f6schen der Datenbank, k\u00f6nnen die neuen Daten hinzugef\u00fcgt werden. Deshalb wird das komplette clonedResponse -Promise-Objekt in die then() -Funktion des clearAllData() -Promise-Objektes geschoben. Aus dieser Verschachtelung k\u00f6nnen wir aber auch eine .then() -Verkettung machen, die vielleicht besser zu lesen ist (dann aber nicht das return vor clonedResponse.json(); vergessen): sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }); return res ; }) ) } else {","title":"L\u00f6schen der IndexedDB"},{"location":"indexeddb/#loschen-einzelner-eintrage","text":"Es k\u00f6nnen auch einzelne Eintr\u00e4ge aus der IndexedDb gel\u00f6scht werden. Der Zugriff auf die Datens\u00e4tze erfolgt \u00fcber den keyPath id (siehe Erstellen der Datenbank und dort openDB() ). Wir f\u00fcgen der db.js eine weitere Funktion deleteOneData() hinzu. Diese Funktion ben\u00f6tigt als Parameter nebden dem store auch die id des Datensatzes, den wir l\u00f6schen wollen. /public/src/js/db.js 45 46 47 48 49 50 51 52 53 54 55 56 function deleteOneData ( st , id ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . delete ( id ); return tx . done ; }) . then ( () => { console . log ( 'Data deleted ...' ); }); } Wir geben das promise-Objekt db nicht zur\u00fcck, sondern \"verwerten\" es gleich hier, indem wir nach dem L\u00f6schen eine Ausgabe auf die Konsole erzeugen. Das Testen dieser Funktion in unserer Anwendnung ist derzeit nur \"Spielerei\". Sp\u00e4ter nutzen wir diese Funktion aber sinnvoll. Der Test k\u00f6nnte in der sw.js z.B. so aussehen, dass wir nach dem Schreiben eines neuen Datensatzes fragen, ob er die id === 5 hat und wenn ja, l\u00f6schen wir ihn gleich wieder: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); if ( data [ key ]. id === 5 ) deleteOneData ( 'posts' , 5 ); } }); return res ; }) ) } else { Die Zeile 73 k\u00f6nnen wir danach gleich wieder l\u00f6schen. Wir werden diese Funktion aber sp\u00e4ter noch sinnvoll einsetzen. Beachten Sie , dass Sie nach \u00c4nderungen an der IndexedDB diese zun\u00e4chst \"refreshen\" m\u00fcssen (Button Refresh database - siehe Abbildung). Success Wir k\u00f6nnen nun die In-Browser-Datenbank IndexedDB verwenden, um dynamische Daten zu speichern, auszulesen und zu l\u00f6schen. Somit bleibt unsere Anwendung auch dann noch aktiv, auch wenn das Backend (und/oder die Datenbank) nicht erreichbar ist. Die IndexedDB kann f\u00fcr alle Arten von Schl\u00fcssel-Werte-Paaren verwendet werden. Weitere Informationen finden Sie unter IndexedDB API .","title":"L\u00f6schen einzelner Eintr\u00e4ge"},{"location":"manifest/","text":"Web-App-Manifest \u00b6 Das Web-App-Manifest ist zun\u00e4chst einmal eine Datei, n\u00e4mlich manifest.webmanifest (ganz h\u00e4ufig liest man auch noch manifest.json - beides geht, aber die W3C-Spezifikation sagt manifest.webmanifest ). Sie wird also in der JavaScript Object Notation (JSON) geschrieben. Diese Datei dient als Information f\u00fcr den Browser. Sie wird also vom Browser ausgelesen. Beispielsweise kann in der manifest.webmanifest vereinbart werden, dass sich die Webanwendung selbst auf dem Startbildschirm Ihres Mobilger\u00e4tes installiert. Dann gen\u00fcgt ein Klick auf das Icon auf dem Startbildschirm und die Webanwendung wird durch den Browser ge\u00f6ffnet. Somit h\u00e4tten wir schonmal eine wesentliche Gemeinsamkeit zu einer nativen App geschaffen, welche ja auch durch ein Klick auf ein Icon auf dem Startbildschirm gestartet werden k\u00f6nnen. Wir lernen kennen, wie wir ein solches Manifest unserer PWA hinzuf\u00fcgen, wie es konfiguriert werden kann und wie wir die Auswirkungen eines solchen Manifestes auf mobilen Ger\u00e4ten sehen k\u00f6nnen. Installierbar \u00b6 Mithilfe eines Web-App-Manifestes machen wir unsere Webanwendung installierbar auf einem mobilen Ger\u00e4t. Die Anwendung muss nicht einem App-Store hinzugef\u00fcgt werden, sondern wird einfach \u00fcber das Web durch einen Browser geladen. Normalerweise kann eine Webanwendung ja nur dadurch gestartet werden, dass ihre URL in den Browser eingetragen wird (oder Sie haben ein lesezeichen auf die Webanwendung in Ihrem Browser gesetzt). Nun wollen wir auf den Startbildschirm des Smartphones ein Icon setzen (genau wie f\u00fcr native Apps) und dar\u00fcber die Anwendung starten. Daf\u00fcr f\u00fcgen wir im Projektordner in dem Ordner /public die Datei manifest.webmanifest hinzu: Diese Datei muss genau so hei\u00dfen (oder manifest.json , sollte aber nicht) und es ist g\u00fcnstig, sie in den /public -Ordner zu legen. Achten Sie darauf, wohin Sie die Datei legen. Wenn Sie sie direkt in den Projektordner legen, dann gelten alle Pfadangaben in dieser Datei ausgehend von dieser Position. Wenn Sie sie in den public -Ordner legen, so wie wir, dann betrachten Sie die relativen Pfade, die Sie angeben, immer von diesem Ordner aus. Nun m\u00fcssen wir diese Datei jeder HTML-Seite unserer Anwendung bekannt machen. In unserer Anwendung existieren zwei *.html -Dateien, die public/index.html und die public/help/index.html . In beide Datein tragen wir im <head folgenden Eintrag ein: < link rel = \"manifest\" href = \"/manifest.webmanifest\" > Aber Achtung! : Die public/help/index.html liegt ja im Unterordner /help . Das bedeutet, dass von der Datei public/help/index.html aus gesehen, muss der help -Ordner erst verlassen werden, um die manifest.webmanifest -Datei zu erreichen. In die public/help/index.html schreiben wir also < link rel = \"manifest\" href = \"../manifest.webmanifest\" > Das hei\u00dft, der <head> -Bereich der public/index.html sieht dann wie folgt aus (und der von public/help/index.html sehr \u00e4hnlich - achten Sie auf den korrekten relativen Pfad!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"/manifest.webmanifest\" > </ head > In einer Single Page Application muss der Eintrag nur einmal erfolgen - in der single page. M\u00f6gliche Eigenschaften in der manifest.webmanifest \u00b6 Eintr\u00e4ge in einer JSON-Datei sind key-value-Paare , d.h. ein Eintrag hat die folgende Form: \"property\" : value oder auf Deutsch \"eigenschaft\": wert . JSON-Dateien beginnen und enden immer mit einer geschweiften Klammer und die einzelnen key-value-Paare sind durch Komma getrennt. value jann selbst ein JSON sein oder ein Array oder ein String oder eine Zahl. Wir betrachten nun einige ausgew\u00e4hlte properties , die in einer manifest.json definiert werden k\u00f6nnen. Einen vollst\u00e4ndigen \u00dcberblick \u00fcber alle m\u00f6glichen Eigenschaften und deren Umsetzung in den einzelnen Browsern finden Sie hier . Eine kurze Einf\u00fchrung zu manifest.webmanifest finden Sie auch hier . Die Spezifikation f\u00fcr das Web-App-Manifest vom W3C finden Sie hier . name \u00b6 Mit der Eigenschaft name geben wir unserer Webanwendung eine Beschreibung. In der package.json haben wir unserer Anwendung bereits einen Namen gegeben, aber name aus der manifest.webmanifest beschreibt zum Beispiel den Namen der App auf dem Begr\u00fc\u00dfungsschrim, wie wir gleich sehen werden. Es ist ratsam, den Namen nicht l\u00e4nger als 45 Zeichen zu w\u00e4hlen (das ist die Begrenzung, die Google Chrome und Microsoft Edge f\u00fcr sich festgelegt haben). Wir sagen mal: \"name\" : \"HTW-Insta Erweiterung\" Die Eigenschaft name ist in der manifest.webmanifest verpflichtend, d.h. sie muss angegeben werden (au\u00dferdem noch version und manifest_version , alle anderen Eigenschaften sind optional.) short_name \u00b6 Der Wert von short_name wird z.B. verwendet als Name unserer App unter dem Icon auf dem Startbildschirm (falls der Name dort mit erscheint). Der short_name sollte nicht l\u00e4nger als 12 Zeichen sein. Ist kein short_name in der manifest.webmanifest angegeben, wird der Wert von name verwendet und, falls n\u00f6tig, einfach gek\u00fcrzt. \"short_name\" : \"HTW-Insta\" start_url \u00b6 Der Wert von start_url gibt den Pfad und die Datei an, die beim Starten unserer Anwendung geladen werden soll. In unserem Fall soll die /public/index.html geladen werden. Die manifest.webmanifest -Datei befindet sich im /public -ordner, also ist der Pfad zur Datei nur / .: \"start_url\" : \"/index.html\" Beachten Sie (nochmal): der Pfad ist immer relativ zur manifest.webmanifest . Anegenommen, der Wert von start_url ist ../start_point.html und die URL der manifest.webmanifest ist https://example.com/resources/manifest.webmanifest , dann w\u00fcrde die Anwendung unter https://example.com/start_point.html starten. display \u00b6 Der Wert von display gibt an, wie die Anwendung beim Start aussehen soll. Wir haben die Auswahl zwischen den folgenden Werten: \"fullscreen\" , \"standalone\" , \"minimal-ui\" , \"browser\" N\u00e4here Erl\u00e4uterungen zu den einzelnen Werten finden Sie hier , aber am besten ist, Sie probieren die unterschiedlichen Werte einfach mal aus. \"display\" : \"standalone\" Bei \"standalone\" wird das Browser-fenster ausgeblendet, d.h. wir sehen die URL-Leiste nicht und auch nicht die Steuerelemente des Browsers. Die Anwendung wirkt wie eine native App. background_color \u00b6 Der Wert von background_color ist eine Farbe, die wir typischerweise in hexadezimaler Schreibweise angeben. Ob wir diese Farbe \u00fcberhaupt sehen, h\u00e4ngt davon ab, wie lange unsere Anwendung zum Laden bracuht, denn mit background_color geben wir die Hintergrundfarbe des Bildschirms an, der gezeigt wird, w\u00e4hrend die Anwendung l\u00e4dt. Meistens sieht man das nicht, weil der Ladevorgang so schnell ist. \"background_color\" : \"#76B900\" Wir w\u00e4hlen nat\u00fcrlich das HTW-Gr\u00fcn. theme_color \u00b6 Der Wert von theme_color ist eine Farbe, die z.B. die Farbe der Werkzeugleiste auf dem Smartphone bestimmt. \"theme_color\" : \"#FF5F00\" Wir w\u00e4hlen mal das HTW-Orange. description \u00b6 Wenn der Browser eine Beschreibung der App speichert, dann nutzt er den Wert von description , z.B. wenn Sie die App als Lesezeichen speichern. \"description\" : \"Eine tolle HTW-Insta-PWA\" lang \u00b6 Mit der lang uage-Eigeneschaft definieren Sie die Sprache Ihrer App. Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"lang\" : \"de-DE\" Diese Eigenschaft wird vom Browser als Meta-Eigenschaft verwendet, kennen Sie schon aus den HTML-Dokumenten. dir \u00b6 Mit der dir ection-Eigeneschaft definieren Sie die Textrichtung Ihrer App. Die Werte sind einer der drei: \"ltr\" ( left to right ) \"rtl\" ( right to left ) \"auto\" Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"dir\" : \"ltr\" orientation \u00b6 Mit der orientation -Eigeneschaft definieren Sie, in welchem Bildschirmmodus die App betrieben (geffnet) werden soll. Bei den Werten haben Sie die Wahl zwischen: \"any\" \"natural\" \"landscape\" \"landscape-primary\" \"landscape-secondary\" \"portrait\" \"portrait-primary\" \"portrait-secondary\" Die Angaben primary und secondary beziehen sich jeweils auf eine 180-Grad-Dreheung des Ger\u00e4tes. secondary \u00f6ffnet es also jeweils \"auf dem Kopf\". \"orientation\" : \"portrait-primary\" Die Web-App sollte aber so gebaut werden, dass sie sowohl im Portrait- als auch im Landscape-Modus gut bedient werden kann (responsive). icons \u00b6 Die icons -Eigenschaft enth\u00e4lt ein Array aus Icons, die als das Icon der App auf dem Startbildschirm verwendet werden k\u00f6nnen. Typischerweise gibt man hier mehrere an, die sich in ihrer Aufl\u00f6sung unterscheiden, um das geeignete Icon ausw\u00e4hlen zu k\u00f6nnen, das zur Aufl\u00f6sung des Ausgabeger\u00e4tes passt. Gute Dimensionen sind z.B. 48X48 Pixel bis hin zu 512x512 Pixel. Die Beschreibung eines Icons ist selbst ein JSON und enth\u00e4lt drei Eigenschaften: \"src\" (der Pafd zum Icon und die Datei) \"type\" (der Typ des Bildes, z.B. image/png ) \"sizes\" (die Gr\u00f6\u00dfe des Bildes in Pixeln) Der Browser sucht sich in Abh\u00e4ngigkeit von der Aufl\u00f6sung des Ausgabeger\u00e4tes das am besten geeignete Icon selbst\u00e4ndig aus. \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] Auch hier sind wieder die korrekten relativen Pfade zu beachten. Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons und auch die obige JSON zu erzeugen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Bitte unbedingt verwenden, um sich m\u00fchsame Arbeit zu sparen! Testen der manifest.webmanifest \u00b6 Insgesamt sieht unsere manifest.webmanifest nun so aus: public/manifest.webmanifest { \"name\" : \"HTW-Insta Erweiterung\" , \"short_name\" : \"HTW-Insta\" , \"start_url\" : \"/index.html\" , \"display\" : \"standalone\" , \"background_color\" : \"#76B900\" , \"description\" : \"Eine tolle HTW-Insta-PWA\" , \"lang\" : \"de-DE\" , \"dir\" : \"ltr\" , \"orientation\" : \"portrait-primary\" , \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] } Wir rufen unsere Anwendung im Browser (Verwenden Sie Google Chrome!) auf und \u00f6ffnen au\u00dferdem die DevTools: W\u00e4hlen Sie f\u00fcr die Darstellung der App eine Mobilansicht aus ( ) und klicken Sie auf den Reiter Application in den DevTools. Klicken Sie in den DevTools unter dem Reiter Application im linken Application -Men\u00fc auf Manifest . Dort sehen Sie, dass Ihre Konfiguration korrekt eingelesen wird. Es sollte nur eine einizige Warnung erscheinen, dass wir (noch) keine service worker eingerichtet haben. Um die Funktionsweise des Web-App-Manifestes tats\u00e4chlich zu testen, ben\u00f6tigen wir jedoch ein Smartphone (oder Tablet). Wir wollen ein solches emulieren (ein Android-Smartphone) und starten dazu Android Studio . Wenn wir Android Studio \u00f6ffnen, w\u00e4hlen wir zun\u00e4chst + Create New Project . Durch die folgenden Vorschl\u00e4ge k\u00f6nnen wir einfach stets mit Next und dann mit Finish navigieren, ohne irgendetwas zu \u00e4ndern. Wir sind gar nicht am Projekt interessiert, sondern nur am AVD Manager ( Android Virtual Device Manaager ), den wir unter dem Men\u00fcpunkt Tools finden. Nach dem \u00d6ffnen des AVD-Managers haben Sie die M\u00f6glichkeit, weitere Android-Phones zur Liste Ihrer virtuellen Ger\u00e4te hinzuzuf\u00fcgen. Das k\u00f6nnen Sie ruhig machen, um ger\u00e4te mit verschiedenen Aufl\u00f6sungen ausprobieren zu k\u00f6nnen. W\u00e4hlen Sie dann ein Ger\u00e4t Ihrer Wahl und klicken Sie f\u00fcr das Ger\u00e4t unter der Spalte Actions auf den Play-Button: Das dauert dann eine ganze Weile, aber am Ende erscheint ein Smartphone auf Ihrem Bildschirm: Auf diesem Android-ger\u00e4t ist Google Chrome verf\u00fcgbar. Starten Sie Google Chrome dort durch Mausklick und geben Sie als URL 10.0.2.2.:8080 ein. Unsere Webanwendung wird ge\u00f6ffnet: Klicken Sie jetzt auf die drei vertikalen Punkte neben der URL-Leiste und w\u00e4hlen Sie Add to Home screen : Es wird uns eines unserer Icons angeboten und der unter name gew\u00e4hlte Name: Klicken Sie Add und dann Add automatically . Das Icon erscheint auf dem Homescreen (Startbildschirm). Eventuell m\u00fcssen Sie den Browser zuvor schlie\u00dfen. Klicken Sie auf das Icon, um unsere Anwendung zu starten. Sie sehen kurz den Splashscreen mit der von uns gew\u00e4hlten Hintergrundfarbe HTW-Gr\u00fcn. Beachten Sie auch, dass um unsere Anwendung herum kein Browser-Fenster zu sehen ist. Sie l\u00e4uft standalone (nat\u00fcrlich im Browser, aber der ist nicht zu sehen). Das sieht man insbesondere, wenn man sich alle ge\u00f6ffneten Anwendungen anschaut: Sobald wir f\u00fcr unserer PWA auch noch einen service worker registriert haben, kommen wir nochmal hierher zur\u00fcck und werden daf\u00fcr sorgen, dass der Browser uns sogar fragt, ob wir ein Icon auf dem Startbildschirm ablegen wollen. Das beforeinstallprompt -Ereignis \u00b6 Das BeforeInstallPromptEvent wird ausgel\u00f6st, wenn Ihre Anwendung installierbar ist und Sie diese das erste Mal ausf\u00fchren. Es wird ausgel\u00f6st, um Ihre Anwendung zu installieren. Ein typisches Vorgehen f\u00fcr die Behandlung des Ereignisses schl\u00e4gt vor, die Anwendung nicht sofort, d.h. nicht durch die Behandlung des beforeinstallprompt -Ereignisses, zu installieren, sondern zun\u00e4chst abzuwarten, ob die Anwendung auch tats\u00e4chlich so genutzt wird, dass sich eine Installation lohnt. F\u00fcr unsere Anwendung k\u00f6nnte das z.B. bedeuten, dass diese nicht beim ersten Aufruf installiert wird, sondern dass gewartet wird, bis die Nutzerin zum ersten Mal den + -Button klickt. Ein solches typisches Vorgehen ist z.B. hier beschrieben oder hier . Erstaz f\u00fcr manifest.webmanifest f\u00fcr Safari \u00b6 Leider unterst\u00fctzt Safari (Apple) das manifest.webmanifest (noch) nicht, obwohl es eine Spezifikation des W3C ist. \u00dcber die Browser-Untert\u00fctzung f\u00fcr das Web-App-Manifest k\u00f6nnen Sie sich z.B. hier informieren. Die Seite enth\u00e4lt auch eine gute Zusammenfassung aller Eigenschaften des Web-App-Manifestes. Es lohnt sich auch ein Blick hierauf . Um f\u00fcr Safari eine \u00e4hnliche Funktionalit\u00e4t zur Verf\u00fcgung zu stellen, wie das Web-App-Manifest, m\u00fcssen in den HTML-Dateien unserer Anwendung ein paar Meta-Angaben erfolgen: 1 2 3 4 5 6 7 8 9 10 11 12 < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black\" > < meta name = \"apple-mobile-web-app-title\" content = \"HTW-Insta\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw57x57.png\" sizes = \"57x57\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw60x60.png\" sizes = \"60x60\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw72x72.png\" sizes = \"72x72\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw76x76.png\" sizes = \"76x76\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw114x114.png\" sizes = \"114x114\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw120x120.png\" sizes = \"120x120\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw144x144.png\" sizes = \"144x144\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw152x152.png\" sizes = \"152x152\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw180x180.png\" sizes = \"180x180\" > So wirklich klar ist es allerdings nicht, inwieweit Apple tats\u00e4chlich PWAs unterst\u00fctzt und unterst\u00fctzen m\u00f6chte. Es scheint eher so, dass Apple volle Kontrolle dar\u00fcber behalten m\u00f6chte, welche Apps auf iPhones oder iOS-Tablets laufen d\u00fcrfen, n\u00e4mlich solche, die (nur) \u00fcber den App-Store verf\u00fcgbar sind. Siehe dazu z.B. hier und hier . Sollten Sie ein iPhone haben und sollte Ihre Anwendung mithilfe von npm start ausgef\u00fchrt sein, so k\u00f6nnen Sie allerdings mal http://141.45.57.28:8080 in Ihren Browser im Handy eingeben. Es muss nichts weiter installiert werden. Sie k\u00f6nnen aber kein Icon auf den Startbildschirm ablegen :-(. Success Wir haben unsere Webanwendung installierbar gemacht. Zumindest auf Android-Ger\u00e4ten. Dies geschieht mithilfe der Datei manifest.webmanifest , die wir in alle html -Seiten unserer Anwendung einbinden. Wir haben viele Eigenschaften kennengelernt, die wir in diesem Web-App-Manifest definieren k\u00f6nnen. Mithilfe des Emulators von Android Studio k\u00f6nnen wir die Anwendung des Web-App-Manifestes auf Android-Ger\u00e4ten ausprobieren. Wir scheuen uns nun einen weiteren zentralen Funktionsblock an, n\u00e4mlich Service Worker .","title":"Manifest"},{"location":"manifest/#web-app-manifest","text":"Das Web-App-Manifest ist zun\u00e4chst einmal eine Datei, n\u00e4mlich manifest.webmanifest (ganz h\u00e4ufig liest man auch noch manifest.json - beides geht, aber die W3C-Spezifikation sagt manifest.webmanifest ). Sie wird also in der JavaScript Object Notation (JSON) geschrieben. Diese Datei dient als Information f\u00fcr den Browser. Sie wird also vom Browser ausgelesen. Beispielsweise kann in der manifest.webmanifest vereinbart werden, dass sich die Webanwendung selbst auf dem Startbildschirm Ihres Mobilger\u00e4tes installiert. Dann gen\u00fcgt ein Klick auf das Icon auf dem Startbildschirm und die Webanwendung wird durch den Browser ge\u00f6ffnet. Somit h\u00e4tten wir schonmal eine wesentliche Gemeinsamkeit zu einer nativen App geschaffen, welche ja auch durch ein Klick auf ein Icon auf dem Startbildschirm gestartet werden k\u00f6nnen. Wir lernen kennen, wie wir ein solches Manifest unserer PWA hinzuf\u00fcgen, wie es konfiguriert werden kann und wie wir die Auswirkungen eines solchen Manifestes auf mobilen Ger\u00e4ten sehen k\u00f6nnen.","title":"Web-App-Manifest"},{"location":"manifest/#installierbar","text":"Mithilfe eines Web-App-Manifestes machen wir unsere Webanwendung installierbar auf einem mobilen Ger\u00e4t. Die Anwendung muss nicht einem App-Store hinzugef\u00fcgt werden, sondern wird einfach \u00fcber das Web durch einen Browser geladen. Normalerweise kann eine Webanwendung ja nur dadurch gestartet werden, dass ihre URL in den Browser eingetragen wird (oder Sie haben ein lesezeichen auf die Webanwendung in Ihrem Browser gesetzt). Nun wollen wir auf den Startbildschirm des Smartphones ein Icon setzen (genau wie f\u00fcr native Apps) und dar\u00fcber die Anwendung starten. Daf\u00fcr f\u00fcgen wir im Projektordner in dem Ordner /public die Datei manifest.webmanifest hinzu: Diese Datei muss genau so hei\u00dfen (oder manifest.json , sollte aber nicht) und es ist g\u00fcnstig, sie in den /public -Ordner zu legen. Achten Sie darauf, wohin Sie die Datei legen. Wenn Sie sie direkt in den Projektordner legen, dann gelten alle Pfadangaben in dieser Datei ausgehend von dieser Position. Wenn Sie sie in den public -Ordner legen, so wie wir, dann betrachten Sie die relativen Pfade, die Sie angeben, immer von diesem Ordner aus. Nun m\u00fcssen wir diese Datei jeder HTML-Seite unserer Anwendung bekannt machen. In unserer Anwendung existieren zwei *.html -Dateien, die public/index.html und die public/help/index.html . In beide Datein tragen wir im <head folgenden Eintrag ein: < link rel = \"manifest\" href = \"/manifest.webmanifest\" > Aber Achtung! : Die public/help/index.html liegt ja im Unterordner /help . Das bedeutet, dass von der Datei public/help/index.html aus gesehen, muss der help -Ordner erst verlassen werden, um die manifest.webmanifest -Datei zu erreichen. In die public/help/index.html schreiben wir also < link rel = \"manifest\" href = \"../manifest.webmanifest\" > Das hei\u00dft, der <head> -Bereich der public/index.html sieht dann wie folgt aus (und der von public/help/index.html sehr \u00e4hnlich - achten Sie auf den korrekten relativen Pfad!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"/manifest.webmanifest\" > </ head > In einer Single Page Application muss der Eintrag nur einmal erfolgen - in der single page.","title":"Installierbar"},{"location":"manifest/#mogliche-eigenschaften-in-der-manifestwebmanifest","text":"Eintr\u00e4ge in einer JSON-Datei sind key-value-Paare , d.h. ein Eintrag hat die folgende Form: \"property\" : value oder auf Deutsch \"eigenschaft\": wert . JSON-Dateien beginnen und enden immer mit einer geschweiften Klammer und die einzelnen key-value-Paare sind durch Komma getrennt. value jann selbst ein JSON sein oder ein Array oder ein String oder eine Zahl. Wir betrachten nun einige ausgew\u00e4hlte properties , die in einer manifest.json definiert werden k\u00f6nnen. Einen vollst\u00e4ndigen \u00dcberblick \u00fcber alle m\u00f6glichen Eigenschaften und deren Umsetzung in den einzelnen Browsern finden Sie hier . Eine kurze Einf\u00fchrung zu manifest.webmanifest finden Sie auch hier . Die Spezifikation f\u00fcr das Web-App-Manifest vom W3C finden Sie hier .","title":"M\u00f6gliche Eigenschaften in der manifest.webmanifest"},{"location":"manifest/#name","text":"Mit der Eigenschaft name geben wir unserer Webanwendung eine Beschreibung. In der package.json haben wir unserer Anwendung bereits einen Namen gegeben, aber name aus der manifest.webmanifest beschreibt zum Beispiel den Namen der App auf dem Begr\u00fc\u00dfungsschrim, wie wir gleich sehen werden. Es ist ratsam, den Namen nicht l\u00e4nger als 45 Zeichen zu w\u00e4hlen (das ist die Begrenzung, die Google Chrome und Microsoft Edge f\u00fcr sich festgelegt haben). Wir sagen mal: \"name\" : \"HTW-Insta Erweiterung\" Die Eigenschaft name ist in der manifest.webmanifest verpflichtend, d.h. sie muss angegeben werden (au\u00dferdem noch version und manifest_version , alle anderen Eigenschaften sind optional.)","title":"name"},{"location":"manifest/#short_name","text":"Der Wert von short_name wird z.B. verwendet als Name unserer App unter dem Icon auf dem Startbildschirm (falls der Name dort mit erscheint). Der short_name sollte nicht l\u00e4nger als 12 Zeichen sein. Ist kein short_name in der manifest.webmanifest angegeben, wird der Wert von name verwendet und, falls n\u00f6tig, einfach gek\u00fcrzt. \"short_name\" : \"HTW-Insta\"","title":"short_name"},{"location":"manifest/#start_url","text":"Der Wert von start_url gibt den Pfad und die Datei an, die beim Starten unserer Anwendung geladen werden soll. In unserem Fall soll die /public/index.html geladen werden. Die manifest.webmanifest -Datei befindet sich im /public -ordner, also ist der Pfad zur Datei nur / .: \"start_url\" : \"/index.html\" Beachten Sie (nochmal): der Pfad ist immer relativ zur manifest.webmanifest . Anegenommen, der Wert von start_url ist ../start_point.html und die URL der manifest.webmanifest ist https://example.com/resources/manifest.webmanifest , dann w\u00fcrde die Anwendung unter https://example.com/start_point.html starten.","title":"start_url"},{"location":"manifest/#display","text":"Der Wert von display gibt an, wie die Anwendung beim Start aussehen soll. Wir haben die Auswahl zwischen den folgenden Werten: \"fullscreen\" , \"standalone\" , \"minimal-ui\" , \"browser\" N\u00e4here Erl\u00e4uterungen zu den einzelnen Werten finden Sie hier , aber am besten ist, Sie probieren die unterschiedlichen Werte einfach mal aus. \"display\" : \"standalone\" Bei \"standalone\" wird das Browser-fenster ausgeblendet, d.h. wir sehen die URL-Leiste nicht und auch nicht die Steuerelemente des Browsers. Die Anwendung wirkt wie eine native App.","title":"display"},{"location":"manifest/#background_color","text":"Der Wert von background_color ist eine Farbe, die wir typischerweise in hexadezimaler Schreibweise angeben. Ob wir diese Farbe \u00fcberhaupt sehen, h\u00e4ngt davon ab, wie lange unsere Anwendung zum Laden bracuht, denn mit background_color geben wir die Hintergrundfarbe des Bildschirms an, der gezeigt wird, w\u00e4hrend die Anwendung l\u00e4dt. Meistens sieht man das nicht, weil der Ladevorgang so schnell ist. \"background_color\" : \"#76B900\" Wir w\u00e4hlen nat\u00fcrlich das HTW-Gr\u00fcn.","title":"background_color"},{"location":"manifest/#theme_color","text":"Der Wert von theme_color ist eine Farbe, die z.B. die Farbe der Werkzeugleiste auf dem Smartphone bestimmt. \"theme_color\" : \"#FF5F00\" Wir w\u00e4hlen mal das HTW-Orange.","title":"theme_color"},{"location":"manifest/#description","text":"Wenn der Browser eine Beschreibung der App speichert, dann nutzt er den Wert von description , z.B. wenn Sie die App als Lesezeichen speichern. \"description\" : \"Eine tolle HTW-Insta-PWA\"","title":"description"},{"location":"manifest/#lang","text":"Mit der lang uage-Eigeneschaft definieren Sie die Sprache Ihrer App. Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"lang\" : \"de-DE\" Diese Eigenschaft wird vom Browser als Meta-Eigenschaft verwendet, kennen Sie schon aus den HTML-Dokumenten.","title":"lang"},{"location":"manifest/#dir","text":"Mit der dir ection-Eigeneschaft definieren Sie die Textrichtung Ihrer App. Die Werte sind einer der drei: \"ltr\" ( left to right ) \"rtl\" ( right to left ) \"auto\" Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"dir\" : \"ltr\"","title":"dir"},{"location":"manifest/#orientation","text":"Mit der orientation -Eigeneschaft definieren Sie, in welchem Bildschirmmodus die App betrieben (geffnet) werden soll. Bei den Werten haben Sie die Wahl zwischen: \"any\" \"natural\" \"landscape\" \"landscape-primary\" \"landscape-secondary\" \"portrait\" \"portrait-primary\" \"portrait-secondary\" Die Angaben primary und secondary beziehen sich jeweils auf eine 180-Grad-Dreheung des Ger\u00e4tes. secondary \u00f6ffnet es also jeweils \"auf dem Kopf\". \"orientation\" : \"portrait-primary\" Die Web-App sollte aber so gebaut werden, dass sie sowohl im Portrait- als auch im Landscape-Modus gut bedient werden kann (responsive).","title":"orientation"},{"location":"manifest/#icons","text":"Die icons -Eigenschaft enth\u00e4lt ein Array aus Icons, die als das Icon der App auf dem Startbildschirm verwendet werden k\u00f6nnen. Typischerweise gibt man hier mehrere an, die sich in ihrer Aufl\u00f6sung unterscheiden, um das geeignete Icon ausw\u00e4hlen zu k\u00f6nnen, das zur Aufl\u00f6sung des Ausgabeger\u00e4tes passt. Gute Dimensionen sind z.B. 48X48 Pixel bis hin zu 512x512 Pixel. Die Beschreibung eines Icons ist selbst ein JSON und enth\u00e4lt drei Eigenschaften: \"src\" (der Pafd zum Icon und die Datei) \"type\" (der Typ des Bildes, z.B. image/png ) \"sizes\" (die Gr\u00f6\u00dfe des Bildes in Pixeln) Der Browser sucht sich in Abh\u00e4ngigkeit von der Aufl\u00f6sung des Ausgabeger\u00e4tes das am besten geeignete Icon selbst\u00e4ndig aus. \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] Auch hier sind wieder die korrekten relativen Pfade zu beachten. Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons und auch die obige JSON zu erzeugen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Bitte unbedingt verwenden, um sich m\u00fchsame Arbeit zu sparen!","title":"icons"},{"location":"manifest/#testen-der-manifestwebmanifest","text":"Insgesamt sieht unsere manifest.webmanifest nun so aus: public/manifest.webmanifest { \"name\" : \"HTW-Insta Erweiterung\" , \"short_name\" : \"HTW-Insta\" , \"start_url\" : \"/index.html\" , \"display\" : \"standalone\" , \"background_color\" : \"#76B900\" , \"description\" : \"Eine tolle HTW-Insta-PWA\" , \"lang\" : \"de-DE\" , \"dir\" : \"ltr\" , \"orientation\" : \"portrait-primary\" , \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] } Wir rufen unsere Anwendung im Browser (Verwenden Sie Google Chrome!) auf und \u00f6ffnen au\u00dferdem die DevTools: W\u00e4hlen Sie f\u00fcr die Darstellung der App eine Mobilansicht aus ( ) und klicken Sie auf den Reiter Application in den DevTools. Klicken Sie in den DevTools unter dem Reiter Application im linken Application -Men\u00fc auf Manifest . Dort sehen Sie, dass Ihre Konfiguration korrekt eingelesen wird. Es sollte nur eine einizige Warnung erscheinen, dass wir (noch) keine service worker eingerichtet haben. Um die Funktionsweise des Web-App-Manifestes tats\u00e4chlich zu testen, ben\u00f6tigen wir jedoch ein Smartphone (oder Tablet). Wir wollen ein solches emulieren (ein Android-Smartphone) und starten dazu Android Studio . Wenn wir Android Studio \u00f6ffnen, w\u00e4hlen wir zun\u00e4chst + Create New Project . Durch die folgenden Vorschl\u00e4ge k\u00f6nnen wir einfach stets mit Next und dann mit Finish navigieren, ohne irgendetwas zu \u00e4ndern. Wir sind gar nicht am Projekt interessiert, sondern nur am AVD Manager ( Android Virtual Device Manaager ), den wir unter dem Men\u00fcpunkt Tools finden. Nach dem \u00d6ffnen des AVD-Managers haben Sie die M\u00f6glichkeit, weitere Android-Phones zur Liste Ihrer virtuellen Ger\u00e4te hinzuzuf\u00fcgen. Das k\u00f6nnen Sie ruhig machen, um ger\u00e4te mit verschiedenen Aufl\u00f6sungen ausprobieren zu k\u00f6nnen. W\u00e4hlen Sie dann ein Ger\u00e4t Ihrer Wahl und klicken Sie f\u00fcr das Ger\u00e4t unter der Spalte Actions auf den Play-Button: Das dauert dann eine ganze Weile, aber am Ende erscheint ein Smartphone auf Ihrem Bildschirm: Auf diesem Android-ger\u00e4t ist Google Chrome verf\u00fcgbar. Starten Sie Google Chrome dort durch Mausklick und geben Sie als URL 10.0.2.2.:8080 ein. Unsere Webanwendung wird ge\u00f6ffnet: Klicken Sie jetzt auf die drei vertikalen Punkte neben der URL-Leiste und w\u00e4hlen Sie Add to Home screen : Es wird uns eines unserer Icons angeboten und der unter name gew\u00e4hlte Name: Klicken Sie Add und dann Add automatically . Das Icon erscheint auf dem Homescreen (Startbildschirm). Eventuell m\u00fcssen Sie den Browser zuvor schlie\u00dfen. Klicken Sie auf das Icon, um unsere Anwendung zu starten. Sie sehen kurz den Splashscreen mit der von uns gew\u00e4hlten Hintergrundfarbe HTW-Gr\u00fcn. Beachten Sie auch, dass um unsere Anwendung herum kein Browser-Fenster zu sehen ist. Sie l\u00e4uft standalone (nat\u00fcrlich im Browser, aber der ist nicht zu sehen). Das sieht man insbesondere, wenn man sich alle ge\u00f6ffneten Anwendungen anschaut: Sobald wir f\u00fcr unserer PWA auch noch einen service worker registriert haben, kommen wir nochmal hierher zur\u00fcck und werden daf\u00fcr sorgen, dass der Browser uns sogar fragt, ob wir ein Icon auf dem Startbildschirm ablegen wollen.","title":"Testen der manifest.webmanifest"},{"location":"manifest/#das-beforeinstallprompt-ereignis","text":"Das BeforeInstallPromptEvent wird ausgel\u00f6st, wenn Ihre Anwendung installierbar ist und Sie diese das erste Mal ausf\u00fchren. Es wird ausgel\u00f6st, um Ihre Anwendung zu installieren. Ein typisches Vorgehen f\u00fcr die Behandlung des Ereignisses schl\u00e4gt vor, die Anwendung nicht sofort, d.h. nicht durch die Behandlung des beforeinstallprompt -Ereignisses, zu installieren, sondern zun\u00e4chst abzuwarten, ob die Anwendung auch tats\u00e4chlich so genutzt wird, dass sich eine Installation lohnt. F\u00fcr unsere Anwendung k\u00f6nnte das z.B. bedeuten, dass diese nicht beim ersten Aufruf installiert wird, sondern dass gewartet wird, bis die Nutzerin zum ersten Mal den + -Button klickt. Ein solches typisches Vorgehen ist z.B. hier beschrieben oder hier .","title":"Das beforeinstallprompt-Ereignis"},{"location":"manifest/#erstaz-fur-manifestwebmanifest-fur-safari","text":"Leider unterst\u00fctzt Safari (Apple) das manifest.webmanifest (noch) nicht, obwohl es eine Spezifikation des W3C ist. \u00dcber die Browser-Untert\u00fctzung f\u00fcr das Web-App-Manifest k\u00f6nnen Sie sich z.B. hier informieren. Die Seite enth\u00e4lt auch eine gute Zusammenfassung aller Eigenschaften des Web-App-Manifestes. Es lohnt sich auch ein Blick hierauf . Um f\u00fcr Safari eine \u00e4hnliche Funktionalit\u00e4t zur Verf\u00fcgung zu stellen, wie das Web-App-Manifest, m\u00fcssen in den HTML-Dateien unserer Anwendung ein paar Meta-Angaben erfolgen: 1 2 3 4 5 6 7 8 9 10 11 12 < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black\" > < meta name = \"apple-mobile-web-app-title\" content = \"HTW-Insta\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw57x57.png\" sizes = \"57x57\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw60x60.png\" sizes = \"60x60\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw72x72.png\" sizes = \"72x72\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw76x76.png\" sizes = \"76x76\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw114x114.png\" sizes = \"114x114\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw120x120.png\" sizes = \"120x120\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw144x144.png\" sizes = \"144x144\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw152x152.png\" sizes = \"152x152\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw180x180.png\" sizes = \"180x180\" > So wirklich klar ist es allerdings nicht, inwieweit Apple tats\u00e4chlich PWAs unterst\u00fctzt und unterst\u00fctzen m\u00f6chte. Es scheint eher so, dass Apple volle Kontrolle dar\u00fcber behalten m\u00f6chte, welche Apps auf iPhones oder iOS-Tablets laufen d\u00fcrfen, n\u00e4mlich solche, die (nur) \u00fcber den App-Store verf\u00fcgbar sind. Siehe dazu z.B. hier und hier . Sollten Sie ein iPhone haben und sollte Ihre Anwendung mithilfe von npm start ausgef\u00fchrt sein, so k\u00f6nnen Sie allerdings mal http://141.45.57.28:8080 in Ihren Browser im Handy eingeben. Es muss nichts weiter installiert werden. Sie k\u00f6nnen aber kein Icon auf den Startbildschirm ablegen :-(. Success Wir haben unsere Webanwendung installierbar gemacht. Zumindest auf Android-Ger\u00e4ten. Dies geschieht mithilfe der Datei manifest.webmanifest , die wir in alle html -Seiten unserer Anwendung einbinden. Wir haben viele Eigenschaften kennengelernt, die wir in diesem Web-App-Manifest definieren k\u00f6nnen. Mithilfe des Emulators von Android Studio k\u00f6nnen wir die Anwendung des Web-App-Manifestes auf Android-Ger\u00e4ten ausprobieren. Wir scheuen uns nun einen weiteren zentralen Funktionsblock an, n\u00e4mlich Service Worker .","title":"Erstaz f\u00fcr manifest.webmanifest f\u00fcr Safari"},{"location":"promises/","text":"Promises und die Fetch-API \u00b6 Wir haben es bereits eingangs des Abschnitts \u00fcber Service Workers angesprochen: JavaScript ist sinhle threaded , d.h. JavaScript l\u00e4uft auf einem einzelnen Thread. Das bedeutet im Prinzip, dass drei Funktionen functionA() , functionB() , functionC() nacheinander auf dem einzelnen Thread ausgef\u00fchrt werden w\u00fcrden, wenn sie nacheinander aufgerufen werden: Das zieht nat\u00fcrlich nach sich, dass sich diese Funktionen in ihrer Ausf\u00fchrung blockieren . Wenn also functionB() bspw. sehr lange braucht, um ausgef\u00fchrt werden zu k\u00f6nnen, dann blockiert diese Funktion die Ausf\u00fchrung von functionC() . Um dies zu vermeiden, wurden in JavaScript sogenannte Callbacks eingef\u00fchrt. Callbacks \u00b6 Zun\u00e4chst einmal sind Callbacks Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden. Wir betrachten folgendes Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 let x = function () { console . log ( \"Ausgabe der Funktion x\" ); } let y = function () { console . log ( \"Ausgabe der Funktion y\" ); } let z = function ( callback ) { console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); callback (); console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); } Wir haben drei Funktionen. Diese werden als anonyme Funktionen definiert, aber die Funktionsdefinitionen werden sofort einer Variablen zugewiesen. Das bedeutet, dass z.B. der Wert der Variablen x die Funktionsdefinition function () { console . log ( \"Ausgabe der Funktion x\" ); } ist. Wenn wir nun z.B. console.log(x) aufrufen, dann erhalten wir folgende Ausgabe auf der Konsole: \u0192 () { console.log ( \"Ausgabe der Funktion x\" ) ; } Wenn wir aber x(); , also sozusagen, die Variable als Funktion aufrufen, dann wird die Funktion ausgef\u00fchrt und wir erhalten auf der Konsole die Ausgabe Ausgabe der Funktion x Wenn wir nun z(x); aufrufen, dann wird die in den Zeilen 9-12 definierte Funktion aufgerufen, wobei der Parameter callback als Wert die Funktionsdefinition von x \u00fcbergeben wird. In Zeile 11 erfolgt dann mithilfe von callback(); eigentlich der Aufruf x(); . Wir k\u00f6nnen aber auch z.B. z(y); aufrufen. Dann wird z nicht die Funktion x , sondern die Funktion y \u00fcbergeben und der Aufruf callback(); in Zeile 11 entspricht somit dem Aufruf y(); . Ein gro\u00dfer Vorteil dieser Callbacks bestehen darin, dass der Aufruf asynchron erfolgt. Schauen wir uns z.B. einmal an, wie die m\u00f6gliche Ausgabe der Aufrufe z ( x ); z ( y ); aussehen k\u00f6nnte : Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion x Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion y Ausgabe der Funktion z - vor Aufruf von callback Wichtig ist, dass Callbacks die aufrufende Funktion nicht blockieren, sondern asynchron ausgef\u00fchrt werden. Dieses einfache Beispiel soll das demonstrieren: 1 2 3 4 5 setTimeout ( function () { console . log ( 'Ausgabe A' ); }, 3000 ); console . log ( 'Ausgabe B' ); Wir haben zwei Anweisungen: eine setTimeout() -Anweisung und eine console.log('Ausgabe B'); -Anweisung, die nacheinander aufgerufen werden ( setTimeout() vor console.log() ). Innerhalb der setTimeout() -Anweisung wird eine Funktion als Callback \u00fcbergeben. Innerhalb dieser Funktion erfolgt der Aufruf von console.log('Ausgabe A'); . Das Ausf\u00fchren des Programms ergibt folgende Ausgabe: Ausgabe B Ausgabe A Die Ausgabe von Ausgabe A erfolgt ca. 3 Sekunden nach Ausgabe B . Das liegt daran, dass die Callback -Funktion asynchron ausgef\u00fchrt wird und alle weiteren Ausf\u00fchrungen nicht blockiert. Das bedeutet, dass wir mithilfe von Callbacks eine asynchrone Ausf\u00fchrung unseres JavaScript-Codes erreichen. Der einzelne JavaScript-Thread wird also f\u00fcr den Aufruf der Callbacks verwendet und irgendwann sind diese Callback -Aufrufe beendet. Ein gegenseitiges Blockieren findet nicht statt, sondern es bleibt sogar noch Platz f\u00fcr weitere Aufrufe (hellgr\u00fcne Bereiche im folgenden Bild): Das problem mit diesen Callback ist, dass sie sehr schnell sehr un\u00fcbersichtlich werden. Man spricht von der Callback-H\u00f6lle , in der man sehr schnell ist, sobald gen\u00fcgend viele Callbacks asynchron (nebenl\u00e4ufig) ausgef\u00fchrt werden, diese sogar ineinander verschachtelt sind ( Callbacks in Callbacks ) und man gar nicht wei\u00df, wann welche Callbacks beendet sind. Sobald man aber erst die Ausf\u00fchrung eines Callbacks abwarten muss , weil man die Resultate dieses Callbacks weiterverarbeiten m\u00f6chte, entstehen wieder synchrone Aufrufe und der Vorteil der asynchronen Abarbeitung ist dahin. Um dieses Problem zu l\u00f6sen, wurden Promises entwickelt. Promises \u00b6 Ein Promise ist zun\u00e4chst einmal ein JavaScript-Objekt. Es enth\u00e4lt einerseits den Code zum Erzeugen eines Promise -Objektes ( producing code ) und anderseits auch den Code zum Verarbeiten eines solchen Promise -Objektes ( consuming code ). Dabei k\u00f6nnen zwei Sachen verarbeitet werden: entweder das Promise -Objekt wurde erfolgreich abgearbeitet ( resolve ) oder das Promise -Objekt wurde nicht erfolgreich abgearbeitet ( reject ). Die allgemeine Syntax eines solchen Promise -Objektes sieht so aus (siehe z.B. w3scool ): 1 2 3 4 5 6 7 8 9 10 11 12 let myPromise = new Promise ( function ( myResolve , myReject ) { // \"Producing Code\" (May take some time) myResolve (); // when successful myReject (); // when error }); // \"Consuming Code\" (Must wait for a fulfilled Promise) myPromise . then ( function ( value ) { /* code if successful */ }, function ( error ) { /* code if some error */ } ); Betrachten wir das obere Beispiel genauer: in Zeile 1 erstellen wir eine Variable myPromise , die wir nat\u00fcrlich nennen k\u00f6nnen, wie wir m\u00f6chten diese Variable zeigt auf ein Promise -Objekt, das ebenfalls in Zeile 1 mithilfe von new und dem Aufruf des Konstruktors erzeugt wird einem Promise -Objekt (dem Konstruktor) wird immer eine Funktion \u00fcbergeben, der wiederum zwei Callback -Funktionen als Parameter \u00fcbergeben werden die erste Callback -Funktion, die hier myResolve hei\u00dft (aber meistens nur resolve ), wird aufgerufen, wenn das Promise -Objekt erfolgreich abgearbeitet wurde (Zeile 4 ) die zweite Callback -Funktion, die hier myReject hei\u00dft (aber meistens nur reject ), wird aufgerufen, wenn das Promise -Objekt nicht erfolgreich abgearbeitet wurde (Zeile 5 ) den Aufruf des promise -Objektes sehen wir in Zeile 9 . Ein Promise -Objekt durchl\u00e4uft durch den Aufruf 2 der folgenden 3 Zust\u00e4nde: pending : das Promise -Objekt wird abgearbeitet und hat noch kein Resultat ( undefined ), fulfilled : das Promise -Objekt wurde erfolgreich abgearbeitet und liefert den entsprechenden Resultatwert zur\u00fcck oder rejected : das Promise -Objekt wurde nicht erfolgreich abgearbeitet und liefert ein Error -Objekt zur\u00fcck es gibt aber keine M\u00f6glichkeiten, auf diese Zust\u00e4nde eines Promise -Objektes zuzugreifen und auch nicht direkt auf den Resultatwert oder das Fehlerobjekt; stattdessen muss eine entsprechende Funktion des Promise -Objektes aufgerufen werden, die selbst wieder ein Promise -Objekt zur\u00fcckgibt, n\u00e4mlich then() der Aufruf von then() ist ebenfalls in Zeile 9 gezeigt; diese Funktion hat zwei Parameter: dem ersten Parameter wird der Resultatwert \u00fcbergeben (wenn das Promise -Objekt den fulfilled -Zustand erreicht hat) und dem zweiten Parameter wird das Fehlerobjekt \u00fcbergeben (wenn das Promise -Objekt den rejected -Zustand erreicht hat). Beide Parameter sind wiederum Callbacks . Wir werden sehen, dass wir den rejected -Zustand auch mit catch() abfangen k\u00f6nnen, aber dazu kommen wir sp\u00e4ter. Zun\u00e4chst noch einmal zur Vertiefung unser obiges Callback -Beispiel mit setTimeout() als Promise : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise ( function ( resolve , reject ) { setTimeout ( function () { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( function ( value ) { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Die Ausgabe in Zeile 14 hat nichts mit dem Promise zu tun, aber wir lassen sie mal im Code, um das gleiche Beispiel wie oben zu haben. Es erfolgt zun\u00e4chst die Ausgabe Ausgabe B auf der Konsole und 3 Sekunden sp\u00e4ter die Ausgabe resolve -- Ausgabe A . Rein funktional hat sich also nichts ge\u00e4ndert. Wie Sie den Parameter f\u00fcr den resolve -Fall (und dann auch f\u00fcr den reject -Fall) nennen, bleibt ganz Ihnen \u00fcberlassen; hier value (Zeile 8 ). Dieses Mal hei\u00dft unser Promise -Objekt promise und die beiden Callback -Funktionen resolve und reject (Zeile 1 ). Der producing code enth\u00e4lt nur die Implementierung von resolve . In dem Beispiel gibt es also (noch) kein reject . In den Zeilen 7 - 12 sehen wir den consuming code der Promise , auch hier wieder nur f\u00fcr resolve . Es erfolgt die Ausgabe des Wertes, den resolve \u00fcbergeben hat. Promises in Arrow-Notation \u00b6 Weil wir es mitlerweile h\u00e4ufig sehen und weil wir uns auch angew\u00f6hnen wollen, diese selbst zu benutzen, hier das gleiche Beispiel nochmal in Arrow-Notation : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Es ist auch noch zu erw\u00e4hnen, dass Sie nur selten selbst Promises erstellen, sondern diese viel h\u00e4ufiger nutzen werden. Das hei\u00dft, Sie werden nicht so h\u00e4ufig producing code , sondern viel h\u00e4ufiger consuming code schreiben. Beispielsweise gibt die Registrierung eines service workers ein Promise zur\u00fcck: 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); }); Ein gro\u00dfer Vorteil von Promises ist, dass Sie die Verarbeitung verketten k\u00f6nnen. Die then() -Funktion liefert selbst wieder ein Promise zur\u00fcck, so dass Sie erneut dieses Promise mit then() behandeln k\u00f6nnen. Wir kommen darauf in den Anwendungen nochmal zur\u00fcck. Der reject -Fall \u00b6 Wir schauen uns jetzt an, wie wir den Fall am besten behandeln, wenn das Promise nicht in den fulfilled , sondern in den rejected -Zustand \u00fcbergeht, wenn also nicht resolve , sondern reject ausgef\u00fchrt wird. Wir \u00e4ndern unser Beispiel einmal entsprechend: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Wir haben also Zeile 3 auskommentiert ( resolve ) und stattdessen reject eingef\u00fcgt (Zeile 4 ). Im Gegensatz zu resolve geben wir jetzt mal keinen einfachen string , sondern ein JavaScript-Objekt zur\u00fcck (erkennbar an { } ). Wir sind darin v\u00f6llig frei, was zur\u00fcckgegeben wird, aber es bietet sich an, ein Error-Objekt zu erzeugen. Die then() -Behandlung des Promise -Objekt lassen wir zun\u00e4chst unver\u00e4ndert (Zeilen 8-13 ). Wenn wir diesen Code ausf\u00fchren, dann wird erneut Ausgabe B ausgegeben (Zeile 15 - hat nichts mit dem Promise zu tun), aber nach 3 Sekunden erfolgt keine Ausgabe auf der Konsole, sondern stattdessen erscheint auf der Konsole: Error-Behandlung in der then() -Funktion \u00b6 Wir behandeln den geworfenen Fehler nicht, da wir in unserer then() -Behandlung bis jetzt nur den resolve -Fall behandeln (Zeilen 9-11 ). Das \u00e4ndern wir nun: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); }, err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); In den Zeilen 12-14 wurde die Behandlung des Fehlerfalls hinzugef\u00fcgt (beachten Sie auch das zus\u00e4tzliche Komma in Zeile 11 ). Wie Sie die Variable err nennen, bleibt Ihnen \u00fcberlassen. Sie bekommt den Wert, den das Promise f\u00fcr den reject -Fall \u00fcbergibt, in unserem Beispiel also ein JavaScript-Objekt: { code : 500 , message : 'A n error occurred' } weil wir das in Zeile 4 so definiert haben. Wir greifen also auf die Werte der Schl\u00fcssel code und message zu und lassen diese auf die Konsole ausgeben (Zeile 13 ). Auf der Konsole erscheint 3 Sekunden nach der Ausgabe Ausgabe B die Ausgabe 500 An error occurred . Error-Behandlung im catch() -Block \u00b6 Es ist ungew\u00f6hnlich, den Fehlerfall in der then() -Funktion zu behandeln, obwohl es, wie wir gesehen haben, m\u00f6glich ist. Stattdessen verwendet man f\u00fcr den Fehlerfall besser catch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); Mit diesen Wissen k\u00f6nnen wir jetzt auch unsere Registrierung eines service workers etwas zuverl\u00e4ssiger gestalten und f\u00fcgen dort ebenfalls einen catch() -Block ein, auch wenn der Fehlerfall nicht all zu h\u00e4ufig eintreffen d\u00fcrfte: 1 2 3 4 5 6 7 8 9 10 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } Fetch API \u00b6 Die Fetch API bietet einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest . Es geht also darum, Ressourcen vom Web-Server zu holen ( to fetch ). Die Fetch API ist vollst\u00e4ndig auf Promises aufgebaut. Die zentrale Methode der Fetch API ist fetch() . Das Gute an dieser Methode ist, dass sie gloabl ist im Sinne, dass sie nicht nur von einer Webanwendung selbst, sondern auch z.B. von einem Service Worker verwendet werden kann (sie ist im WindowOrWorkerGlobalScope ). Einf\u00fchrungen zu fetch() finden Sie z.B. hier , hier oder hier . GET-Anfragen mit fetch() \u00b6 Wir starten mit einem einfachen Beispiel und nutzen daf\u00fcr https://httpbin.org , eine Webseite, die viele REST-Endpunkte zum Ausprobieren anbietet. Nach dem \u00d6ffnen dieser Seite im Browser, k\u00f6nnen Sie z.B. mal auf Request inspection klicken - dort sehen wir den Endpunkt /ip , den wir \u00fcber ein GET abfragen werden: 1 2 3 4 5 6 fetch ( 'https://httpbin.org/ip' ) . then ( response => { console . log ( response ); } ); Wir rufen also einmal fetch() auf und \u00fcbergeben dieser Funktion den Endpunkt, von dem eine Ressource geholt werden soll. Die fetch() -Funktion liefert ein Promise -Objekt zur\u00fcck. Deshalb k\u00f6nnen wir auch direkt die then() -Funktion aufrufen und die response (ist egal, wie Sie disen Parameter nennen) auf die Konsole ausgeben. Wenn wir diesen Code ausf\u00fchren, erscheint in der Konsole: Wir bekommen also ein JavaScript-Objekt zur\u00fcck. Wirklich interessiert sind wir aber haupts\u00e4chlich an dem body dieses Objektes. Um darauf geeignet zuzugreifen, konvertieren wir das Objekt zun\u00e4chst in das JSON-Format mithilfe der Anweisung response.json(); . Die json() -Funktion ist eine Standard-JavaScript-Funktion, welche ein JavaScript-Objekt in einen JSON umwandelt. Da then() selbst ein Promise -Objekt zur\u00fcckgibt. wollen wir darauf then() erneut anwenden, um das Prinzip verketteter then() -Funktionen (verketteter asynchroner Verarbeitungen) zu zeigen: 1 2 3 4 5 6 7 8 9 10 11 fetch ( 'https://httpbin.org/ip' ) . then ( response => { return response . json (); } ) . then ( data => { console . log ( data ); } ); In der ersten then() -Funktion (Zeilen 2-6 ) wird also die Response der asynchronen GET https://httpbin.org/ip -Anfrage behandelt und darin wird diese Response in eine JSON umgewandelt (Zeile 4 ). Die R\u00fcckgabe dieser then() -Funktion ist erneut ein Promise . F\u00fcr dieses Promise ist die zweite then() -Funktion (Zeilen 7-11 ). Diese Funktion behandelt das asynchrone Streamen des Response-Body und dessen Umwandlung in ein JSON. Das durch dieses Promise zur\u00fcckgegebene resolve bezeichnen wir in unserem Beispiel als data und geben es auf die Konsole aus. Auf der Konsole erscheint die IP , von der die Anfrage erfolgte, z.B. { origin: \"130.193.115.48\" } Noch zwei kleine Verbesserungen am Code: wenn in der Arrow-Notation Ihre Funktion nur aus einer einzigen return -Anweisung besteht, dann k\u00f6nnen Sie die geschweiften Klammern Ihres Funktionsk\u00f6rpers weglassen und auch das return . D.h. aus response => { return response . json (); } wird response => response . json () Auch das Semikolon entf\u00e4llt. Das gilt aber nur f\u00fcr return -Anweisungen, nicht z.B. wenn die Funktion nur aus einer einzigen Konsolenausgabe besteht. Au\u00dferdem sollten wir auch noch ein catch() -Block einf\u00fcgen, f\u00fcr den Fall, dass ein Fehler auftritt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Den Fehlerfall k\u00f6nnen Sie ausprobieren, indem Sie einfach einen Fehler in die URL einbauen. POST-Anfragen mit fetch() \u00b6 POST -Anfragen werden verwendet, um Daten an den Webserver zu senden. Typischerweise sind das Formulardaten, die z.B. in eine Datenbank eingef\u00fcgt werden sollen. Wenn wir also mithilfe von fetch() eine POST -Anfrage stellen wollen, dann m\u00fcssen wir zwei Dinge beachten: wir m\u00fcssen fetch() explizit mitteilen, dass die verwendete HTTP-Anfrage-Methode POST ist und wir m\u00fcssen die Daten mitschicken. F\u00fcr ein einfaches Beispiel verwenden wir erneut https://httpbin.org , dieses Mal aber den Endpunkt /post , der uns einfach die gesendeten Daten wieder als Response unserer Abfrage zur\u00fcckschickt, also einfach als \"Spiegel\" fungiert. Eine entsprechende fetch() -Anweisung k\u00f6nnte so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Die Zeilen 11-23 sind dabei zun\u00e4chst unver\u00e4ndert geblieben und sehen genauso aus wie die Zeilen 2-14 aus dem obigen GET -Beispiel. Nur die Parameter in der fetch() -Funktion haben sich ge\u00e4ndert. Der erste Parmeter lautet nun 'https://httpbin.org/post' , da wir die Anfrage an diese URL (diesen Endpunkt) stellen. Hinzugekommen ist ein zweiter Parameter, ein JSON: { me t hod : 'POST' , header : { 'Co ntent - Type' : 'applica t io n /jso n ' , 'Accep t ' : 'applica t io n /jso n ' }, body : JSON.s tr i n gi f y( { message : 'jus t a POST mirror' } ) } darin legen wir zun\u00e4chst mithilfe von method die HTTP-Anfrage-Methode fest. Standard ist GET , deshalb brauchten wir das in unserem ersten Beispiel nicht zu tun. Nun geben wir POST an. Au\u00dferdem definieren wir noch Eigenschaften f\u00fcr den header . Wir legen mithilfe von Content-Type fest, welches Format unsere Daten haben, die wir \u00fcbermitteln, n\u00e4mlich application/json . Au\u00dferdem legen wir mithilfe von Accept fest, in welchem Format wir die Daten empfangen wollen, n\u00e4mlich ebenfalls im JSON-Format. Diese Accept -Angabe ist nicht immer notwendig. Die meisten REST-Endpunkte liefern so oder so ein JSON zur\u00fcck. Das h\u00e4ngt von der Definition der REST-API ab. In der body -Eigenschaft definieren wir die Daten, die wir \u00fcbertragen wollen. In diesem Fall im JSON-Format. { message: 'just a POST mirror' } ist ein JavaScript-Objekt, das eine einzige Eigenschaft enth\u00e4lt, n\u00e4mlich message . Mithilfe der JavaScript-Standardfunktion JSON.stringify() wandeln wir dieses JavaScript-Objekt in ein JSON um. Somit wird ein JSON versendet, genau wie wir es im header unter Content-Type angegeben haben. F\u00fchren wir diesen Code aus, erhalten wir auf der Konsole folgende Ausgabe: Man k\u00f6nnte jetzt meinen, dass der Zugriff auf das Response-JSON ( {message: \"just a POST mirror\"} ) einfach \u00fcber response.data oder \u00fcber response.json erfolgen kann. Dem ist aber nicht so, da es sich bei dem body der response um ein Objekt vom Typ ReadableStream handelt. Das ist einerseits gut, denn die Daten vom Server werden asynchron als Stream empfangen, andererseits ist der Zugriff auf die Daten recht aufwendig. Wir werden darauf nochmal intensiver eingehen, wenn wir Bilder vom Backend laden. Ansonsten k\u00f6nnen Sie sich auch schonmal hier informieren oder sich hier und hier . Aber, wie gesagt, wir kommen eh nochmal darauf zur\u00fcck. Wenn Sie sich das zur\u00fcckgelieferte JSON schonmal anschauen wollen, dann ginge das z.B. so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); // show the body, ReadableStream return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); // Uint8Array return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) // also possible: text(), blob(), ... . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } ); Fetch vs. XMLHttpRequest \u00b6 Wir haben eingangs erw\u00e4hnt, dass die Fetch API einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest darstellt. Das sieht man einerseits bereits an der Code-L\u00e4nge. Das ist die Implementierung mit fetch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); und das hier macht genau das Gleiche mithilfe von XMLHttpRequest() : 1 2 3 4 5 6 7 8 9 10 11 12 13 let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); Ein ganz wesentlicher Unterschied liegt aber darin, dass bei Verwendung von XMLHttpRequest() deutlich mehr Sachen im Hintergrund synchron ablaufen, als bei der Fetch API. Das ist der Grund, dass wir bei der Implementierung von service workern die Fetch API verwenden m\u00fcssen und nicht auf das (alte) XMLHttpRequest() zugreifen k\u00f6nnen. fetch() und unser service worker \u00b6 Alle Code-Beispiele von oben (also die Promises und die fetch() -Beispiele) habe ich einfach in die app.js unseres HTW Insta -Beispiels eingetragen und ausprobiert. Das hei\u00dft, die app.js sieht jetzt gerade so aus: app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } ); Au\u00dferdem haben wir ja in unserer Anwendung bereits einen service worker registriert und auch in schon in Ans\u00e4tzen implementiert: sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Ich er\u00e4hne das nur deshalb, weil unsere Konsole bei Ausf\u00fchrung der Anwendung jetzt ungef\u00e4hr so aussieht: Es erscheint also ganz oft die Ausgabe des fetch -Events, genau wie in der sw.js in den Zeilen 10-12 implementiert. Das fetch -Event wird immer dann ausgel\u00f6st, wenn die Anwendung etwas vom Webserver l\u00e4dt. Das sind einerseits alle Ressourcen, die wir in der index.html -datei definiert haben (alle *.js und alle *.css und alle *.png -Dateien), aber auch die fetch() -Anweisungen, die wir in der app.js implementiert haben! Wir werden auf der Konsole auch die fetch -Ereignisse finden, die den Zugriff auf https://httpbin.org/ip bzw. https://httpbin.org/post ausf\u00fchren. Wir merken uns also fetch -Ereignisse werden automatisch ausgel\u00f6st durch das Laden von ressourcen, so wie in den *.html -Dateien der Anwendung definiert, aber auch durch manuell ausgel\u00f6ste (implementierte) fetch() -Anfragen. Das ist wichtig, wenn wir in unserem service worker die fetch -Ereignisse behandeln werden. Success Wir kennen nun Promises und die Fetch API und k\u00f6nnen beides anwenden. Wir werden Promises von nun an permanent verwenden. Insbesondere den consuming code f\u00fcr Promises, als .then().catch() . Mithilfe der Fetch API werden wir alle HTTP-Anfragen an den Server stellen k\u00f6nnen, also GET , POST , PUT und DELETE und dabei das asynchrone Prinzip dieser API bestm\u00f6glich ausnutzen.","title":"Promises & fetch"},{"location":"promises/#promises-und-die-fetch-api","text":"Wir haben es bereits eingangs des Abschnitts \u00fcber Service Workers angesprochen: JavaScript ist sinhle threaded , d.h. JavaScript l\u00e4uft auf einem einzelnen Thread. Das bedeutet im Prinzip, dass drei Funktionen functionA() , functionB() , functionC() nacheinander auf dem einzelnen Thread ausgef\u00fchrt werden w\u00fcrden, wenn sie nacheinander aufgerufen werden: Das zieht nat\u00fcrlich nach sich, dass sich diese Funktionen in ihrer Ausf\u00fchrung blockieren . Wenn also functionB() bspw. sehr lange braucht, um ausgef\u00fchrt werden zu k\u00f6nnen, dann blockiert diese Funktion die Ausf\u00fchrung von functionC() . Um dies zu vermeiden, wurden in JavaScript sogenannte Callbacks eingef\u00fchrt.","title":"Promises und die Fetch-API"},{"location":"promises/#callbacks","text":"Zun\u00e4chst einmal sind Callbacks Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden. Wir betrachten folgendes Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 let x = function () { console . log ( \"Ausgabe der Funktion x\" ); } let y = function () { console . log ( \"Ausgabe der Funktion y\" ); } let z = function ( callback ) { console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); callback (); console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); } Wir haben drei Funktionen. Diese werden als anonyme Funktionen definiert, aber die Funktionsdefinitionen werden sofort einer Variablen zugewiesen. Das bedeutet, dass z.B. der Wert der Variablen x die Funktionsdefinition function () { console . log ( \"Ausgabe der Funktion x\" ); } ist. Wenn wir nun z.B. console.log(x) aufrufen, dann erhalten wir folgende Ausgabe auf der Konsole: \u0192 () { console.log ( \"Ausgabe der Funktion x\" ) ; } Wenn wir aber x(); , also sozusagen, die Variable als Funktion aufrufen, dann wird die Funktion ausgef\u00fchrt und wir erhalten auf der Konsole die Ausgabe Ausgabe der Funktion x Wenn wir nun z(x); aufrufen, dann wird die in den Zeilen 9-12 definierte Funktion aufgerufen, wobei der Parameter callback als Wert die Funktionsdefinition von x \u00fcbergeben wird. In Zeile 11 erfolgt dann mithilfe von callback(); eigentlich der Aufruf x(); . Wir k\u00f6nnen aber auch z.B. z(y); aufrufen. Dann wird z nicht die Funktion x , sondern die Funktion y \u00fcbergeben und der Aufruf callback(); in Zeile 11 entspricht somit dem Aufruf y(); . Ein gro\u00dfer Vorteil dieser Callbacks bestehen darin, dass der Aufruf asynchron erfolgt. Schauen wir uns z.B. einmal an, wie die m\u00f6gliche Ausgabe der Aufrufe z ( x ); z ( y ); aussehen k\u00f6nnte : Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion x Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion y Ausgabe der Funktion z - vor Aufruf von callback Wichtig ist, dass Callbacks die aufrufende Funktion nicht blockieren, sondern asynchron ausgef\u00fchrt werden. Dieses einfache Beispiel soll das demonstrieren: 1 2 3 4 5 setTimeout ( function () { console . log ( 'Ausgabe A' ); }, 3000 ); console . log ( 'Ausgabe B' ); Wir haben zwei Anweisungen: eine setTimeout() -Anweisung und eine console.log('Ausgabe B'); -Anweisung, die nacheinander aufgerufen werden ( setTimeout() vor console.log() ). Innerhalb der setTimeout() -Anweisung wird eine Funktion als Callback \u00fcbergeben. Innerhalb dieser Funktion erfolgt der Aufruf von console.log('Ausgabe A'); . Das Ausf\u00fchren des Programms ergibt folgende Ausgabe: Ausgabe B Ausgabe A Die Ausgabe von Ausgabe A erfolgt ca. 3 Sekunden nach Ausgabe B . Das liegt daran, dass die Callback -Funktion asynchron ausgef\u00fchrt wird und alle weiteren Ausf\u00fchrungen nicht blockiert. Das bedeutet, dass wir mithilfe von Callbacks eine asynchrone Ausf\u00fchrung unseres JavaScript-Codes erreichen. Der einzelne JavaScript-Thread wird also f\u00fcr den Aufruf der Callbacks verwendet und irgendwann sind diese Callback -Aufrufe beendet. Ein gegenseitiges Blockieren findet nicht statt, sondern es bleibt sogar noch Platz f\u00fcr weitere Aufrufe (hellgr\u00fcne Bereiche im folgenden Bild): Das problem mit diesen Callback ist, dass sie sehr schnell sehr un\u00fcbersichtlich werden. Man spricht von der Callback-H\u00f6lle , in der man sehr schnell ist, sobald gen\u00fcgend viele Callbacks asynchron (nebenl\u00e4ufig) ausgef\u00fchrt werden, diese sogar ineinander verschachtelt sind ( Callbacks in Callbacks ) und man gar nicht wei\u00df, wann welche Callbacks beendet sind. Sobald man aber erst die Ausf\u00fchrung eines Callbacks abwarten muss , weil man die Resultate dieses Callbacks weiterverarbeiten m\u00f6chte, entstehen wieder synchrone Aufrufe und der Vorteil der asynchronen Abarbeitung ist dahin. Um dieses Problem zu l\u00f6sen, wurden Promises entwickelt.","title":"Callbacks"},{"location":"promises/#promises","text":"Ein Promise ist zun\u00e4chst einmal ein JavaScript-Objekt. Es enth\u00e4lt einerseits den Code zum Erzeugen eines Promise -Objektes ( producing code ) und anderseits auch den Code zum Verarbeiten eines solchen Promise -Objektes ( consuming code ). Dabei k\u00f6nnen zwei Sachen verarbeitet werden: entweder das Promise -Objekt wurde erfolgreich abgearbeitet ( resolve ) oder das Promise -Objekt wurde nicht erfolgreich abgearbeitet ( reject ). Die allgemeine Syntax eines solchen Promise -Objektes sieht so aus (siehe z.B. w3scool ): 1 2 3 4 5 6 7 8 9 10 11 12 let myPromise = new Promise ( function ( myResolve , myReject ) { // \"Producing Code\" (May take some time) myResolve (); // when successful myReject (); // when error }); // \"Consuming Code\" (Must wait for a fulfilled Promise) myPromise . then ( function ( value ) { /* code if successful */ }, function ( error ) { /* code if some error */ } ); Betrachten wir das obere Beispiel genauer: in Zeile 1 erstellen wir eine Variable myPromise , die wir nat\u00fcrlich nennen k\u00f6nnen, wie wir m\u00f6chten diese Variable zeigt auf ein Promise -Objekt, das ebenfalls in Zeile 1 mithilfe von new und dem Aufruf des Konstruktors erzeugt wird einem Promise -Objekt (dem Konstruktor) wird immer eine Funktion \u00fcbergeben, der wiederum zwei Callback -Funktionen als Parameter \u00fcbergeben werden die erste Callback -Funktion, die hier myResolve hei\u00dft (aber meistens nur resolve ), wird aufgerufen, wenn das Promise -Objekt erfolgreich abgearbeitet wurde (Zeile 4 ) die zweite Callback -Funktion, die hier myReject hei\u00dft (aber meistens nur reject ), wird aufgerufen, wenn das Promise -Objekt nicht erfolgreich abgearbeitet wurde (Zeile 5 ) den Aufruf des promise -Objektes sehen wir in Zeile 9 . Ein Promise -Objekt durchl\u00e4uft durch den Aufruf 2 der folgenden 3 Zust\u00e4nde: pending : das Promise -Objekt wird abgearbeitet und hat noch kein Resultat ( undefined ), fulfilled : das Promise -Objekt wurde erfolgreich abgearbeitet und liefert den entsprechenden Resultatwert zur\u00fcck oder rejected : das Promise -Objekt wurde nicht erfolgreich abgearbeitet und liefert ein Error -Objekt zur\u00fcck es gibt aber keine M\u00f6glichkeiten, auf diese Zust\u00e4nde eines Promise -Objektes zuzugreifen und auch nicht direkt auf den Resultatwert oder das Fehlerobjekt; stattdessen muss eine entsprechende Funktion des Promise -Objektes aufgerufen werden, die selbst wieder ein Promise -Objekt zur\u00fcckgibt, n\u00e4mlich then() der Aufruf von then() ist ebenfalls in Zeile 9 gezeigt; diese Funktion hat zwei Parameter: dem ersten Parameter wird der Resultatwert \u00fcbergeben (wenn das Promise -Objekt den fulfilled -Zustand erreicht hat) und dem zweiten Parameter wird das Fehlerobjekt \u00fcbergeben (wenn das Promise -Objekt den rejected -Zustand erreicht hat). Beide Parameter sind wiederum Callbacks . Wir werden sehen, dass wir den rejected -Zustand auch mit catch() abfangen k\u00f6nnen, aber dazu kommen wir sp\u00e4ter. Zun\u00e4chst noch einmal zur Vertiefung unser obiges Callback -Beispiel mit setTimeout() als Promise : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise ( function ( resolve , reject ) { setTimeout ( function () { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( function ( value ) { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Die Ausgabe in Zeile 14 hat nichts mit dem Promise zu tun, aber wir lassen sie mal im Code, um das gleiche Beispiel wie oben zu haben. Es erfolgt zun\u00e4chst die Ausgabe Ausgabe B auf der Konsole und 3 Sekunden sp\u00e4ter die Ausgabe resolve -- Ausgabe A . Rein funktional hat sich also nichts ge\u00e4ndert. Wie Sie den Parameter f\u00fcr den resolve -Fall (und dann auch f\u00fcr den reject -Fall) nennen, bleibt ganz Ihnen \u00fcberlassen; hier value (Zeile 8 ). Dieses Mal hei\u00dft unser Promise -Objekt promise und die beiden Callback -Funktionen resolve und reject (Zeile 1 ). Der producing code enth\u00e4lt nur die Implementierung von resolve . In dem Beispiel gibt es also (noch) kein reject . In den Zeilen 7 - 12 sehen wir den consuming code der Promise , auch hier wieder nur f\u00fcr resolve . Es erfolgt die Ausgabe des Wertes, den resolve \u00fcbergeben hat.","title":"Promises"},{"location":"promises/#promises-in-arrow-notation","text":"Weil wir es mitlerweile h\u00e4ufig sehen und weil wir uns auch angew\u00f6hnen wollen, diese selbst zu benutzen, hier das gleiche Beispiel nochmal in Arrow-Notation : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Es ist auch noch zu erw\u00e4hnen, dass Sie nur selten selbst Promises erstellen, sondern diese viel h\u00e4ufiger nutzen werden. Das hei\u00dft, Sie werden nicht so h\u00e4ufig producing code , sondern viel h\u00e4ufiger consuming code schreiben. Beispielsweise gibt die Registrierung eines service workers ein Promise zur\u00fcck: 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); }); Ein gro\u00dfer Vorteil von Promises ist, dass Sie die Verarbeitung verketten k\u00f6nnen. Die then() -Funktion liefert selbst wieder ein Promise zur\u00fcck, so dass Sie erneut dieses Promise mit then() behandeln k\u00f6nnen. Wir kommen darauf in den Anwendungen nochmal zur\u00fcck.","title":"Promises in Arrow-Notation"},{"location":"promises/#der-reject-fall","text":"Wir schauen uns jetzt an, wie wir den Fall am besten behandeln, wenn das Promise nicht in den fulfilled , sondern in den rejected -Zustand \u00fcbergeht, wenn also nicht resolve , sondern reject ausgef\u00fchrt wird. Wir \u00e4ndern unser Beispiel einmal entsprechend: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Wir haben also Zeile 3 auskommentiert ( resolve ) und stattdessen reject eingef\u00fcgt (Zeile 4 ). Im Gegensatz zu resolve geben wir jetzt mal keinen einfachen string , sondern ein JavaScript-Objekt zur\u00fcck (erkennbar an { } ). Wir sind darin v\u00f6llig frei, was zur\u00fcckgegeben wird, aber es bietet sich an, ein Error-Objekt zu erzeugen. Die then() -Behandlung des Promise -Objekt lassen wir zun\u00e4chst unver\u00e4ndert (Zeilen 8-13 ). Wenn wir diesen Code ausf\u00fchren, dann wird erneut Ausgabe B ausgegeben (Zeile 15 - hat nichts mit dem Promise zu tun), aber nach 3 Sekunden erfolgt keine Ausgabe auf der Konsole, sondern stattdessen erscheint auf der Konsole:","title":"Der reject-Fall"},{"location":"promises/#error-behandlung-in-der-then-funktion","text":"Wir behandeln den geworfenen Fehler nicht, da wir in unserer then() -Behandlung bis jetzt nur den resolve -Fall behandeln (Zeilen 9-11 ). Das \u00e4ndern wir nun: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); }, err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); In den Zeilen 12-14 wurde die Behandlung des Fehlerfalls hinzugef\u00fcgt (beachten Sie auch das zus\u00e4tzliche Komma in Zeile 11 ). Wie Sie die Variable err nennen, bleibt Ihnen \u00fcberlassen. Sie bekommt den Wert, den das Promise f\u00fcr den reject -Fall \u00fcbergibt, in unserem Beispiel also ein JavaScript-Objekt: { code : 500 , message : 'A n error occurred' } weil wir das in Zeile 4 so definiert haben. Wir greifen also auf die Werte der Schl\u00fcssel code und message zu und lassen diese auf die Konsole ausgeben (Zeile 13 ). Auf der Konsole erscheint 3 Sekunden nach der Ausgabe Ausgabe B die Ausgabe 500 An error occurred .","title":"Error-Behandlung in der then()-Funktion"},{"location":"promises/#error-behandlung-im-catch-block","text":"Es ist ungew\u00f6hnlich, den Fehlerfall in der then() -Funktion zu behandeln, obwohl es, wie wir gesehen haben, m\u00f6glich ist. Stattdessen verwendet man f\u00fcr den Fehlerfall besser catch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); Mit diesen Wissen k\u00f6nnen wir jetzt auch unsere Registrierung eines service workers etwas zuverl\u00e4ssiger gestalten und f\u00fcgen dort ebenfalls einen catch() -Block ein, auch wenn der Fehlerfall nicht all zu h\u00e4ufig eintreffen d\u00fcrfte: 1 2 3 4 5 6 7 8 9 10 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); }","title":"Error-Behandlung im catch()-Block"},{"location":"promises/#fetch-api","text":"Die Fetch API bietet einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest . Es geht also darum, Ressourcen vom Web-Server zu holen ( to fetch ). Die Fetch API ist vollst\u00e4ndig auf Promises aufgebaut. Die zentrale Methode der Fetch API ist fetch() . Das Gute an dieser Methode ist, dass sie gloabl ist im Sinne, dass sie nicht nur von einer Webanwendung selbst, sondern auch z.B. von einem Service Worker verwendet werden kann (sie ist im WindowOrWorkerGlobalScope ). Einf\u00fchrungen zu fetch() finden Sie z.B. hier , hier oder hier .","title":"Fetch API"},{"location":"promises/#get-anfragen-mit-fetch","text":"Wir starten mit einem einfachen Beispiel und nutzen daf\u00fcr https://httpbin.org , eine Webseite, die viele REST-Endpunkte zum Ausprobieren anbietet. Nach dem \u00d6ffnen dieser Seite im Browser, k\u00f6nnen Sie z.B. mal auf Request inspection klicken - dort sehen wir den Endpunkt /ip , den wir \u00fcber ein GET abfragen werden: 1 2 3 4 5 6 fetch ( 'https://httpbin.org/ip' ) . then ( response => { console . log ( response ); } ); Wir rufen also einmal fetch() auf und \u00fcbergeben dieser Funktion den Endpunkt, von dem eine Ressource geholt werden soll. Die fetch() -Funktion liefert ein Promise -Objekt zur\u00fcck. Deshalb k\u00f6nnen wir auch direkt die then() -Funktion aufrufen und die response (ist egal, wie Sie disen Parameter nennen) auf die Konsole ausgeben. Wenn wir diesen Code ausf\u00fchren, erscheint in der Konsole: Wir bekommen also ein JavaScript-Objekt zur\u00fcck. Wirklich interessiert sind wir aber haupts\u00e4chlich an dem body dieses Objektes. Um darauf geeignet zuzugreifen, konvertieren wir das Objekt zun\u00e4chst in das JSON-Format mithilfe der Anweisung response.json(); . Die json() -Funktion ist eine Standard-JavaScript-Funktion, welche ein JavaScript-Objekt in einen JSON umwandelt. Da then() selbst ein Promise -Objekt zur\u00fcckgibt. wollen wir darauf then() erneut anwenden, um das Prinzip verketteter then() -Funktionen (verketteter asynchroner Verarbeitungen) zu zeigen: 1 2 3 4 5 6 7 8 9 10 11 fetch ( 'https://httpbin.org/ip' ) . then ( response => { return response . json (); } ) . then ( data => { console . log ( data ); } ); In der ersten then() -Funktion (Zeilen 2-6 ) wird also die Response der asynchronen GET https://httpbin.org/ip -Anfrage behandelt und darin wird diese Response in eine JSON umgewandelt (Zeile 4 ). Die R\u00fcckgabe dieser then() -Funktion ist erneut ein Promise . F\u00fcr dieses Promise ist die zweite then() -Funktion (Zeilen 7-11 ). Diese Funktion behandelt das asynchrone Streamen des Response-Body und dessen Umwandlung in ein JSON. Das durch dieses Promise zur\u00fcckgegebene resolve bezeichnen wir in unserem Beispiel als data und geben es auf die Konsole aus. Auf der Konsole erscheint die IP , von der die Anfrage erfolgte, z.B. { origin: \"130.193.115.48\" } Noch zwei kleine Verbesserungen am Code: wenn in der Arrow-Notation Ihre Funktion nur aus einer einzigen return -Anweisung besteht, dann k\u00f6nnen Sie die geschweiften Klammern Ihres Funktionsk\u00f6rpers weglassen und auch das return . D.h. aus response => { return response . json (); } wird response => response . json () Auch das Semikolon entf\u00e4llt. Das gilt aber nur f\u00fcr return -Anweisungen, nicht z.B. wenn die Funktion nur aus einer einzigen Konsolenausgabe besteht. Au\u00dferdem sollten wir auch noch ein catch() -Block einf\u00fcgen, f\u00fcr den Fall, dass ein Fehler auftritt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Den Fehlerfall k\u00f6nnen Sie ausprobieren, indem Sie einfach einen Fehler in die URL einbauen.","title":"GET-Anfragen mit fetch()"},{"location":"promises/#post-anfragen-mit-fetch","text":"POST -Anfragen werden verwendet, um Daten an den Webserver zu senden. Typischerweise sind das Formulardaten, die z.B. in eine Datenbank eingef\u00fcgt werden sollen. Wenn wir also mithilfe von fetch() eine POST -Anfrage stellen wollen, dann m\u00fcssen wir zwei Dinge beachten: wir m\u00fcssen fetch() explizit mitteilen, dass die verwendete HTTP-Anfrage-Methode POST ist und wir m\u00fcssen die Daten mitschicken. F\u00fcr ein einfaches Beispiel verwenden wir erneut https://httpbin.org , dieses Mal aber den Endpunkt /post , der uns einfach die gesendeten Daten wieder als Response unserer Abfrage zur\u00fcckschickt, also einfach als \"Spiegel\" fungiert. Eine entsprechende fetch() -Anweisung k\u00f6nnte so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Die Zeilen 11-23 sind dabei zun\u00e4chst unver\u00e4ndert geblieben und sehen genauso aus wie die Zeilen 2-14 aus dem obigen GET -Beispiel. Nur die Parameter in der fetch() -Funktion haben sich ge\u00e4ndert. Der erste Parmeter lautet nun 'https://httpbin.org/post' , da wir die Anfrage an diese URL (diesen Endpunkt) stellen. Hinzugekommen ist ein zweiter Parameter, ein JSON: { me t hod : 'POST' , header : { 'Co ntent - Type' : 'applica t io n /jso n ' , 'Accep t ' : 'applica t io n /jso n ' }, body : JSON.s tr i n gi f y( { message : 'jus t a POST mirror' } ) } darin legen wir zun\u00e4chst mithilfe von method die HTTP-Anfrage-Methode fest. Standard ist GET , deshalb brauchten wir das in unserem ersten Beispiel nicht zu tun. Nun geben wir POST an. Au\u00dferdem definieren wir noch Eigenschaften f\u00fcr den header . Wir legen mithilfe von Content-Type fest, welches Format unsere Daten haben, die wir \u00fcbermitteln, n\u00e4mlich application/json . Au\u00dferdem legen wir mithilfe von Accept fest, in welchem Format wir die Daten empfangen wollen, n\u00e4mlich ebenfalls im JSON-Format. Diese Accept -Angabe ist nicht immer notwendig. Die meisten REST-Endpunkte liefern so oder so ein JSON zur\u00fcck. Das h\u00e4ngt von der Definition der REST-API ab. In der body -Eigenschaft definieren wir die Daten, die wir \u00fcbertragen wollen. In diesem Fall im JSON-Format. { message: 'just a POST mirror' } ist ein JavaScript-Objekt, das eine einzige Eigenschaft enth\u00e4lt, n\u00e4mlich message . Mithilfe der JavaScript-Standardfunktion JSON.stringify() wandeln wir dieses JavaScript-Objekt in ein JSON um. Somit wird ein JSON versendet, genau wie wir es im header unter Content-Type angegeben haben. F\u00fchren wir diesen Code aus, erhalten wir auf der Konsole folgende Ausgabe: Man k\u00f6nnte jetzt meinen, dass der Zugriff auf das Response-JSON ( {message: \"just a POST mirror\"} ) einfach \u00fcber response.data oder \u00fcber response.json erfolgen kann. Dem ist aber nicht so, da es sich bei dem body der response um ein Objekt vom Typ ReadableStream handelt. Das ist einerseits gut, denn die Daten vom Server werden asynchron als Stream empfangen, andererseits ist der Zugriff auf die Daten recht aufwendig. Wir werden darauf nochmal intensiver eingehen, wenn wir Bilder vom Backend laden. Ansonsten k\u00f6nnen Sie sich auch schonmal hier informieren oder sich hier und hier . Aber, wie gesagt, wir kommen eh nochmal darauf zur\u00fcck. Wenn Sie sich das zur\u00fcckgelieferte JSON schonmal anschauen wollen, dann ginge das z.B. so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); // show the body, ReadableStream return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); // Uint8Array return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) // also possible: text(), blob(), ... . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } );","title":"POST-Anfragen mit fetch()"},{"location":"promises/#fetch-vs-xmlhttprequest","text":"Wir haben eingangs erw\u00e4hnt, dass die Fetch API einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest darstellt. Das sieht man einerseits bereits an der Code-L\u00e4nge. Das ist die Implementierung mit fetch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); und das hier macht genau das Gleiche mithilfe von XMLHttpRequest() : 1 2 3 4 5 6 7 8 9 10 11 12 13 let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); Ein ganz wesentlicher Unterschied liegt aber darin, dass bei Verwendung von XMLHttpRequest() deutlich mehr Sachen im Hintergrund synchron ablaufen, als bei der Fetch API. Das ist der Grund, dass wir bei der Implementierung von service workern die Fetch API verwenden m\u00fcssen und nicht auf das (alte) XMLHttpRequest() zugreifen k\u00f6nnen.","title":"Fetch vs. XMLHttpRequest"},{"location":"promises/#fetch-und-unser-service-worker","text":"Alle Code-Beispiele von oben (also die Promises und die fetch() -Beispiele) habe ich einfach in die app.js unseres HTW Insta -Beispiels eingetragen und ausprobiert. Das hei\u00dft, die app.js sieht jetzt gerade so aus: app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } ); Au\u00dferdem haben wir ja in unserer Anwendung bereits einen service worker registriert und auch in schon in Ans\u00e4tzen implementiert: sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Ich er\u00e4hne das nur deshalb, weil unsere Konsole bei Ausf\u00fchrung der Anwendung jetzt ungef\u00e4hr so aussieht: Es erscheint also ganz oft die Ausgabe des fetch -Events, genau wie in der sw.js in den Zeilen 10-12 implementiert. Das fetch -Event wird immer dann ausgel\u00f6st, wenn die Anwendung etwas vom Webserver l\u00e4dt. Das sind einerseits alle Ressourcen, die wir in der index.html -datei definiert haben (alle *.js und alle *.css und alle *.png -Dateien), aber auch die fetch() -Anweisungen, die wir in der app.js implementiert haben! Wir werden auf der Konsole auch die fetch -Ereignisse finden, die den Zugriff auf https://httpbin.org/ip bzw. https://httpbin.org/post ausf\u00fchren. Wir merken uns also fetch -Ereignisse werden automatisch ausgel\u00f6st durch das Laden von ressourcen, so wie in den *.html -Dateien der Anwendung definiert, aber auch durch manuell ausgel\u00f6ste (implementierte) fetch() -Anfragen. Das ist wichtig, wenn wir in unserem service worker die fetch -Ereignisse behandeln werden. Success Wir kennen nun Promises und die Fetch API und k\u00f6nnen beides anwenden. Wir werden Promises von nun an permanent verwenden. Insbesondere den consuming code f\u00fcr Promises, als .then().catch() . Mithilfe der Fetch API werden wir alle HTTP-Anfragen an den Server stellen k\u00f6nnen, also GET , POST , PUT und DELETE und dabei das asynchrone Prinzip dieser API bestm\u00f6glich ausnutzen.","title":"fetch() und unser service worker"},{"location":"pushnotes/","text":"Push Notifications \u00b6 Push Notifications sind sinnvoll, um die Nutzerin einer App \u00fcber Neuigkeiten zu informieren, sogar dann, wenn die Anwendung (und der Browser!) geschlossen ist (sind). Mit Push Notifications k\u00f6nnen Nutzerinnen wieder \"zur\u00fcck an die App geholt\" werden, d.h. mithilfe von Push Notifications kann man daf\u00fcr sorgen, dass Nutzerinnen die App wieder \u00f6ffnen, um sich die Neuigkeiten genauer anzuschauen. Die Neuigkeiten k\u00f6nnen neue Tweets, E-Mails, Nachrichten, Anrufe usw. sein. Das Prinzip, das f\u00fcr die Push-Benachrichtungen umgesetzt wird, sieht auf den ersten Blick etwas kompliziert aus: Im Zentrum stehen zun\u00e4chst die Webanwendung und der Service Worker. Die Webanwendung meldet sich bei den Push-Benachrichtigungen an und der Service Worker verwaltet diese. Jeder Browser hat eine eigenen \"eingebauten\" Push Server . Eine Push-Anmeldung ( Push Subscription ) erlaubt den Zugriff auf einen Push-API-Endpunkt auf den Push-Server. Die eigentliche Push-Benachrichtigung kommt jedoch vom eigenen Server. Er sendet die Push-Nachricht an den In-Browser Push Server , dieser l\u00f6st damit ein push -Ereignis beim Service Worker aus und der Service Worker schickt die Push-Benachrichtigung an die Webanwendung. Wir schauen uns alle diese Schritte im Detail an. Ausgangspunkt ist das Projekt in diesem Stand . Anzeigen von Benachrichtigungen \u00b6 Wir beginnen mit dem Anzeigen (der Darstellung) von Push-Benachrichtigungen in einer Webanwendung. Dieser Abschnitt hat noch nichts mit dem push -Ereignis zu tun! Wir ben\u00f6tigen zum Anzeigen nicht mal einen Service Worker. Es geht aber auch \u00fcber den Service Worker - und das wird sp\u00e4ter auch bei der Verwendung der Push-API notwendig. Die hier verwendete Notification-API wird von fast allen Browsern unterst\u00fctzt. Hier ist auch eine gute \u00dcbersicht dar\u00fcber, wie diese Notification-API verwendet wird. Benachrichtigungen einschalten \u00b6 Bevor wir das Anzeigen von (Push-)Benachrichtigungen betrachten, m\u00fcssen wir diese zuerst erlauben. In unserer Anwendung gibt es dazu den Button BENACHRICHTIGUNGEN EIN . In der index.html ist dieser Button zwei Mal definiert, einmal f\u00fcr einen schmalen Viewport und einmal f\u00fcr einen breiten. F\u00fcr beide Varianten sieht die Implementierung so aus: < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > F\u00fcr einen schmalen Viewport ist der Button dann unter dem Hamburger Men\u00fc in der linken oberen Ecke erreichbar. Beiden Buttons ist die CSS-Klasse enable-notifications zugewiesen. Wir sorgen zuerst daf\u00fcr, dass dieser Button nur angezeigt wird, wenn der Browser die Notification-API unterst\u00fctzt. Wenn nicht, dann w\u00e4re der Button funktionslos und wir br\u00e4uchten ihn nicht. Wir schalten ihn deshalb in der app.css zun\u00e4chst im Standartwert aus: /src/css/app.css 1 2 3 4 5 6 7 8 9 10 11 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } . enable-notifications { display : none ; } In der app.js pr\u00fcfen wir, ob der Browser die Notification-API unterst\u00fctzt und schalten f\u00fcr diesen Fall die Buttons wieder ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // notifications granted } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } In Zeile 1 erstellen wir uns eine Variable enableNotificationsButtons , die auf ein Array aller Buttons mit der CSS-Klasse enable-notifications zeigt. In Zeile 25 pr\u00fcfen wir nun, ob der Browser die Notification -API unterst\u00fctzt. Wenn ja, dann schalten wir alle Buttons aus dem enableNotificationsButtons -Array wieder auf sichtbar (von display: none auf display: inline-block ) und wir melden jeden dieser Buttons an die Ereignisbehandlung des click -Ereignisses an (Zeile 28 ). Die Behandlung des click -Ereignisses erfolgt in der Methode askForNotificationPermission() , die in den Zeilen 14-23 definiert ist. Da diese Methode nur dann aufgerufen wird, wenn der Browser die Notification -API unterst\u00fctzt, kann diese API darin verwendet werden. Mit der Funktion requestPermission() wird die Nutzerin gefragt, ob sie Benachrichtigungen zulassen m\u00f6chte. Diese Methode gibt ein Promise zur\u00fcck, dessen result die Werte granted , denied oder default haben kann. Werden Benachrichtigungen nicht erlaubt (Zeile 17 ), k\u00f6nnen wir nichts weiter tun. Die Nutzerin wird dann auch nicht erneut gefragt. Die Benachrichtigungen bleiben f\u00fcr die Webanwendung ausgeschaltet (Zeile 18 ). Wenn wir die Anwendung nun ausf\u00fchren (Reload nach Application --> Storage --> Clear Storage oder die Versionsnummern der Caches im Service Worker \u00e4ndern), dann erhalten wir nach dem Klicken auf den BENACHRICHTIGUNGEN EIN -Button folgende Abfrage: Wenn wir auf Zulassen klicken, dann erscheint in der Konsole User Chaice granted (Zeile 16 ). Beachten Sie, dass Sie nicht erneut gefragt werden, ob Benachrichtungen zugelassen werden sollen oder nicht. Erneutes Klicken auf den Button bewirkt (selbst nach einem Reload der Anwendung) keine erneute Abfrage. Deshalb w\u00e4re es eigentlich auch sinnvoll, den Button wieder zu verstecken, d.h. auf display: none zu setzen. Um die benachrichtigungen zu verwalten, k\u00f6nnen Sie in Chrome chrome://settings/content/notifications eingeben. Dort sehen Sie eine Auflistung aller Webanwendungen, die Sie besucht haben und die von Ihnen eine Erlaubnis zur Benachrichtung gewollt haben. Sie k\u00f6nnen dort die jeweiligen Einstellungen wieder \u00e4nder, z.B. auch f\u00fcr die hier entwickelte Anwendung. Benachrichtigungen anzeigen \u00b6 Jetzt erstellen wir unsere erste Benachrichtigung mithilfe der Notification -API. Die einfachtse Form der Notification wird durch die Verwendung des parametrisierten Konstruktors von Notification ( new Notification('Nachricht') ) erstellt. Wir f\u00fcgen die app.js eine solche einfache Benachrichtigung f\u00fcr den Fall, dass Benachrichtigungen erlaubt werden, ein: /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { new Notification ( 'Successfully subscribed!' ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { displayConfirmNotification (); } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Wenn wir die Anwendung nun erneut ausf\u00fchren und auf den Button klicken, dann werden wir zwar nicht erneut gefragt, ob wir Benachrichtigungen zulassen oder blockieren wollen, aber da wir Benachrichtungen bereits zugelassen haben, erscheint nun die folgende Benachrichtigung: Der einfache Aufruf des Notification -Konstruktors mit einer einfachen Nachricht (Zeile 15 ) erzeugt auch die einfachste Form der Benachrichtigung. Dem Konstruktor lassen sich aber als zweiten Parameter noch JavaScript-Objekt f\u00fcr options \u00fcbergeben. Darin kann ein weiterer Text ( body ) definiert werden und z.B. auch ein eigenes icon . Wir betrachten das sp\u00e4ter noch etwas genauer, erstmal nur eine weitere Nachricht: /src/js/app.js 14 15 16 17 function displayConfirmNotification () { let options = { body : 'You successfully subscribed to our Notification service!' }; new Notification ( 'Successfully subscribed!' , options ); } ergibt dann die Benachrichtigung: Benachrichtigungen im Service Worker erstellen \u00b6 Im jetzigen Stand werden die Benachrichtungen aus der Webanwendung heraus erstellt. Das ist auch v\u00f6llig ok. Die Notification -API l\u00e4sst sich sowohl in der Webanwendung verwenden, als auch im Service Worker. Da sp\u00e4ter aber die Push-Benachrichtigungen vom Service Worker verwaltet werden, wechseln wir jetzt auch f\u00fcr die einfachen Benachrichtigungen zum Service Worker, d.h. wir lassen die Benachrichtigungen nun nicht mehr durch die Webanwendung erstellen, sondern durch den Service Worker. Dazu passen wir unsere app.js wie folgt an: /src/js/app.js 14 15 16 17 18 19 20 21 22 23 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Der Service Worker besitzt eine eigene Funktion showNotification() , die intern ein Notification -Objekt erzeugt und der die gleiche Parameterliste \u00fcbergeben werden kann, wie dem Notification -Konstruktor. Nach Reload und Klicken des Buttons sehen wir nun folgende Benachrichtigung: Die Nachricht wurde extra um (from SW) erg\u00e4nzt, um kenntlich zu machen, dass die Benachrichtigung nun vom Service Worker angesto\u00dfen wird. Weitere Optionen f\u00fcr die Benachrichtigungen \u00b6 Benachrichtigungen sind ein System-Feature , d.h. ihre Gestaltung hat etwas mit dem Ger\u00e4t zu tun, in dem diese Benachrichtigungen erscheinen. Es ist kein Browser-Feature . Benachrichtigungen sehen auf dem Mac anders aus, als unter Windows oder unter Linux und auf dem iPhone anders, als auf einem Android-Ger\u00e4t. Es gibt ziemlich viele m\u00f6gliche Optionen f\u00fcr eine solche Benachrichtigung, aber die unterschiedlichen Systeme beachten diese Optionen mal mehr und mal weniger. Wir werden hier der Vollst\u00e4ndigkeit halber einige Optionen benennen, aber am meisten sieht man von diesen Optionen auf einem Android-Ger\u00e4t. /src/js/app.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Auf dem Mac hat neben der icon -Option nur noch die actions -Option eine Auswirkung. Die Benachrichtigung sieht nun so aus (auf dem Mac): Man sieht das icon und unter dem Icon wird durch das Hovern mit der Maus ein Men\u00fc sichtbar, das die definierten actions enth\u00e4lt. mit image kann die gesamte Benachrichtigung mit einem Bild unterlegt werden (sieht man bei Android), mit vibrate kann die Benachrichtigung durch das Vibrieren des Ger\u00e4tes signalisiert werden. In unserem Beispiel vibriert das Ger\u00e4t 100 Millisekunden, dann ist 50 Millisekunden Pause und dann vibriert es nochmal f\u00fcr 200 Millisekunden. mit tag k\u00f6nnen Benachrichtigungen mit einer Art id versehen werden. Wenn meherere Benachrichtigungen mit demselben tag vorliegen, dann wird nur die zuletzt eingegangene Benachrichtigung angezeigt. Ansonsten erscheinen alle Benachrichtigungen untereinander. renotify geh\u00f6rt zu tag . Wenn der Wert true ist, dann wird die Nutzerin auch dann informiert, wenn eine neue Nachricht zum selben tag angekommen ist. Sonst nicht. Eine \u00dcbersicht \u00fcber alle Optionen findet sich hier . Wenn Sie ein Android-Ger\u00e4t besitzen, dann k\u00f6nnen Sie es an den Rechner andocken (USB-Anschluss - dazu m\u00fcssen Sie den USB-Zugriff erlauben) und in den Devloper Tools rechts oben unter den drei senkrechten Punkten den Men\u00fcpunkt More tools und dort Remote devices ausw\u00e4hlen und k\u00f6nnen dann ausprobieren, wie die Benachrichtigungen unter einem Android-Ger\u00e4t aussehen. Anleitung f\u00fcr Edge , Anleitung f\u00fcr Chrome , Anleitung f\u00fcr Firefox . Auf die unter actions definierten Aktionen kann innerhalb des Service Workers sogar reagiert werden: /sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Der Service Worker kann das notificationclick -Ereignis behandeln. Ebenso kann der Service Worker das Ereignis behandeln, das ausgel\u00f6st wird, wenn eine Benachrichtigung geschlossen wird: /sw.js 155 156 157 self . addEventListener ( 'notificationclose' , event => { console . log ( 'notification was closed' , event ); }); Wir wollen uns aber mit den Benachrichtigungen gar nicht weiter im Detail besch\u00e4ftigen, sondern lieber mit Push-Notationen. Kenntnisse \u00fcber Benachrichtigungen sind aber eine gute Voraussetzung, um zu den Push-Notifikationen \u00fcberzugehen. Push-Benachrichtigungen \u00b6 Das Konzept der Benachrichtigung wird auch bei den Push-Nachrichten verwendet. Um Push-Nachrichten zu emmpfangen, muss man sich jedoch zun\u00e4chst f\u00fcr den Empfang registrieren (siehe in der Abbildung oben neue Push Subscription erstellen ). Anmelden an Push-Nachrichten (Subscription) \u00b6 Die Anmeldung an die Push-Nachrichten geschieht in der Webanwendung. Wir passen dazu unsere app.js an und f\u00fcgen eine Funktion configurePushSubscription() ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } navigator . serviceWorker . ready . then ( sw => { return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription } else { // already subscribed } }); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // displayConfirmNotification(); configurePushSubscription (); } }); } if ( 'Notification' in window && 'serviceWorker' in navigator ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Die Methode configurePushSubscription() wird nun anstelle von displayConfirmNotifivcation() in der askForNotificationPermission() aufgerufen (Zeilen 62-63 ). Das liegt daran, dass die Notification.requestPermission() -Funktion auch f\u00fcr die Erlaubnis von Push-Nachrichten verwendet wird. Mit der Erlaubnis von Benachrichtigungen . wird also auch gleichzeitig die Erlaubnis von Push-Nachrichten erteilt. Da die Push-Benachrichtigungen \u00fcber den Service Worker verwaltet werden, wird in configurePushSubscription() zun\u00e4chst gepr\u00fcft, ob der Browser \u00fcberhaupt Service Worker unterst\u00fctzt (Zeile 39 ). Wenn nicht, wird die Methode sofort verlassen (Zeile 40 ). Da wir aber auch in die Abfrage nach der Notification-API (Zeile 68 ) noch die Abfrage nach dem serviceWorker hinzugef\u00fcgt haben, w\u00e4re der Button BENACHRICHTUNGEN EIN gar nicht sichtbar, wenn der Service Worker nicht im Browser unterst\u00fctzt w\u00fcrde. Dann w\u00fcrde auch nie die Funktion configurePushSubscription() aufgerufen. Wir lassen Zeilen 39-41 trotzdem sicherheitshalber drin. In Zeile 45 verwendet der Service Worker die PushManager-API . Eine der drei Methoden, die diese API zur Verf\u00fcgung stellt, ist die getSubscription() -Methode. Diese Methode gibt eine Promise mit einer existierenden Subscription zur\u00fcck. Wenn keine Subscription existiert, ist der R\u00fcckgabewert null . Ist der R\u00fcckgabewert null , dann erzeugen wir eine neue Subscription (Zeile 49 ). Erzeugen einer neuen Subscription \u00b6 Das Erezugen einer Subscription ist zun\u00e4chst einfach. Daf\u00fcr gibt es in der PushManager-API die Methode subscribe() . /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription swReg . pushManager . subscribe (); } else { // already subscribed } }); } Da wir in dem zweiten then() -Block keinen Zugriff mehr auf die Variable sw haben (wir geben die Promise von getSubscription() zur\u00fcck, nicht aber sw ), ben\u00f6tigen wir eine Variable, in der wir die Referenz auf den Service Worker speichern udn auf die wir in der gesamten Funktion Zugriff haben. Die Promise navigatir.serWorker.ready gibt etwas mehr als den Service Worker zur\u00fcck, eine sogenannte +Service Worker Registration* (siehe ready und Srvice Worker Registration ). Wir nennen unsere Variable deshalb swReg (Zeile 43 ). Die subscribe() -Funktion wird in Zeile 52 aufgerufen. Wir haben nun eine neue Subscription erstellt. Eine solche Subscription enth\u00e4lt den Endpunkt ( Push-API Endpunkt in der Abbildung ganz oben) des In-Browser Push Servers , an den die Push-Nachrichten gesendet werden und der f\u00fcr eine neue Push-Nachricht das push -Ereignis beim Service Worker ausl\u00f6st. Mit der Kenntnis des Endpunktes kann nun aber jede beliebige Anwendung eine Push-Nachricht an den In-Browser Push Server senden. Damit kann es passieren, dass Push-Nachrichten erstellt werden, die gar nicht von dem eigenen Backend kommen. Deshalb m\u00fcssen wir diese Informationen \u00fcber den Endpunkt sch\u00fctzen . Schutz der Subscription \u00b6 Der subscribe() -Methode k\u00f6nnen Optionen (als JavaScript-Objekt) \u00fcbergeben werden, welche zwei Eigenschaften enthalten k\u00f6nnen: userVisibleOnly ; kann true oder false sein. Wenn true , dann k\u00f6nnen nur Nachrichten gesendet werden, die \"sichtbar\" f\u00fcr den User sind, d.h. es k\u00f6nnen keine Aktionen (Java-Skripte o.\u00e4.) als Nachrichten gesendet werden und applicationServerKey : das ist ein Base64-ArrayBuffer, der einen Schl\u00fcssel enth\u00e4lt. Das Vorgehen daf\u00fcr ist z.B. hier , aber auch hier gut beschrieben. Die Grundidee dabei ist, dass wir sicherstellen wollen, dass nur Nachrichten, die von unserem Backend kommen, von dem In-Browser Push Server an unsere Webanwendung weitergeleitet werden. Dazu m\u00fcssen wir unser Backend erweitern. Backend erweitern \u00b6 Um unser Backend f\u00fcr das Senden von Push-Nachrichten einzurichten, ben\u00f6tigen wir das Modul web-push . Wir wechesln im Terminal in unseren Backend-Ordner und f\u00fchren dort npm install --save web-push aus. Die --save -Option wird seit npm 5.0.0 nicht mehr ben\u00f6tigt. Die Abh\u00e4ngigkeiten werden auch so in der package.json gespeichert. In diese package.json des Backends f\u00fcgen wir ein weiteres script hinzu: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"web-push\" : \"web-push\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" , \"web-push\" : \"^3.4.4\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Das erm\u00f6glicht uns, npm run web-push auszuf\u00fchren. Das f\u00fchrt allerdings zu einem Fehler, zeigt uns aber an, welche Optionen wir nutzen k\u00f6nnten: Usage: web-push send-notification --endpoint = <url> [ --key = <browser key> ] [ --auth = <auth secret> ] [ --payload = <message> ] [ --ttl = <seconds> ] [ --encoding = <encoding type> ] [ --vapid-subject = <vapid subject> ] [ --vapid-pubkey = <public key url base64> ] [ --vapid-pvtkey = <private key url base64> ] [ --gcm-api-key = <api key> ] web-push generate-vapid-keys [ --json ] Die send-notification -Option in Verbindung mit dem endpoint werden wir sp\u00e4ter verwenden, um Push-Nachrichten zu senden. Zun\u00e4chst ben\u00f6tigen wir den \u00f6ffentlichen und den privaten Schl\u00fcssel zur Verschl\u00fcsselung der Kommunikation mit dem In-Browser Push Server . Dazu verwenden wir die Option generate-vapid-keys und geben in das Terminal npm run web-push generate-vapid-keys ein. Wir erhalten eine Ausgabe in der Form ======================================= Public Key: BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY Private Key: TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4 ======================================= Public Key in der app.js \u00b6 Wir kopieren zun\u00e4chst den \u00f6ffentlichen ( public ) Schl\u00fcssel und speichern in in unsere app.js der Webanwendung: /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; swReg . pushManager . subscribe ({ userVisibleOnly : true , }); } else { // already subscribed } }); } Hier k\u00f6nnen wir auch schonmal die Option userVisibleOnly: true definieren (Zeile 54 - geschweifte Klammern nicht vergessen). Wie oben bereits erw\u00e4hnt, stellen wir den \u00f6ffentlichen Schl\u00fcssel als ein Base64- ArrayBuffer zur Verf\u00fcgung. Dazu ben\u00f6tigen wir eine Funktion urlBase64ToUint8Array(base64String) , die wir z.B. hier oder auch hier finden und die wir z.B. ebenfalls in die app.js einf\u00fcgen k\u00f6nnen (wenn Ihnen die app.js zu voll wird, k\u00f6nnen Sie sie auch in die db.js einf\u00fcgen): /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 function urlBase64ToUint8Array ( base64String ) { var padding = '=' . repeat (( 4 - base64String . length % 4 ) % 4 ); var base64 = ( base64String + padding ) . replace ( /\\-/g , '+' ) . replace ( /_/g , '/' ); var rawData = window . atob ( base64 ); var outputArray = new Uint8Array ( rawData . length ); for ( var i = 0 ; i < rawData . length ; ++ i ) { outputArray [ i ] = rawData . charCodeAt ( i ); } return outputArray ; } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }); } else { // already subscribed } }); } In Zeile 68 verwenden die neue Funktion, um den \u00f6ffentlichen Schl\u00fcssel in ein Base64-ArrayBuffer zu konvertieren und weisen diesen convertedVapidPublicKey der Eigenschaft applicationServerKey in den Optionen der subscribe() -methode zu (Zeile 71 ). Damit ist die Konfiguration der Subscription im Prinzip abgeschlossen. Allerdings m\u00fcssen wir diese Subscription nun auch noch unserem Backend mitteilen. Dazu sorgen wir zun\u00e4chst daf\u00fcr, dass die Subscription an den n\u00e4chsten then() -Block weitergegeben wird ( return swReg ) und senden diese im then() -Block an das Backend: /src/js/app.js 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); return swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }) } else { // already subscribed } }) . then ( newSub => { return fetch ( 'http://localhost:3000/subscription' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ( newSub ) }) . then ( response => { if ( response . ok ) { displayConfirmNotification (); } }) }); } Den Aufbau einer solchen POST-fetch() -Anfrage kennen wir schon. Wenn das Backend ein ok zur\u00fccksendet, dann rufen wir die displayConfirmNotatification() auf, die wir f\u00fcr Benachrichtigungen erstellt hatten. Aber diesen Endpunkt, den wir beim Backend verwenden, n\u00e4mlich POST http://localhost:3000/subscription , den m\u00fcssen wir erst noch im Backend einrichten. Neuer Endpunkt im Backend \u00b6 Wir wechseln wieder zu unserem Backend und \u00f6ffnen dort die server.js , um einen neuen Endpunkt zu definieren: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import express from 'express' ; import cors from 'cors' ; import { PostController } from './posts.controller.js' ; import { SubscriptionController } from \"./sub.controller.js\" ; const app = express (); const PORT = 3000 ; app . use ( cors ()); app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts/title\" , PostController . readOneByTitle ); // R (one) app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . post ( \"/subscription\" , SubscriptionController . subscribe ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Die Subscriptions wollen wir nicht durch den PostController verwalten lassen, sondern wir erstellen uns eine neue Datei sub.controller.js mit zun\u00e4chst nur sub.controller.js 1 2 3 4 5 6 export const SubscriptionController = { subscribe : ( req , res ) => { } } Dieser SubscriptionController ist auch bereits in der server.js importiert worden (siehe dort Zeile 4 ). Nun richten wir die Verwaltung der Subscription im Backend ein. Dabei gehen wir vor, wie z.B. hier oder hier beschrieben: sub.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import webpush from 'web-push' ; const publicVapidKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; const privateVapidKey = 'TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4' ; export const SubscriptionController = { subscribe : ( req , res ) => { const subscription = req . body ; console . log ( 'subscription' , subscription ); res . status ( 201 ). json ({ message : 'subscription received' }); webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); } } Bei den Schl\u00fcsseln m\u00fcssen Sie nat\u00fcrlich Ihre einsetzen (die mit web-push generate-vapid-keys erzeugten). Wenn wir nun das Backend ausf\u00fchren und auch die Webanwendung und auf den Button BENACHRICHTIGEN EIN klicken, dann erhalten wir eine Nachricht, die durch die displayConfirmNotification() -Methode ausgel\u00f6st wurde. Wir haben uns erfolgreich an die Push-Benachrichtigung angemeldet. Bitte beachten Sie die Ausgabe auf die Konsole im Backend, die wir durch die Zeile 10 console.log('subscription', subscription); erzeugt haben. Sie zeigt etwas in der Art: subscription { endpoint: 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , expirationTime: null, keys: { p256dh: 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , auth: 'fJRvyO_fnPXsYeDkMy_jAA' } } Das Wort subscription haben wir davor gesetzt, aber das subscription -Objekt besitzt drei Eigenschaften: endpoint : das ist genau der Endpunkt des In-Browser Push Servers (hier wegen Chrome nat\u00fcrlich irgendetwas bei Google). An diesen Endpunkt werden die Push-Notifikationen gesendet. expirationTime : spielt hier keine Rolle, ist ja auch null . Kann man nutzen, wenn man JSON Web Tokens verwendet und diesen eine Haltbarkeitsdauer zuweist. keys : das sind unsere Authentifikationsdaten beim In-Browser Push Server . Diese Daten zusammen mit dem privaten Schl\u00fcssel werden ben\u00f6tigt, um sich an dem Endpunkt zu authentifizieren. Achtung! Sie m\u00fcssen ab jetzt vermeiden, Ihren Service Worker auf unregister zu setzen. Eine Subscription existiert f\u00fcr einen Browser und auch f\u00fcr einen Service Worker! Update von Service Worker ist kein Problem, aber unregister f\u00fchrt zu Problemen - also lieber jetzt erstmal nicht mehr! Push-Nachrichten senden \u00b6 Wir haben uns nun erfolgreich f\u00fcr den Empfang von Push-Nachrichten \"registriert\". Wir haben in app.js allerdings noch nicht implementiert, was passieren soll, wenn wir bereits registriert sind (sihe oben Listing von app.js Zeile 74 ). Wir wollen aber trotzdem schonmal Push-Nachrichten senden. Dazu passen wir Backend die sub.controller.js wie folgt an: sub.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import webpush from 'web-push' ; const publicVapidKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; const privateVapidKey = 'TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4' ; const pushSubscription = { endpoint : 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , keys : { auth : 'fJRvyO_fnPXsYeDkMy_jAA' , p256dh : 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , } }; export const SubscriptionController = { subscribe : ( req , res ) => { const subscription = req . body ; console . log ( 'subscription' , subscription ); res . status ( 201 ). json ({ message : 'subscription received' }); }, sendNotification : () => { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); // res.status(201).json({ message: 'push notification sent'}); } } Wir definieren eine Variable pushSubscription , die genau alle Werte der Subscription oben enth\u00e4lt ( expirationTime lassen wir weg). Diese Informationen holen wir uns sp\u00e4ter noch automatisch. Au\u00dferdem definieren wir eine neue Funktion sendNotification() . Darin verwenden wir aus dem web-push -Package die Funktion setVapidDetail() . Diese Funktion bekommt als ersten Parameter eine id \u00fcbergeben, typischerweise (so wie hier beschrieben) einen String beginnend mit mailto: und der E-Mail-Adresse. Als zweiten Parameter wird der \u00f6ffentliche Vapid-Schl\u00fcssel als einfacher String \u00fcbergeben und als dritter Parameter der private Vapid-Schl\u00fcssel als einfacher String. Dann kann man f\u00fcr die Nachricht einen sogenannten payload festlegen, der ein beliebiges JSON ist (kann auch ein einfacher String sein). Dieser payload ist der Inhalt der Push-Nachricht. Wir haben in diesem Fall einen title und einen content festgelegt. Das Senden der eigentlichen Nachricht an den In-Browser Push Server erfolgt mithilfe der Funktion sendNotification() aus dem web-push -Package. Dieser wird das gesamte JavaScript-Objekt pushSubscription sowie der payload \u00fcbergeben. Die Funktion sendNotification() des SubscriptionControllers sollte am besten immer dann aufgerufen werden, wenn sich in der Datenbank etwas ge\u00e4ndert hat. Am besten, wenn ein neuer Datensatz hinzugekommen ist. Also rufen wir diese Funktion in dem PostController in der create() -Funktion auf: post.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import { PostService } from './db.sqlqueries.js' ; import { SubscriptionController } from \"./sub.controller.js\" ; export const PostController = { create : ( req , res ) => { if ( ! req . body ) { res . status ( 400 ). send ({ message : \"Content can not be empty!\" , }); } const post = {... req . body }; PostService . create ( post , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while creating the post.\" , }); else return res . json ( result ); }) . then ( data => { SubscriptionController . sendNotification (); return data ; }); }, // hier noch die anderen Funktionen R U D }; Wir k\u00f6nnen die Funktion insofern testen, als dass wir neue Daten eingeben, entweder \u00fcber Postman oder \u00fcber unsere Webanwendung \u00fcber das Formular (diese daten landen ja auch beim Backend). Allerdings k\u00f6nnen wir uns dabei nur von der fehlerfreiheit der Ausf\u00fchrungen \u00fcberzeugen (und im Backend erscheint im Terminal push notification sent ). Die Push-Nachricht ist nun beim In-Browser Push Server . Wir m\u00fcssen jetzt aber im Service Worker zun\u00e4chst das push -Event behandeln, um die Benachrichtigung tats\u00e4chlich im Ger\u00e4t zu erhalten. Das push -Ereignis behandeln \u00b6 Das push -Ereignis wird vom In-Browser Push Server ausgel\u00f6st, wann immer eine neue Push-Benachrichtigung dort eintrifft. Das kann ant\u00fcrlich auch dann passieren, wenn die Webanwendung geschlossen ist. Das Behandeln des push -Ereignisses ist deshalb Aufgabe des Service Workers. Wir erweitern also die sw.js um die Behandlung des push -Events: sw.js 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); Die Ereignisbehandlung im Service Worker haben wir nun schon ein paar Mal gemacht. Wir geben zuerst das event selbst einmal auf der Konsole aus. Es handelt sich um ein PushEvent . Dann erstellen wir uns Dummy- data , falls der Empfang der Push-Nachricht vom Server nicht klappen sollte. Wenn aber doch, dann schreiben wir die Variable data mit den Daten aus dem PushEvent (siehe oben im Backend payload - die Daten sollten also title und content enthalten). Wir lesen die data aus dem event -Objekt aus und wandeln diese mithilfe von JSON.parse() in ein JSON um. Dann erzeugen wir, so wie in Abschnitt Weitere Optionen f\u00fcr die Benachrichtigungen beschrieben, die Benachrichtigung. Beachten Sie noch, dass self auf den Service Worker zeigt und self.registration verwendet wird, um auf das ServiceWorkerRegistration zuzugreifen, welches \u00fcber die Methode showNotification() verf\u00fcgt. Wenn wir nun neue Daten \u00fcber das Formular eingeben, erscheint Eine Webseite \u00f6ffnen \u00b6 Jetzt fehlt eigentlich nur noch, dass wir in der Push-benachrichtung eine Aktion vorsehen, die das \u00d6ffnen unserer Webanwendung erm\u00f6glicht. Das typische Szenario ist ja, dass die Webanwendung geschlossen ist und dass im Backend eine Daten\u00e4nderung stattfindet und wir daraufhin eine Push-Nachricht erhalten. Nun wollen wir gerne auf diese Push-Nachricht klicken und damit soll die Anwendung ge\u00f6ffnet werden, die uns das neue Datum anzeigt. Daf\u00fcr haben wir auch schon alles vorbereitet - Service Worker reagieren wir bereits auf das Ereignis, dass auf die Benachrichtigung geklickt wird: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Die confirm -Antwort erfolgt nur, wenn nach der Zulassung der Berechtigung gefragt wird. Wir behandeln die anderen F\u00e4lle. sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( 'http://localhost:8080' ); client . focus (); } else { clients . openWindow ( 'http://localhost:8080' ); } notification . close (); }) ); } }); Mit clients greift der Service Worker auf alle Fenster (Anwendungen, Browser) zu, \u00fcber die er Kontrolle hat (siehe Clients ). Die Funktion matcAll() gibt ihm alle diese Clients als ein Array zur\u00fcck. Mit der JavaScript-Funktion find() laufen wir durch das Array und geben alle die Clients (genauer vom Typ WindowClient zur\u00fcck, f\u00fcr die gilt, dass sie sichtbar - im Sinne von erreichbar - sind. Diejenigen Clients, die nicht erreichbar sind, werden gar nicht erst zur\u00fcckgegeben. F\u00fcr alle anderen gilt, dass sie entweder bereits ge\u00f6ffnet sind oder nicht. Diejenigen (Browser), die bereits ge\u00f6ffnet sind, navigieren zur URL http://localhost:8080 und die anderen werden mit dieser URL ge\u00f6ffnet. Wenn nun neue Daten eingegeben werden, dann erscheint eine Push-Notifikation und wenn wir darauf klicken, dann \u00f6ffnet sich unsere Anwendung. Eine gute M\u00f6glichkeit, das zu Testen, besteht in der Verwendung unseres Frontends, das wir f\u00fcr die Eingabe der Daten erstellt haben. Schlie\u00dfen Sie die HTW-Insta -Anwendung, \u00f6ffnen Sie das andere Frontend, geben Sie Daten ein und speichern diese. Es erscheint eine Push-Notifikation, auf die Sie klicken k\u00f6nnen und die HTW-Insta -Anwendung wird im browser mit den neuen Daten ge\u00f6ffnet. Diejenigen, die ihr Android-Ger\u00e4t anschlie\u00dfenm k\u00f6nnen, sollten es auch unbedingt dar\u00fcber probieren. Hier noch eine kleine Verbesserung davon, weil wir ja die URL hart in den Code geschrieben haben. Wir k\u00f6nnen im Backend beim Senden der Notification eine weitere Eigenschaft hinzuf\u00fcgen: sub.controller.js 20 21 22 23 24 25 26 27 28 29 30 sendNotification : () => { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' , openUrl : '/help' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); } und diese der Benachrichtigung mitgeben: sw.js 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' , openUrl : '/' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , data : { url : data . openUrl } }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); und diese Informationen dann statt der festen URL verwenden: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( notification . data . url ); client . focus (); } else { clients . openWindow ( notification . data . url ); } notification . close (); }) ); } }); Wenn Sie jetzt auf die Push-nachricht klicken, sollte sich die help -Seite der Anwendung \u00f6ffnen. Success Wir haben zun\u00e4chst gelernt, dass Benachrichtigungen und Push-benachrichtigungen zwei grunds\u00e4tzlich verschiedene Dinge sind. Benachrichtigungen ist das, was man als Nachricht \"sieht\". Push-Notifikationen werden an den In-Browser Push Server vom Backend gesendet. Dieser Server l\u00f6st daraufhin ein push -Ereignis beim Service Worker aus, wenn die Webanwendung sich f\u00fcr den Empfang von Push-Nachrichten . registriert hat. Die Registrierung ist etwas aufwendig, muss aber nur einmal erledigt werden. Mit den Push-Nachrichten kennen wir nun eine weitere progressive Funktionalit\u00e4t. Bis dahin waren Push-Nachrichten nur nativen Apps vorbehalten.","title":"Push Notifications"},{"location":"pushnotes/#push-notifications","text":"Push Notifications sind sinnvoll, um die Nutzerin einer App \u00fcber Neuigkeiten zu informieren, sogar dann, wenn die Anwendung (und der Browser!) geschlossen ist (sind). Mit Push Notifications k\u00f6nnen Nutzerinnen wieder \"zur\u00fcck an die App geholt\" werden, d.h. mithilfe von Push Notifications kann man daf\u00fcr sorgen, dass Nutzerinnen die App wieder \u00f6ffnen, um sich die Neuigkeiten genauer anzuschauen. Die Neuigkeiten k\u00f6nnen neue Tweets, E-Mails, Nachrichten, Anrufe usw. sein. Das Prinzip, das f\u00fcr die Push-Benachrichtungen umgesetzt wird, sieht auf den ersten Blick etwas kompliziert aus: Im Zentrum stehen zun\u00e4chst die Webanwendung und der Service Worker. Die Webanwendung meldet sich bei den Push-Benachrichtigungen an und der Service Worker verwaltet diese. Jeder Browser hat eine eigenen \"eingebauten\" Push Server . Eine Push-Anmeldung ( Push Subscription ) erlaubt den Zugriff auf einen Push-API-Endpunkt auf den Push-Server. Die eigentliche Push-Benachrichtigung kommt jedoch vom eigenen Server. Er sendet die Push-Nachricht an den In-Browser Push Server , dieser l\u00f6st damit ein push -Ereignis beim Service Worker aus und der Service Worker schickt die Push-Benachrichtigung an die Webanwendung. Wir schauen uns alle diese Schritte im Detail an. Ausgangspunkt ist das Projekt in diesem Stand .","title":"Push Notifications"},{"location":"pushnotes/#anzeigen-von-benachrichtigungen","text":"Wir beginnen mit dem Anzeigen (der Darstellung) von Push-Benachrichtigungen in einer Webanwendung. Dieser Abschnitt hat noch nichts mit dem push -Ereignis zu tun! Wir ben\u00f6tigen zum Anzeigen nicht mal einen Service Worker. Es geht aber auch \u00fcber den Service Worker - und das wird sp\u00e4ter auch bei der Verwendung der Push-API notwendig. Die hier verwendete Notification-API wird von fast allen Browsern unterst\u00fctzt. Hier ist auch eine gute \u00dcbersicht dar\u00fcber, wie diese Notification-API verwendet wird.","title":"Anzeigen von Benachrichtigungen"},{"location":"pushnotes/#benachrichtigungen-einschalten","text":"Bevor wir das Anzeigen von (Push-)Benachrichtigungen betrachten, m\u00fcssen wir diese zuerst erlauben. In unserer Anwendung gibt es dazu den Button BENACHRICHTIGUNGEN EIN . In der index.html ist dieser Button zwei Mal definiert, einmal f\u00fcr einen schmalen Viewport und einmal f\u00fcr einen breiten. F\u00fcr beide Varianten sieht die Implementierung so aus: < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > F\u00fcr einen schmalen Viewport ist der Button dann unter dem Hamburger Men\u00fc in der linken oberen Ecke erreichbar. Beiden Buttons ist die CSS-Klasse enable-notifications zugewiesen. Wir sorgen zuerst daf\u00fcr, dass dieser Button nur angezeigt wird, wenn der Browser die Notification-API unterst\u00fctzt. Wenn nicht, dann w\u00e4re der Button funktionslos und wir br\u00e4uchten ihn nicht. Wir schalten ihn deshalb in der app.css zun\u00e4chst im Standartwert aus: /src/css/app.css 1 2 3 4 5 6 7 8 9 10 11 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } . enable-notifications { display : none ; } In der app.js pr\u00fcfen wir, ob der Browser die Notification-API unterst\u00fctzt und schalten f\u00fcr diesen Fall die Buttons wieder ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // notifications granted } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } In Zeile 1 erstellen wir uns eine Variable enableNotificationsButtons , die auf ein Array aller Buttons mit der CSS-Klasse enable-notifications zeigt. In Zeile 25 pr\u00fcfen wir nun, ob der Browser die Notification -API unterst\u00fctzt. Wenn ja, dann schalten wir alle Buttons aus dem enableNotificationsButtons -Array wieder auf sichtbar (von display: none auf display: inline-block ) und wir melden jeden dieser Buttons an die Ereignisbehandlung des click -Ereignisses an (Zeile 28 ). Die Behandlung des click -Ereignisses erfolgt in der Methode askForNotificationPermission() , die in den Zeilen 14-23 definiert ist. Da diese Methode nur dann aufgerufen wird, wenn der Browser die Notification -API unterst\u00fctzt, kann diese API darin verwendet werden. Mit der Funktion requestPermission() wird die Nutzerin gefragt, ob sie Benachrichtigungen zulassen m\u00f6chte. Diese Methode gibt ein Promise zur\u00fcck, dessen result die Werte granted , denied oder default haben kann. Werden Benachrichtigungen nicht erlaubt (Zeile 17 ), k\u00f6nnen wir nichts weiter tun. Die Nutzerin wird dann auch nicht erneut gefragt. Die Benachrichtigungen bleiben f\u00fcr die Webanwendung ausgeschaltet (Zeile 18 ). Wenn wir die Anwendung nun ausf\u00fchren (Reload nach Application --> Storage --> Clear Storage oder die Versionsnummern der Caches im Service Worker \u00e4ndern), dann erhalten wir nach dem Klicken auf den BENACHRICHTIGUNGEN EIN -Button folgende Abfrage: Wenn wir auf Zulassen klicken, dann erscheint in der Konsole User Chaice granted (Zeile 16 ). Beachten Sie, dass Sie nicht erneut gefragt werden, ob Benachrichtungen zugelassen werden sollen oder nicht. Erneutes Klicken auf den Button bewirkt (selbst nach einem Reload der Anwendung) keine erneute Abfrage. Deshalb w\u00e4re es eigentlich auch sinnvoll, den Button wieder zu verstecken, d.h. auf display: none zu setzen. Um die benachrichtigungen zu verwalten, k\u00f6nnen Sie in Chrome chrome://settings/content/notifications eingeben. Dort sehen Sie eine Auflistung aller Webanwendungen, die Sie besucht haben und die von Ihnen eine Erlaubnis zur Benachrichtung gewollt haben. Sie k\u00f6nnen dort die jeweiligen Einstellungen wieder \u00e4nder, z.B. auch f\u00fcr die hier entwickelte Anwendung.","title":"Benachrichtigungen einschalten"},{"location":"pushnotes/#benachrichtigungen-anzeigen","text":"Jetzt erstellen wir unsere erste Benachrichtigung mithilfe der Notification -API. Die einfachtse Form der Notification wird durch die Verwendung des parametrisierten Konstruktors von Notification ( new Notification('Nachricht') ) erstellt. Wir f\u00fcgen die app.js eine solche einfache Benachrichtigung f\u00fcr den Fall, dass Benachrichtigungen erlaubt werden, ein: /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { new Notification ( 'Successfully subscribed!' ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { displayConfirmNotification (); } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Wenn wir die Anwendung nun erneut ausf\u00fchren und auf den Button klicken, dann werden wir zwar nicht erneut gefragt, ob wir Benachrichtigungen zulassen oder blockieren wollen, aber da wir Benachrichtungen bereits zugelassen haben, erscheint nun die folgende Benachrichtigung: Der einfache Aufruf des Notification -Konstruktors mit einer einfachen Nachricht (Zeile 15 ) erzeugt auch die einfachste Form der Benachrichtigung. Dem Konstruktor lassen sich aber als zweiten Parameter noch JavaScript-Objekt f\u00fcr options \u00fcbergeben. Darin kann ein weiterer Text ( body ) definiert werden und z.B. auch ein eigenes icon . Wir betrachten das sp\u00e4ter noch etwas genauer, erstmal nur eine weitere Nachricht: /src/js/app.js 14 15 16 17 function displayConfirmNotification () { let options = { body : 'You successfully subscribed to our Notification service!' }; new Notification ( 'Successfully subscribed!' , options ); } ergibt dann die Benachrichtigung:","title":"Benachrichtigungen anzeigen"},{"location":"pushnotes/#benachrichtigungen-im-service-worker-erstellen","text":"Im jetzigen Stand werden die Benachrichtungen aus der Webanwendung heraus erstellt. Das ist auch v\u00f6llig ok. Die Notification -API l\u00e4sst sich sowohl in der Webanwendung verwenden, als auch im Service Worker. Da sp\u00e4ter aber die Push-Benachrichtigungen vom Service Worker verwaltet werden, wechseln wir jetzt auch f\u00fcr die einfachen Benachrichtigungen zum Service Worker, d.h. wir lassen die Benachrichtigungen nun nicht mehr durch die Webanwendung erstellen, sondern durch den Service Worker. Dazu passen wir unsere app.js wie folgt an: /src/js/app.js 14 15 16 17 18 19 20 21 22 23 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Der Service Worker besitzt eine eigene Funktion showNotification() , die intern ein Notification -Objekt erzeugt und der die gleiche Parameterliste \u00fcbergeben werden kann, wie dem Notification -Konstruktor. Nach Reload und Klicken des Buttons sehen wir nun folgende Benachrichtigung: Die Nachricht wurde extra um (from SW) erg\u00e4nzt, um kenntlich zu machen, dass die Benachrichtigung nun vom Service Worker angesto\u00dfen wird.","title":"Benachrichtigungen im Service Worker erstellen"},{"location":"pushnotes/#weitere-optionen-fur-die-benachrichtigungen","text":"Benachrichtigungen sind ein System-Feature , d.h. ihre Gestaltung hat etwas mit dem Ger\u00e4t zu tun, in dem diese Benachrichtigungen erscheinen. Es ist kein Browser-Feature . Benachrichtigungen sehen auf dem Mac anders aus, als unter Windows oder unter Linux und auf dem iPhone anders, als auf einem Android-Ger\u00e4t. Es gibt ziemlich viele m\u00f6gliche Optionen f\u00fcr eine solche Benachrichtigung, aber die unterschiedlichen Systeme beachten diese Optionen mal mehr und mal weniger. Wir werden hier der Vollst\u00e4ndigkeit halber einige Optionen benennen, aber am meisten sieht man von diesen Optionen auf einem Android-Ger\u00e4t. /src/js/app.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Auf dem Mac hat neben der icon -Option nur noch die actions -Option eine Auswirkung. Die Benachrichtigung sieht nun so aus (auf dem Mac): Man sieht das icon und unter dem Icon wird durch das Hovern mit der Maus ein Men\u00fc sichtbar, das die definierten actions enth\u00e4lt. mit image kann die gesamte Benachrichtigung mit einem Bild unterlegt werden (sieht man bei Android), mit vibrate kann die Benachrichtigung durch das Vibrieren des Ger\u00e4tes signalisiert werden. In unserem Beispiel vibriert das Ger\u00e4t 100 Millisekunden, dann ist 50 Millisekunden Pause und dann vibriert es nochmal f\u00fcr 200 Millisekunden. mit tag k\u00f6nnen Benachrichtigungen mit einer Art id versehen werden. Wenn meherere Benachrichtigungen mit demselben tag vorliegen, dann wird nur die zuletzt eingegangene Benachrichtigung angezeigt. Ansonsten erscheinen alle Benachrichtigungen untereinander. renotify geh\u00f6rt zu tag . Wenn der Wert true ist, dann wird die Nutzerin auch dann informiert, wenn eine neue Nachricht zum selben tag angekommen ist. Sonst nicht. Eine \u00dcbersicht \u00fcber alle Optionen findet sich hier . Wenn Sie ein Android-Ger\u00e4t besitzen, dann k\u00f6nnen Sie es an den Rechner andocken (USB-Anschluss - dazu m\u00fcssen Sie den USB-Zugriff erlauben) und in den Devloper Tools rechts oben unter den drei senkrechten Punkten den Men\u00fcpunkt More tools und dort Remote devices ausw\u00e4hlen und k\u00f6nnen dann ausprobieren, wie die Benachrichtigungen unter einem Android-Ger\u00e4t aussehen. Anleitung f\u00fcr Edge , Anleitung f\u00fcr Chrome , Anleitung f\u00fcr Firefox . Auf die unter actions definierten Aktionen kann innerhalb des Service Workers sogar reagiert werden: /sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Der Service Worker kann das notificationclick -Ereignis behandeln. Ebenso kann der Service Worker das Ereignis behandeln, das ausgel\u00f6st wird, wenn eine Benachrichtigung geschlossen wird: /sw.js 155 156 157 self . addEventListener ( 'notificationclose' , event => { console . log ( 'notification was closed' , event ); }); Wir wollen uns aber mit den Benachrichtigungen gar nicht weiter im Detail besch\u00e4ftigen, sondern lieber mit Push-Notationen. Kenntnisse \u00fcber Benachrichtigungen sind aber eine gute Voraussetzung, um zu den Push-Notifikationen \u00fcberzugehen.","title":"Weitere Optionen f\u00fcr die Benachrichtigungen"},{"location":"pushnotes/#push-benachrichtigungen","text":"Das Konzept der Benachrichtigung wird auch bei den Push-Nachrichten verwendet. Um Push-Nachrichten zu emmpfangen, muss man sich jedoch zun\u00e4chst f\u00fcr den Empfang registrieren (siehe in der Abbildung oben neue Push Subscription erstellen ).","title":"Push-Benachrichtigungen"},{"location":"pushnotes/#anmelden-an-push-nachrichten-subscription","text":"Die Anmeldung an die Push-Nachrichten geschieht in der Webanwendung. Wir passen dazu unsere app.js an und f\u00fcgen eine Funktion configurePushSubscription() ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } navigator . serviceWorker . ready . then ( sw => { return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription } else { // already subscribed } }); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // displayConfirmNotification(); configurePushSubscription (); } }); } if ( 'Notification' in window && 'serviceWorker' in navigator ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Die Methode configurePushSubscription() wird nun anstelle von displayConfirmNotifivcation() in der askForNotificationPermission() aufgerufen (Zeilen 62-63 ). Das liegt daran, dass die Notification.requestPermission() -Funktion auch f\u00fcr die Erlaubnis von Push-Nachrichten verwendet wird. Mit der Erlaubnis von Benachrichtigungen . wird also auch gleichzeitig die Erlaubnis von Push-Nachrichten erteilt. Da die Push-Benachrichtigungen \u00fcber den Service Worker verwaltet werden, wird in configurePushSubscription() zun\u00e4chst gepr\u00fcft, ob der Browser \u00fcberhaupt Service Worker unterst\u00fctzt (Zeile 39 ). Wenn nicht, wird die Methode sofort verlassen (Zeile 40 ). Da wir aber auch in die Abfrage nach der Notification-API (Zeile 68 ) noch die Abfrage nach dem serviceWorker hinzugef\u00fcgt haben, w\u00e4re der Button BENACHRICHTUNGEN EIN gar nicht sichtbar, wenn der Service Worker nicht im Browser unterst\u00fctzt w\u00fcrde. Dann w\u00fcrde auch nie die Funktion configurePushSubscription() aufgerufen. Wir lassen Zeilen 39-41 trotzdem sicherheitshalber drin. In Zeile 45 verwendet der Service Worker die PushManager-API . Eine der drei Methoden, die diese API zur Verf\u00fcgung stellt, ist die getSubscription() -Methode. Diese Methode gibt eine Promise mit einer existierenden Subscription zur\u00fcck. Wenn keine Subscription existiert, ist der R\u00fcckgabewert null . Ist der R\u00fcckgabewert null , dann erzeugen wir eine neue Subscription (Zeile 49 ).","title":"Anmelden an Push-Nachrichten (Subscription)"},{"location":"pushnotes/#erzeugen-einer-neuen-subscription","text":"Das Erezugen einer Subscription ist zun\u00e4chst einfach. Daf\u00fcr gibt es in der PushManager-API die Methode subscribe() . /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription swReg . pushManager . subscribe (); } else { // already subscribed } }); } Da wir in dem zweiten then() -Block keinen Zugriff mehr auf die Variable sw haben (wir geben die Promise von getSubscription() zur\u00fcck, nicht aber sw ), ben\u00f6tigen wir eine Variable, in der wir die Referenz auf den Service Worker speichern udn auf die wir in der gesamten Funktion Zugriff haben. Die Promise navigatir.serWorker.ready gibt etwas mehr als den Service Worker zur\u00fcck, eine sogenannte +Service Worker Registration* (siehe ready und Srvice Worker Registration ). Wir nennen unsere Variable deshalb swReg (Zeile 43 ). Die subscribe() -Funktion wird in Zeile 52 aufgerufen. Wir haben nun eine neue Subscription erstellt. Eine solche Subscription enth\u00e4lt den Endpunkt ( Push-API Endpunkt in der Abbildung ganz oben) des In-Browser Push Servers , an den die Push-Nachrichten gesendet werden und der f\u00fcr eine neue Push-Nachricht das push -Ereignis beim Service Worker ausl\u00f6st. Mit der Kenntnis des Endpunktes kann nun aber jede beliebige Anwendung eine Push-Nachricht an den In-Browser Push Server senden. Damit kann es passieren, dass Push-Nachrichten erstellt werden, die gar nicht von dem eigenen Backend kommen. Deshalb m\u00fcssen wir diese Informationen \u00fcber den Endpunkt sch\u00fctzen .","title":"Erzeugen einer neuen Subscription"},{"location":"pushnotes/#schutz-der-subscription","text":"Der subscribe() -Methode k\u00f6nnen Optionen (als JavaScript-Objekt) \u00fcbergeben werden, welche zwei Eigenschaften enthalten k\u00f6nnen: userVisibleOnly ; kann true oder false sein. Wenn true , dann k\u00f6nnen nur Nachrichten gesendet werden, die \"sichtbar\" f\u00fcr den User sind, d.h. es k\u00f6nnen keine Aktionen (Java-Skripte o.\u00e4.) als Nachrichten gesendet werden und applicationServerKey : das ist ein Base64-ArrayBuffer, der einen Schl\u00fcssel enth\u00e4lt. Das Vorgehen daf\u00fcr ist z.B. hier , aber auch hier gut beschrieben. Die Grundidee dabei ist, dass wir sicherstellen wollen, dass nur Nachrichten, die von unserem Backend kommen, von dem In-Browser Push Server an unsere Webanwendung weitergeleitet werden. Dazu m\u00fcssen wir unser Backend erweitern.","title":"Schutz der Subscription"},{"location":"pushnotes/#backend-erweitern","text":"Um unser Backend f\u00fcr das Senden von Push-Nachrichten einzurichten, ben\u00f6tigen wir das Modul web-push . Wir wechesln im Terminal in unseren Backend-Ordner und f\u00fchren dort npm install --save web-push aus. Die --save -Option wird seit npm 5.0.0 nicht mehr ben\u00f6tigt. Die Abh\u00e4ngigkeiten werden auch so in der package.json gespeichert. In diese package.json des Backends f\u00fcgen wir ein weiteres script hinzu: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"REST-Server f\u00fcr posts-Datenbank\" , \"main\" : \"server.js\" , \"type\" : \"module\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"web-push\" : \"web-push\" }, \"keywords\" : [ \"IKT\" , \"PWA\" , \"REST-API\" , \"Backendend\" , \"posts\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"express\" : \"^4.17.1\" , \"mysql\" : \"^2.18.1\" , \"web-push\" : \"^3.4.4\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.7\" } } Das erm\u00f6glicht uns, npm run web-push auszuf\u00fchren. Das f\u00fchrt allerdings zu einem Fehler, zeigt uns aber an, welche Optionen wir nutzen k\u00f6nnten: Usage: web-push send-notification --endpoint = <url> [ --key = <browser key> ] [ --auth = <auth secret> ] [ --payload = <message> ] [ --ttl = <seconds> ] [ --encoding = <encoding type> ] [ --vapid-subject = <vapid subject> ] [ --vapid-pubkey = <public key url base64> ] [ --vapid-pvtkey = <private key url base64> ] [ --gcm-api-key = <api key> ] web-push generate-vapid-keys [ --json ] Die send-notification -Option in Verbindung mit dem endpoint werden wir sp\u00e4ter verwenden, um Push-Nachrichten zu senden. Zun\u00e4chst ben\u00f6tigen wir den \u00f6ffentlichen und den privaten Schl\u00fcssel zur Verschl\u00fcsselung der Kommunikation mit dem In-Browser Push Server . Dazu verwenden wir die Option generate-vapid-keys und geben in das Terminal npm run web-push generate-vapid-keys ein. Wir erhalten eine Ausgabe in der Form ======================================= Public Key: BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY Private Key: TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4 =======================================","title":"Backend erweitern"},{"location":"pushnotes/#public-key-in-der-appjs","text":"Wir kopieren zun\u00e4chst den \u00f6ffentlichen ( public ) Schl\u00fcssel und speichern in in unsere app.js der Webanwendung: /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; swReg . pushManager . subscribe ({ userVisibleOnly : true , }); } else { // already subscribed } }); } Hier k\u00f6nnen wir auch schonmal die Option userVisibleOnly: true definieren (Zeile 54 - geschweifte Klammern nicht vergessen). Wie oben bereits erw\u00e4hnt, stellen wir den \u00f6ffentlichen Schl\u00fcssel als ein Base64- ArrayBuffer zur Verf\u00fcgung. Dazu ben\u00f6tigen wir eine Funktion urlBase64ToUint8Array(base64String) , die wir z.B. hier oder auch hier finden und die wir z.B. ebenfalls in die app.js einf\u00fcgen k\u00f6nnen (wenn Ihnen die app.js zu voll wird, k\u00f6nnen Sie sie auch in die db.js einf\u00fcgen): /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 function urlBase64ToUint8Array ( base64String ) { var padding = '=' . repeat (( 4 - base64String . length % 4 ) % 4 ); var base64 = ( base64String + padding ) . replace ( /\\-/g , '+' ) . replace ( /_/g , '/' ); var rawData = window . atob ( base64 ); var outputArray = new Uint8Array ( rawData . length ); for ( var i = 0 ; i < rawData . length ; ++ i ) { outputArray [ i ] = rawData . charCodeAt ( i ); } return outputArray ; } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }); } else { // already subscribed } }); } In Zeile 68 verwenden die neue Funktion, um den \u00f6ffentlichen Schl\u00fcssel in ein Base64-ArrayBuffer zu konvertieren und weisen diesen convertedVapidPublicKey der Eigenschaft applicationServerKey in den Optionen der subscribe() -methode zu (Zeile 71 ). Damit ist die Konfiguration der Subscription im Prinzip abgeschlossen. Allerdings m\u00fcssen wir diese Subscription nun auch noch unserem Backend mitteilen. Dazu sorgen wir zun\u00e4chst daf\u00fcr, dass die Subscription an den n\u00e4chsten then() -Block weitergegeben wird ( return swReg ) und senden diese im then() -Block an das Backend: /src/js/app.js 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); return swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }) } else { // already subscribed } }) . then ( newSub => { return fetch ( 'http://localhost:3000/subscription' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ( newSub ) }) . then ( response => { if ( response . ok ) { displayConfirmNotification (); } }) }); } Den Aufbau einer solchen POST-fetch() -Anfrage kennen wir schon. Wenn das Backend ein ok zur\u00fccksendet, dann rufen wir die displayConfirmNotatification() auf, die wir f\u00fcr Benachrichtigungen erstellt hatten. Aber diesen Endpunkt, den wir beim Backend verwenden, n\u00e4mlich POST http://localhost:3000/subscription , den m\u00fcssen wir erst noch im Backend einrichten.","title":"Public Key in der app.js"},{"location":"pushnotes/#neuer-endpunkt-im-backend","text":"Wir wechseln wieder zu unserem Backend und \u00f6ffnen dort die server.js , um einen neuen Endpunkt zu definieren: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import express from 'express' ; import cors from 'cors' ; import { PostController } from './posts.controller.js' ; import { SubscriptionController } from \"./sub.controller.js\" ; const app = express (); const PORT = 3000 ; app . use ( cors ()); app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts/title\" , PostController . readOneByTitle ); // R (one) app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . post ( \"/subscription\" , SubscriptionController . subscribe ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Die Subscriptions wollen wir nicht durch den PostController verwalten lassen, sondern wir erstellen uns eine neue Datei sub.controller.js mit zun\u00e4chst nur sub.controller.js 1 2 3 4 5 6 export const SubscriptionController = { subscribe : ( req , res ) => { } } Dieser SubscriptionController ist auch bereits in der server.js importiert worden (siehe dort Zeile 4 ). Nun richten wir die Verwaltung der Subscription im Backend ein. Dabei gehen wir vor, wie z.B. hier oder hier beschrieben: sub.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import webpush from 'web-push' ; const publicVapidKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; const privateVapidKey = 'TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4' ; export const SubscriptionController = { subscribe : ( req , res ) => { const subscription = req . body ; console . log ( 'subscription' , subscription ); res . status ( 201 ). json ({ message : 'subscription received' }); webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); } } Bei den Schl\u00fcsseln m\u00fcssen Sie nat\u00fcrlich Ihre einsetzen (die mit web-push generate-vapid-keys erzeugten). Wenn wir nun das Backend ausf\u00fchren und auch die Webanwendung und auf den Button BENACHRICHTIGEN EIN klicken, dann erhalten wir eine Nachricht, die durch die displayConfirmNotification() -Methode ausgel\u00f6st wurde. Wir haben uns erfolgreich an die Push-Benachrichtigung angemeldet. Bitte beachten Sie die Ausgabe auf die Konsole im Backend, die wir durch die Zeile 10 console.log('subscription', subscription); erzeugt haben. Sie zeigt etwas in der Art: subscription { endpoint: 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , expirationTime: null, keys: { p256dh: 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , auth: 'fJRvyO_fnPXsYeDkMy_jAA' } } Das Wort subscription haben wir davor gesetzt, aber das subscription -Objekt besitzt drei Eigenschaften: endpoint : das ist genau der Endpunkt des In-Browser Push Servers (hier wegen Chrome nat\u00fcrlich irgendetwas bei Google). An diesen Endpunkt werden die Push-Notifikationen gesendet. expirationTime : spielt hier keine Rolle, ist ja auch null . Kann man nutzen, wenn man JSON Web Tokens verwendet und diesen eine Haltbarkeitsdauer zuweist. keys : das sind unsere Authentifikationsdaten beim In-Browser Push Server . Diese Daten zusammen mit dem privaten Schl\u00fcssel werden ben\u00f6tigt, um sich an dem Endpunkt zu authentifizieren. Achtung! Sie m\u00fcssen ab jetzt vermeiden, Ihren Service Worker auf unregister zu setzen. Eine Subscription existiert f\u00fcr einen Browser und auch f\u00fcr einen Service Worker! Update von Service Worker ist kein Problem, aber unregister f\u00fchrt zu Problemen - also lieber jetzt erstmal nicht mehr!","title":"Neuer Endpunkt im Backend"},{"location":"pushnotes/#push-nachrichten-senden","text":"Wir haben uns nun erfolgreich f\u00fcr den Empfang von Push-Nachrichten \"registriert\". Wir haben in app.js allerdings noch nicht implementiert, was passieren soll, wenn wir bereits registriert sind (sihe oben Listing von app.js Zeile 74 ). Wir wollen aber trotzdem schonmal Push-Nachrichten senden. Dazu passen wir Backend die sub.controller.js wie folgt an: sub.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import webpush from 'web-push' ; const publicVapidKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; const privateVapidKey = 'TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4' ; const pushSubscription = { endpoint : 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , keys : { auth : 'fJRvyO_fnPXsYeDkMy_jAA' , p256dh : 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , } }; export const SubscriptionController = { subscribe : ( req , res ) => { const subscription = req . body ; console . log ( 'subscription' , subscription ); res . status ( 201 ). json ({ message : 'subscription received' }); }, sendNotification : () => { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); // res.status(201).json({ message: 'push notification sent'}); } } Wir definieren eine Variable pushSubscription , die genau alle Werte der Subscription oben enth\u00e4lt ( expirationTime lassen wir weg). Diese Informationen holen wir uns sp\u00e4ter noch automatisch. Au\u00dferdem definieren wir eine neue Funktion sendNotification() . Darin verwenden wir aus dem web-push -Package die Funktion setVapidDetail() . Diese Funktion bekommt als ersten Parameter eine id \u00fcbergeben, typischerweise (so wie hier beschrieben) einen String beginnend mit mailto: und der E-Mail-Adresse. Als zweiten Parameter wird der \u00f6ffentliche Vapid-Schl\u00fcssel als einfacher String \u00fcbergeben und als dritter Parameter der private Vapid-Schl\u00fcssel als einfacher String. Dann kann man f\u00fcr die Nachricht einen sogenannten payload festlegen, der ein beliebiges JSON ist (kann auch ein einfacher String sein). Dieser payload ist der Inhalt der Push-Nachricht. Wir haben in diesem Fall einen title und einen content festgelegt. Das Senden der eigentlichen Nachricht an den In-Browser Push Server erfolgt mithilfe der Funktion sendNotification() aus dem web-push -Package. Dieser wird das gesamte JavaScript-Objekt pushSubscription sowie der payload \u00fcbergeben. Die Funktion sendNotification() des SubscriptionControllers sollte am besten immer dann aufgerufen werden, wenn sich in der Datenbank etwas ge\u00e4ndert hat. Am besten, wenn ein neuer Datensatz hinzugekommen ist. Also rufen wir diese Funktion in dem PostController in der create() -Funktion auf: post.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import { PostService } from './db.sqlqueries.js' ; import { SubscriptionController } from \"./sub.controller.js\" ; export const PostController = { create : ( req , res ) => { if ( ! req . body ) { res . status ( 400 ). send ({ message : \"Content can not be empty!\" , }); } const post = {... req . body }; PostService . create ( post , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while creating the post.\" , }); else return res . json ( result ); }) . then ( data => { SubscriptionController . sendNotification (); return data ; }); }, // hier noch die anderen Funktionen R U D }; Wir k\u00f6nnen die Funktion insofern testen, als dass wir neue Daten eingeben, entweder \u00fcber Postman oder \u00fcber unsere Webanwendung \u00fcber das Formular (diese daten landen ja auch beim Backend). Allerdings k\u00f6nnen wir uns dabei nur von der fehlerfreiheit der Ausf\u00fchrungen \u00fcberzeugen (und im Backend erscheint im Terminal push notification sent ). Die Push-Nachricht ist nun beim In-Browser Push Server . Wir m\u00fcssen jetzt aber im Service Worker zun\u00e4chst das push -Event behandeln, um die Benachrichtigung tats\u00e4chlich im Ger\u00e4t zu erhalten.","title":"Push-Nachrichten senden"},{"location":"pushnotes/#das-push-ereignis-behandeln","text":"Das push -Ereignis wird vom In-Browser Push Server ausgel\u00f6st, wann immer eine neue Push-Benachrichtigung dort eintrifft. Das kann ant\u00fcrlich auch dann passieren, wenn die Webanwendung geschlossen ist. Das Behandeln des push -Ereignisses ist deshalb Aufgabe des Service Workers. Wir erweitern also die sw.js um die Behandlung des push -Events: sw.js 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); Die Ereignisbehandlung im Service Worker haben wir nun schon ein paar Mal gemacht. Wir geben zuerst das event selbst einmal auf der Konsole aus. Es handelt sich um ein PushEvent . Dann erstellen wir uns Dummy- data , falls der Empfang der Push-Nachricht vom Server nicht klappen sollte. Wenn aber doch, dann schreiben wir die Variable data mit den Daten aus dem PushEvent (siehe oben im Backend payload - die Daten sollten also title und content enthalten). Wir lesen die data aus dem event -Objekt aus und wandeln diese mithilfe von JSON.parse() in ein JSON um. Dann erzeugen wir, so wie in Abschnitt Weitere Optionen f\u00fcr die Benachrichtigungen beschrieben, die Benachrichtigung. Beachten Sie noch, dass self auf den Service Worker zeigt und self.registration verwendet wird, um auf das ServiceWorkerRegistration zuzugreifen, welches \u00fcber die Methode showNotification() verf\u00fcgt. Wenn wir nun neue Daten \u00fcber das Formular eingeben, erscheint","title":"Das push-Ereignis behandeln"},{"location":"pushnotes/#eine-webseite-offnen","text":"Jetzt fehlt eigentlich nur noch, dass wir in der Push-benachrichtung eine Aktion vorsehen, die das \u00d6ffnen unserer Webanwendung erm\u00f6glicht. Das typische Szenario ist ja, dass die Webanwendung geschlossen ist und dass im Backend eine Daten\u00e4nderung stattfindet und wir daraufhin eine Push-Nachricht erhalten. Nun wollen wir gerne auf diese Push-Nachricht klicken und damit soll die Anwendung ge\u00f6ffnet werden, die uns das neue Datum anzeigt. Daf\u00fcr haben wir auch schon alles vorbereitet - Service Worker reagieren wir bereits auf das Ereignis, dass auf die Benachrichtigung geklickt wird: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Die confirm -Antwort erfolgt nur, wenn nach der Zulassung der Berechtigung gefragt wird. Wir behandeln die anderen F\u00e4lle. sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( 'http://localhost:8080' ); client . focus (); } else { clients . openWindow ( 'http://localhost:8080' ); } notification . close (); }) ); } }); Mit clients greift der Service Worker auf alle Fenster (Anwendungen, Browser) zu, \u00fcber die er Kontrolle hat (siehe Clients ). Die Funktion matcAll() gibt ihm alle diese Clients als ein Array zur\u00fcck. Mit der JavaScript-Funktion find() laufen wir durch das Array und geben alle die Clients (genauer vom Typ WindowClient zur\u00fcck, f\u00fcr die gilt, dass sie sichtbar - im Sinne von erreichbar - sind. Diejenigen Clients, die nicht erreichbar sind, werden gar nicht erst zur\u00fcckgegeben. F\u00fcr alle anderen gilt, dass sie entweder bereits ge\u00f6ffnet sind oder nicht. Diejenigen (Browser), die bereits ge\u00f6ffnet sind, navigieren zur URL http://localhost:8080 und die anderen werden mit dieser URL ge\u00f6ffnet. Wenn nun neue Daten eingegeben werden, dann erscheint eine Push-Notifikation und wenn wir darauf klicken, dann \u00f6ffnet sich unsere Anwendung. Eine gute M\u00f6glichkeit, das zu Testen, besteht in der Verwendung unseres Frontends, das wir f\u00fcr die Eingabe der Daten erstellt haben. Schlie\u00dfen Sie die HTW-Insta -Anwendung, \u00f6ffnen Sie das andere Frontend, geben Sie Daten ein und speichern diese. Es erscheint eine Push-Notifikation, auf die Sie klicken k\u00f6nnen und die HTW-Insta -Anwendung wird im browser mit den neuen Daten ge\u00f6ffnet. Diejenigen, die ihr Android-Ger\u00e4t anschlie\u00dfenm k\u00f6nnen, sollten es auch unbedingt dar\u00fcber probieren. Hier noch eine kleine Verbesserung davon, weil wir ja die URL hart in den Code geschrieben haben. Wir k\u00f6nnen im Backend beim Senden der Notification eine weitere Eigenschaft hinzuf\u00fcgen: sub.controller.js 20 21 22 23 24 25 26 27 28 29 30 sendNotification : () => { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' , openUrl : '/help' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); } und diese der Benachrichtigung mitgeben: sw.js 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' , openUrl : '/' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , data : { url : data . openUrl } }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); und diese Informationen dann statt der festen URL verwenden: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( notification . data . url ); client . focus (); } else { clients . openWindow ( notification . data . url ); } notification . close (); }) ); } }); Wenn Sie jetzt auf die Push-nachricht klicken, sollte sich die help -Seite der Anwendung \u00f6ffnen. Success Wir haben zun\u00e4chst gelernt, dass Benachrichtigungen und Push-benachrichtigungen zwei grunds\u00e4tzlich verschiedene Dinge sind. Benachrichtigungen ist das, was man als Nachricht \"sieht\". Push-Notifikationen werden an den In-Browser Push Server vom Backend gesendet. Dieser Server l\u00f6st daraufhin ein push -Ereignis beim Service Worker aus, wenn die Webanwendung sich f\u00fcr den Empfang von Push-Nachrichten . registriert hat. Die Registrierung ist etwas aufwendig, muss aber nur einmal erledigt werden. Mit den Push-Nachrichten kennen wir nun eine weitere progressive Funktionalit\u00e4t. Bis dahin waren Push-Nachrichten nur nativen Apps vorbehalten.","title":"Eine Webseite \u00f6ffnen"},{"location":"serviceworker/","text":"Service Workers \u00b6 Wir betrachten einen wichtigen Grundbaustein, der solche Funktionalit\u00e4ten, wie Push-Notifikationen, Hintergrund-Synchronisationen und die M\u00f6glichkeit, auch offline die Anwendung auszuf\u00fchren, erst erm\u00f6glicht: sogenannte Service Workers . Ein service worker ist zun\u00e4chst einmal ein Skript (in JavaScript), welches im Browser im Hintergrund l\u00e4uft, unabh\u00e4ngig von der Webseite. Ein service worker stellt Funktionalit\u00e4ten, wie Push-Notifikationen oder Hintergrund-Synchronisationen zur Verf\u00fcgung, \u00e4hnlich einer API. Entstanden sind service worker aus der Verwendung des Application Caches . Die service worker API w\u00e4chst kontinuierlich und bietet zunehmend weitere Funktionalit\u00e4ten. Service worker haben einige n\u00fctzliche Eigenschaften: Ein service worker kann zwar nicht direkt das DOM einer Seite manipulieren, kann aber auf Requests der Seite mit Responses reagieren und die Seite selbst kann darufhin ihr DOM \u00e4ndern. Ein service worker ist ein \"programmierbarer\" Proxy, der steuert, wie Requests von der Webseite behandelt werden. Service workers verwenden die IndexDB API , um client-seitig strukturierte Daten persistent zu speichern. Service workers verwenden Promises . Wir werden uns deshalb Promises detailliert anschauen. Die folgenden Abbildungen verdeutlichen die Arbeitsweise eines service workers . Zun\u00e4chst \u00fcberlegen wir uns nochmal, wie \"normales\" JavaScript in Webanwendungen ausgef\u00fchrt wird. Die JS-Skripte werden mit den HTML-Seiten geladen. Sie stellen Funktionen bereit, die entweder durch Nutzerinteraktionen (z.B. click ) oder durch Lifecycle -Events (z.B. onload ) ausgel\u00f6st und aufgerufen werden. Diese Funktionen laufen alle in einem einzigen Thread: . Service worker laufen auf einem eigenen Thread. Service worker werden an HTML-Seiten registriert, laufen aber g\u00e4nzlich unabh\u00e4ngig von ihnen. Sie laufen sogar dann, wenn die HTML-Seiten geschlossen sind. Service worker laufen im Hintergrund , es handelt sich um Hintergrundprozesse . Service worker sind zwar JavaScript, maipulieren aber nicht den DOM. Sie sind nicht an HTML-Seiten gebunden, sondern an eine Domain. Service worker reagieren ebenfalls auf Ereignisse, aber andere, als wir sie von Webanwendungen kennnen, z.B. auf Push-Notifikationen. . Service worker laufen einfach im Hintergrund und warten auf Ereignisse. Welche Ereignisse k\u00f6nnen das sein? Ereignisse, auf die Service Worker reagieren k\u00f6nnen \u00b6 Wir betrachten hier einige der Ereignisse, auf die service worker reagieren k\u00f6nnen, auf die sie also \"h\u00f6ren\". Fetch \u00b6 Wann immer der Browser etwas vom Webserver l\u00e4dt, f\u00fchrt er ein fetch -Ereignis aus. Das kann eine HTML-Seite, aber auch ein Bild ( img ), eine CSS-Datei oder eine JavScript-Datei sein. Ein service worker kann auf ein solches Ereignis reagieren. Tats\u00e4chlich agiert der service worker als eon Proxy , der zwischen dem Browser und dem Webserver steht und die fetch -Anfragen ( requests ) des Browsers empf\u00e4ngt und eventuell an den Webserver weiterleitet. Eventuell leitet er die Anfrage auch nicht weiter, sondern beantwortet sie mit einer Resoource aus dem eigen Cache. F\u00fcr die fetch -Ereignisse wird die Fetch-API verwendet, auf die wir sp\u00e4ter noch ausf\u00fchrlich zu sprechen kommen. Wichtig ist an dieser Stelle zu erw\u00e4hnen, dass ein (asynchrones) XMLHttpRequest kein fetch -Ereignis darstellt. Eine Single-Page-Application, die Ressourcen vom Browser nachl\u00e4dt, ruft dabei keine (weiteren) fetch -Ereignisse auf. Push-Notifikationen \u00b6 Push-Notifikationen werden von einem (anderen) Server gesendet und k\u00f6nnen durch service worker verwaltet werden. Jeder Browser verf\u00fcgt \u00fcber eigene Push-Web-Server. Es k\u00f6nnen von jedem beliebigen Server Push-Nachrichten an diese Push-Web-Server gesendet werden. Der service worker kann auf solche Ereignisse reagieren. Wichtig ist hier zu wiederholen, dass service worker auch dann (im Hintergrund) arbeiten, wenn die Webanwendung selbst geschlossen ist. Sie k\u00f6nnen trotzdem erkennen, wenn Push-Nachrichten eingehen und darauf geeignet reagieren. Auch hier wirken service worker wieder wie ein Proxy , n\u00e4mlich f\u00fcr die Push-Web-Server. Der service worker kann z.B. eine Nachricht auf dem Startbildschirm des Smartphones erzeugen. Mit dieser Nachricht kann die Nutzerin dann etwas machen und l\u00f6st dabei das folgende Ereiegnis aus: Notification interaction \u00b6 Klickt eine Nutzerin auf die (Push-)Nachricht, die vom service worker erzeugt wurde, wird ein entsprechendes Ereignis ausgel\u00f6st, auf das wiederum der service worker reagieren kann, z.B. eine Webseite aufrufen und \u00f6ffnen oder eine Anwendung. Auch hier ist es wieder wichtig, dass das ein service worker erledigt und nicht ein JavaScript, welches zu einer Webanwendung geh\u00f6rt, da es ja sein kann, dass diese Webanwendung geschlossen ist. Hintergrund-Synchronisation \u00b6 Es kann passieren, dass in einer Webanwendung Ereignisse ausgef\u00fchrt werden, jedoch keine Verbindung zum Internet besteht. Typischerweise werden die Ausf\u00fchrungen solcher Ereignisse, die offline ausgef\u00fchrt werden, ebenfalls durch service worker erledigt. Sobald der Browser wieder mit dem Internet verbunden ist, l\u00f6st er ein Ereignis aus. Auf dieses Ereignis kann der service worker reagieren und die Ereignisse, die er offline gespeichert und beantwortet hat, nun im Hintergrund online ausf\u00fchren, so dass eine Hintergrund-Synchronisation erfolgt. Service-worker-Lifecycle-Ereignisse \u00b6 Ein service worker durchl\u00e4uft selbst einen eigenen \"Lebenszyklus\". Wir kennen Liefecycle-Events bereits aus Angular, z.B. ngOnInit() . Solche Lifecycle-Events existieren auch f\u00fcr service worker. Wir werden sie uns sp\u00e4ter im Detail anschauen. Zuerst betrachten wir aber zur Einf\u00fchrung ein einfaches Beispiel f\u00fcr die Verwendung eines service workers (wie wir gleich im Anschluss dikutieren werden, handelt es sich eigentlich um einen web worker ). Einfaches Beispiel service worker \u00b6 Wir betrachten ein erstes einfaches Beispiel f\u00fcr die Verwendung eines service workers. Wir erstellen folgende index.html . index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE HTML> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker </ title > </ head > < body > < p > Gr\u00f6\u00dfte Primzahl bisher: < output id = \"result\" ></ output ></ p > < script > var worker = new Worker ( 'worker.js' ); worker . onmessage = function ( event ) { document . getElementById ( 'result' ). textContent = event . data ; }; </ script > </ body > </ html > In Zeile 10 wird mithilfe des Worker -Kunstruktors ein Worker -Objekt erzeugt. Dem Konstruktor wird die Implementierung des workers \u00fcbergeben, genauer gesagt, die Implementierung des Event-Handlers f\u00fcr onmessage des Worker -Objektes. Die Implementierung des onmessage -Event-Handlers sieht typischerweise so aus, dass der service worker mit einer postMessage antwortet und diese an die Seite \u00fcbergibt. In unserem Beispiel ist die Implementierung wie folgt: worker.js 1 2 3 4 5 6 7 8 9 var n = 1 ; search : while ( true ) { n += 1 ; for ( var i = 2 ; i <= Math . sqrt ( n ); i += 1 ) if ( n % i == 0 ) continue search ; // found a prime! postMessage ( n ); } Zeile 8 enth\u00e4lt die postMessage . Darin wird eine Zahl n an die Seite geschickt, sobald sie berechnet wurde. Es handelt sich bei der Berechnung um eine Primzahlberechnung. Das hei\u00dft, der service worker arbeitet im Hintergrund und \"sucht\" neue Primzahlen. Sobald der service worker eine neue Primzahl gefunden hat, schickt er diese mithilfe der postMessage() -Funktion an die Webseite. Dadurch wird das onmessage -Ereignis (genauer gesagt, handelt es sich um das message -Event) behandelt. Wann immer onmessage auftritt, aktualisiert die Seite, genauer gesagt, der textContent des <output> -Elementes mit der id= \"result\" (siehe Zeilen 11-13 in index.html ). Dieses Beispiel ist extra einfach gehalten. genauer gesagt, handelt es sich bei dem Beispiel \"nur\" um einen web worker . Das W3C unterscheidet zwischen service workers und web workers . Der Unterschied zwischen web worker und * service worker* wird z.B. hier beschrieben. Web worker vs. service worker \u00b6 Wir verwenden f\u00fcr die Unterscheidung zwischen web worker und service worker haupts\u00e4chlich dieses Dokument . Darin finden wir auch folgendes Bild zur Beschreibung eines web workers: Ein web worker hat kein spezifisches Einsatzszenario, au\u00dfer dass er unabh\u00e4ngig von Hauptthread der Anwendung l\u00e4uft und Nachrichten mittels postMessage() an die Anwendung schicken kann. Demgegen\u00fcber ist ein service worker ein spezieller web worker , der als Proxy zwischen Anwendung und dem Netzwerk bzw. dem Cache agiert. Service workers verf\u00fcgen \u00fcber mehr Funktionalit\u00e4ten als web workers . Dazu geh\u00f6ren einerseits die Ereignisse, auf die service workers reagieren k\u00f6nnen: install und activate (sogenannte Lifecycle events ), fetch und weitere Ereignisse, die durch Erweiterungen spezifiziert werden, z.B. push , notificationclick , notificationclose , sync , canmakepayment , paymentrequest usw. (sogenannte Functional events ) sowie message und messageerror vom Web worker und andererseits die Status, in denen sich ein service worker befinden kann: parsed , installing , installed , activating , activated und redundant (initial: parsed ) Die prinzipielle Idee der Registrierung eines service workers sieht so aus: Die beiden Lifecycle-Events install und activate sind bereits eingezeichnet. Dabei ist zu betonen, dass ein service worker erst dann aktiviert werden kann, wenn kein anderer service worker mehr (in der gleichen Dom\u00e4ne/im gleichen Scope) l\u00e4uft. Ein anderer service worker, der eventuell noch l\u00e4uft, muss erst geschlossen werden, bevor der neue service worker das activate -Ereignis ausl\u00f6sen kann. Damit ein solcher \"alter\" service worker geschlossen werden kann, m\u00fcssen zumindest alle Tabs im Browser, in denen die Webanwendung l\u00e4uft, geschlossen werden. Selbst dann l\u00e4uft der service worker aber immernoch weiter. Er muss explizit geschlossen werden. das zeigen wir sp\u00e4ter. Registrierung eines service workers \u00b6 W\u00e4hrend wir f\u00fcr das einfache Beispiel mit dem web worker noch den Worker() -Konstruktor verwendet haben, erfolgt die Registrierung eines service workers mittels navigator.serviceWorker.register('./sw.js') , wobei in sw.js der service worker implementiert ist. Wir schauen uns die prinzipielle Registrierung an: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 <! DOCTYPE HTML > < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker < /title> < /head> < body > < p > \u00d6ffne die developer tools < /p> < script > if ( 'serviceWorker' in navigator ) { // Register a service worker hosted at the root of the // site using the default scope. navigator . serviceWorker . register ( './sw.js' ). then ( function ( registration ) { console . log ( 'Service worker registration succeeded:' , registration ); console . log ( 'Scope ist ' + registration . scope ); // At this point, you can optionally do something // with registration. See https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration }). catch ( function ( error ) { console . log ( 'Service worker registration failed:' , error ); }); // Independent of the registration, let's also display // information about whether the current page is controlled // by an existing service worker, and when that // controller changes. // First, do a one-off check if there's currently a // service worker in control. if ( navigator . serviceWorker . controller ) { console . log ( 'This page is currently controlled by:' , navigator . serviceWorker . controller ); } // Then, register a handler to detect when a new or // updated service worker takes control. navigator . serviceWorker . oncontrollerchange = function () { console . log ( 'This page is now controlled by:' , navigator . serviceWorker . controller ); }; } else { console . log ( 'Service workers are not supported.' ); } < /script> < /body> < /html> Wir haben hier die registrierung des service workers innerhalb des <script> -Elementes. Besser (und das werden wir sp\u00e4ter auch immer machen) ist die Erstellung einer eigenen .js -Datei daf\u00fcr. Wenn wir die Developer Tools \u00f6ffnen, sehen wir auf der Console folgende Ausgabe: F\u00fcr diejenigen, f\u00fcr die das Registrierungs-Beispiel oben zu lang ist, hier die Version von W3C : 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); }); Registrierung eines service workers in HTW-Insta \u00b6 Nun, da wir wissen, wie die Registrierung eines service workers prinzipiell funktioniert, f\u00fcgen wir unserem HTW-Insta -Beispiel einen solchen hinzu. Den aktuellen Stand der Anwendung finden Sie unter IKT-PWA-02 . Das ist die Version, in der bereits das Web-App-Manifest enthalten ist. Zun\u00e4chst beachten wir noch einen besonderen Eintrag in der package.json : package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"name\" : \"IKT-PWA-02\" , \"version\" : \"1.0.0\" , \"description\" : \"Grundger\u00fcst einer PWA mit Web-App-Manifest\" , \"main\" : \"index.js\" , \"scripts\" : { \"start\" : \"http-server -c-1\" }, \"keywords\" : [ \"pwa\" , \"progressive\" , \"web\" , \"app\" , \"ikt\" , \"htw\" , \"fiw\" ], \"author\" : \"J. freiheit\" , \"license\" : \"ISC\" , \"devDependencies\" : { \"http-server\" : \"^0.12.3\" } } In Zeile 7 wird definiert, dass wir bei Aufruf des npm start -Befehls den Webserver http-server starten. Das Argument -c-1 besagt, dass wir f\u00fcr diesen Server nicht den Browser-Cache verwenden wollen. Jede datei, die wir somit vom Webserver anfordern, wird somit auch tats\u00e4chlich neu geladen. Stattdessen wollen wir n\u00e4mlich nur den Cache des service workers verwenden. F\u00fcr unseren service worker erstellen wir uns im public -Ordner eine Datei sw.js . Da der service worker im public -Ordner angelegt wird, ist sein Scope unsere komplette Webanwendung. Wollten wir z.B. einen service worker, der nur f\u00fcr unsere Hilfe-Seiten zust\u00e4ndig ist, so h\u00e4tten wir die Datei im help -Ordner erzeugt. Um unseren service worker zu registrieren, m\u00fcssen wir ihn in alle unsere HTML-Seiten einbinden. Wir haben die /public/index.html -Datei und die /public/help/index.html . Dort k\u00f6nnten wir innerhalb des eines <script> -Elementes die Registrierung durchf\u00fchren. Da wir aber bereits in beiden Dateien die Datei public/src/js/app.js einbinden, erledigen wir die Registrierung einfach dort. Dann ist sie nur an einer Stelle und wir m\u00fcssen die HTML-Dateien nicht anpassen. In die /public/src/js/app.js schreiben wir nun Folgendes: /public/src/js/app.js 1 2 3 4 5 6 7 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then ( function () { console . log ( 'service worker registriert' ) }); } Starten unserer Anwendung und Aufruf im Browser ergibt die Ausgabe service worker registriert in der Konsole der DevTools. Im Zusammenhang mit service workern gibt es folgendes zu beachten: service worker funktionieren nur mit https oder auf localhost! Wundern Sie sich also nicht, wenn Ihr service worker nicht funktioniert, sobald Sie Ihre Anwendung auf einem Webserver ausf\u00fchren, der https nicht unterst\u00fctzt. Anleitungen, wie Sie einen Webserver f\u00fcr https konfigurieren, finden Sie z.B. hier . Schauen Sie ansonsten auch hier und hier . Service worker: Life-Cycle-Ereignisse behandeln \u00b6 Nun implementieren wir den service worker. Wir haben ihn bereits registriert, aber die Datei sw.js ist noch leer. Die grundlegende Idee eines service workers ist es, Ereignisse zu behandeln. Wir werden unserem service worker also eine Reihe von addEventListener() -Funktionen hinzuf\u00fcgen. Diese Funktion kennen wir bereits aus \"normalem\" JavaScript-Code. Dort haben h\u00e4ufig so etwas wie addEventListener('click', function() { /* ... */ }) geschrieben. Das click -Ereignis hat aber keine Relevanz f\u00fcr service worker, da ein service worker keine Auswirkungen auf das DOM hat. Vielmehr reagiert ein service worker auf Ereignisse, die wir bereits oben beschrieben haben. Wir f\u00fcgen unserem service worker Ereignisbehandlungen hinzu: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , function ( event ) { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , function ( event ) { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Wir melden uns also an zwei Ereignisse an: an das install -Ereignis und das activate -Ereignis. Beide Ereignisse sind auch gut hier beschrieben. Beide Ereignisbehandlungen sind zun\u00e4chst einfache Ausgaben auf die Konsole. Zwei Sachen sind noch erw\u00e4hnenswert: erstens wird self verwendet, um auf den service worker zu referenzieren. F\u00fcr Erl\u00e4uterungen \u00fcber den Unterschied von this und self k\u00f6nnen Sie sich z.B. hier informieren. Grunds\u00e4tzlich ist es so, dass mit self auf den gesamten Scope referenziert wird. In Webanwendungen ist der Scope h\u00e4ufig window , hier ist es aber die Domain, die den Scope des service workers beschreibt. Wir referenzieren also nicht auf den service worker selbst, sondern auf seinen Scope. Die zweite erw\u00e4hnenswerte Sache steht in Zeile 7 . Wenn ein service worker registriert ist, dann \"kontrolliert\" er nicht automatisch alle Webseiten in seiner Domain. Erst durch das Neuladen dieser Seiten gelangen sie unter seine Kontrolle. Mithilfe der claim() -Funktion aus dem Interface Clients \u00fcbernimmt der service worker die Kontrolle aber sofort, d.h. ohne ein Neuladen der Site. Einzige Ausnahme ist die Seite, die aktuell im Browser gezeigt wird. F\u00fcr diese muss tats\u00e4chlich ein Reload durchgef\u00fchrt werden. Weitere Informationen dazu finden Sie auch hier . Wenn wir die Anwendung nun starten und dann im Browser aufrufen, erhalten wir folgende Ausgabe auf der Konsole: Wir sehen, dass das install -Ereignis ausgel\u00f6st wurde, aber offensichtlich nicht das activate -Ereignis. Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Darum k\u00fcmmern wir uns im folgenden Abschnitt. Noch eine kurze Bemerkung zur Reihenfolge der Ausgaben auf der Konsole. Auf der Konsole haben wir folgende Ausgaben: service worker registriert service worker --> installing ... Das verwundert wahrscheinlich, weil das install -Event ausgel\u00f6st wird, bevor der service worker (existiert und) registriert werden kann. Also m\u00fcssten die Ausgaben eigentlich in der anderen Reihenfolge erscheinen. Wir erinnern uns (siehe zweite Abbildung ganz oben in diesem Kapitel): der service worker l\u00e4uft auf einem anderen Thread, als das \"normale\" JavaScript unserer Webanwendung. Also laufen app.js und sw.js auf verschiedenen Threads. In welchem dieser beiden Threads nun zuerst eine Ausgabe erfolgt, h\u00e4ngt von vielen verschiedenen Faktoren ab, l\u00e4sst sich aber auch nicht beeinflussen. Dieses Mal war es so, dass der app.js -Thread schneller mit der Ausgabe war, als der sw.js -Thread. Das kann beim n\u00e4chsten Mal schon anders sein. Wichtig ist, dass wir wissen, dass diese beiden Threads g\u00e4nzlich nebenl\u00e4ufig und unabh\u00e4ngig voneinander laufen. Sollten sich dabei Ausgaben \"\u00fcberholen\", dann ist das kein Bug, sondern ein Feature. Service worker aktualisieren und aktivieren \u00b6 Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Dazu werfen wir einen Blick in unsere DevTools. Wir w\u00e4hlen den Reiter Application und dann im linken Men\u00fc unter Application den Men\u00fcpunkt Service Woorkers : Wir sehen, dass der service worker im Status des Aktivierens ist, aber noch darauf wartet, aktiviert zu sein ( waiting to activate ). Hierzu ist es wichtig zu wissen: solange Sie im Browser (mindestens) einen Tab mit Ihrer Webanwendung offen haben, wird ein neuer service worker zwar installiert und registriert, aber nicht aktiviert, das liegt daran, dass die offene Seite eventuell noch mit einem alten service worker kommuniziert (evtl. hat der alte service worker noch etwas im Cache, das mit der Webanwendung synchronisiert werden m\u00fcsste). Wenn wir den Tab mit unserer Anwendung schlie\u00dfen und ihn erneut \u00f6ffnen, dann sehen wir: Es wurden also sowohl das install - als auch das activate -Ereignis ausgel\u00f6st. Auf der Konsole erscheint entsprechend: Wenn Sie Ihren service worker aktualisiert haben, m\u00fcssen Sie alle Tabs Ihrer Webanwendung schlie\u00dfen und erneut \u00f6ffnen, um den neuen service worker zu aktivieren! Beherzigen Sie die obige Ausgabe. Es kann Ihnen sehr viel Implementierungskummer bereiten, wenn Sie es nicht tun. Sie ver\u00e4ndern Ihren Code im service worker, aber die \u00c4nderungen sind nicht wirksam? Dann haben Sie vielleicht nur ein Reload Ihrer Webanwendung durchgef\u00fchrt - das reicht aber f\u00fcr den aktualisierten service worker nicht ! Aber zum Gl\u00fcck bieten die DevTools Hilfe, so dass Sie w\u00e4hrend der Entwicklung doch nicht immer den Tab schlie\u00dfen und neu \u00f6ffnen m\u00fcssen. Betrachten wir nochmals die folgende Abbildung: Sie haben drei M\u00f6glichkeiten, den service zu aktivieren: Markieren Sie die Checkbox links neben Update on reload . Dann wird durch das Reload Ihrer Webanwendung der aktualisierte service worker aktiviert. Klicken Sie auf den Link Update oder Klicken Sie auf den Link skipWaiting . Mit einem der drei Hilfen oben vermeiden Sie das Schlie\u00dfen und Neu\u00f6ffnen des Tabs und der Webanwendung. Am einfachsten ist die erste Variante. Dann m\u00fcssen Sie nur noch Reloaden und ansonsten weiter gar nichts machen. Arrow-Notation verwenden \u00b6 Wenn wir uns die Implementierung des service workers anschauen, dann sehen wir, dass wir etwas \"old school\" unterwegs sind, also so ca. 2017 ;-). Wir sollten anstelle der function() -Notation lieber die Arrow -Notation verwenden, um ein bisschen mehr up-to-date zu sein ;-). Zu Arrow-Notation siehe auch Hilfen\u2192Arrow-Notation . Unsere service worker Implementierung sieht dann so aus: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Die neuere Notation \u00e4ndert an der Funktionalit\u00e4t nat\u00fcrlich nichts. Service worker: andere Ereignisse behandeln \u00b6 Bis jetzt haben wir nur Life-Cycle-Events behandelt. Jetzt schauen wir uns einmal das fetch -Ereignis an. Wir wissen bereits , dass das fetch -Ereignis immer dann ausgel\u00f6st wird, wenn etwas vom Webserver geladen wird, wenn also CSS-Dateien oder ein Bild oder JavaScript-Dateien geladen werden. Wir behandeln ein solches Ereignis wiederum mit einer einfachen Konsolen-Ausgabe: /public/src/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Falls wir in den DevTools unter Application \u2192 Application \u2192 Service Workers das H\u00e4kchen bei Update on Reload gesetzt hatten, m\u00fcssen wir tats\u00e4chlich nur ein Reload der Webanwendung durchf\u00fchren und wir sehen auf der Konsole, dass das fetch -Event selbst f\u00fcr unsere bis jetzt sehr kleine Anwendung recht h\u00e4ufig aufgerufen wird: Wenn Sie in die jeweiligen FetchEvent -Objekte hineinklicken, welche Ressourcen jeweils per GET vom Webserver geladen werden. Anwendung mit einem Android-Ger\u00e4t verbinden \u00b6 Ich kann es leider (bis jetzt noch) nicht ausprobieren, aber hier ist beschrieben, wie Sie die Anwendung auf einem Android-Ger\u00e4t aufrufen k\u00f6nnen. Nun, da wir service worker verwenden, sollte es funktionieren. Das hier mag auch hilfreich sein. Anwendung auf Ihrem iPhone aufrufen \u00b6 Um die Anwendung auf Ihrem iPhone aufzurufen, m\u00fcssen Sie sich zun\u00e4chst nur anschauen, was im Terminal ausgegeben wird, nachdem Sie npm start aufgerufen haben: Starting up http-server, serving ./public Available on: http://127.0.0.1:8080 htpp://192.168.1.24:8080 Hit CTRL-C to stop the server Rufen Sie in Ihrem iPhone einen Browser auf (z.B. Safari oder Chrome) und geben dort di ezweite der beiden URLs ein (also htpp://192.168.1.24:8080 ). Die Anwendung wird ausgef\u00fchrt. iOS unterst\u00fctzt aber leider (noch) nicht, dass Sie ein Start-Icon daf\u00fcr auf den Startbildschirm ablegen.","title":"Service Worker"},{"location":"serviceworker/#service-workers","text":"Wir betrachten einen wichtigen Grundbaustein, der solche Funktionalit\u00e4ten, wie Push-Notifikationen, Hintergrund-Synchronisationen und die M\u00f6glichkeit, auch offline die Anwendung auszuf\u00fchren, erst erm\u00f6glicht: sogenannte Service Workers . Ein service worker ist zun\u00e4chst einmal ein Skript (in JavaScript), welches im Browser im Hintergrund l\u00e4uft, unabh\u00e4ngig von der Webseite. Ein service worker stellt Funktionalit\u00e4ten, wie Push-Notifikationen oder Hintergrund-Synchronisationen zur Verf\u00fcgung, \u00e4hnlich einer API. Entstanden sind service worker aus der Verwendung des Application Caches . Die service worker API w\u00e4chst kontinuierlich und bietet zunehmend weitere Funktionalit\u00e4ten. Service worker haben einige n\u00fctzliche Eigenschaften: Ein service worker kann zwar nicht direkt das DOM einer Seite manipulieren, kann aber auf Requests der Seite mit Responses reagieren und die Seite selbst kann darufhin ihr DOM \u00e4ndern. Ein service worker ist ein \"programmierbarer\" Proxy, der steuert, wie Requests von der Webseite behandelt werden. Service workers verwenden die IndexDB API , um client-seitig strukturierte Daten persistent zu speichern. Service workers verwenden Promises . Wir werden uns deshalb Promises detailliert anschauen. Die folgenden Abbildungen verdeutlichen die Arbeitsweise eines service workers . Zun\u00e4chst \u00fcberlegen wir uns nochmal, wie \"normales\" JavaScript in Webanwendungen ausgef\u00fchrt wird. Die JS-Skripte werden mit den HTML-Seiten geladen. Sie stellen Funktionen bereit, die entweder durch Nutzerinteraktionen (z.B. click ) oder durch Lifecycle -Events (z.B. onload ) ausgel\u00f6st und aufgerufen werden. Diese Funktionen laufen alle in einem einzigen Thread: . Service worker laufen auf einem eigenen Thread. Service worker werden an HTML-Seiten registriert, laufen aber g\u00e4nzlich unabh\u00e4ngig von ihnen. Sie laufen sogar dann, wenn die HTML-Seiten geschlossen sind. Service worker laufen im Hintergrund , es handelt sich um Hintergrundprozesse . Service worker sind zwar JavaScript, maipulieren aber nicht den DOM. Sie sind nicht an HTML-Seiten gebunden, sondern an eine Domain. Service worker reagieren ebenfalls auf Ereignisse, aber andere, als wir sie von Webanwendungen kennnen, z.B. auf Push-Notifikationen. . Service worker laufen einfach im Hintergrund und warten auf Ereignisse. Welche Ereignisse k\u00f6nnen das sein?","title":"Service Workers"},{"location":"serviceworker/#ereignisse-auf-die-service-worker-reagieren-konnen","text":"Wir betrachten hier einige der Ereignisse, auf die service worker reagieren k\u00f6nnen, auf die sie also \"h\u00f6ren\".","title":"Ereignisse, auf die Service Worker reagieren k\u00f6nnen"},{"location":"serviceworker/#fetch","text":"Wann immer der Browser etwas vom Webserver l\u00e4dt, f\u00fchrt er ein fetch -Ereignis aus. Das kann eine HTML-Seite, aber auch ein Bild ( img ), eine CSS-Datei oder eine JavScript-Datei sein. Ein service worker kann auf ein solches Ereignis reagieren. Tats\u00e4chlich agiert der service worker als eon Proxy , der zwischen dem Browser und dem Webserver steht und die fetch -Anfragen ( requests ) des Browsers empf\u00e4ngt und eventuell an den Webserver weiterleitet. Eventuell leitet er die Anfrage auch nicht weiter, sondern beantwortet sie mit einer Resoource aus dem eigen Cache. F\u00fcr die fetch -Ereignisse wird die Fetch-API verwendet, auf die wir sp\u00e4ter noch ausf\u00fchrlich zu sprechen kommen. Wichtig ist an dieser Stelle zu erw\u00e4hnen, dass ein (asynchrones) XMLHttpRequest kein fetch -Ereignis darstellt. Eine Single-Page-Application, die Ressourcen vom Browser nachl\u00e4dt, ruft dabei keine (weiteren) fetch -Ereignisse auf.","title":"Fetch"},{"location":"serviceworker/#push-notifikationen","text":"Push-Notifikationen werden von einem (anderen) Server gesendet und k\u00f6nnen durch service worker verwaltet werden. Jeder Browser verf\u00fcgt \u00fcber eigene Push-Web-Server. Es k\u00f6nnen von jedem beliebigen Server Push-Nachrichten an diese Push-Web-Server gesendet werden. Der service worker kann auf solche Ereignisse reagieren. Wichtig ist hier zu wiederholen, dass service worker auch dann (im Hintergrund) arbeiten, wenn die Webanwendung selbst geschlossen ist. Sie k\u00f6nnen trotzdem erkennen, wenn Push-Nachrichten eingehen und darauf geeignet reagieren. Auch hier wirken service worker wieder wie ein Proxy , n\u00e4mlich f\u00fcr die Push-Web-Server. Der service worker kann z.B. eine Nachricht auf dem Startbildschirm des Smartphones erzeugen. Mit dieser Nachricht kann die Nutzerin dann etwas machen und l\u00f6st dabei das folgende Ereiegnis aus:","title":"Push-Notifikationen"},{"location":"serviceworker/#notification-interaction","text":"Klickt eine Nutzerin auf die (Push-)Nachricht, die vom service worker erzeugt wurde, wird ein entsprechendes Ereignis ausgel\u00f6st, auf das wiederum der service worker reagieren kann, z.B. eine Webseite aufrufen und \u00f6ffnen oder eine Anwendung. Auch hier ist es wieder wichtig, dass das ein service worker erledigt und nicht ein JavaScript, welches zu einer Webanwendung geh\u00f6rt, da es ja sein kann, dass diese Webanwendung geschlossen ist.","title":"Notification interaction"},{"location":"serviceworker/#hintergrund-synchronisation","text":"Es kann passieren, dass in einer Webanwendung Ereignisse ausgef\u00fchrt werden, jedoch keine Verbindung zum Internet besteht. Typischerweise werden die Ausf\u00fchrungen solcher Ereignisse, die offline ausgef\u00fchrt werden, ebenfalls durch service worker erledigt. Sobald der Browser wieder mit dem Internet verbunden ist, l\u00f6st er ein Ereignis aus. Auf dieses Ereignis kann der service worker reagieren und die Ereignisse, die er offline gespeichert und beantwortet hat, nun im Hintergrund online ausf\u00fchren, so dass eine Hintergrund-Synchronisation erfolgt.","title":"Hintergrund-Synchronisation"},{"location":"serviceworker/#service-worker-lifecycle-ereignisse","text":"Ein service worker durchl\u00e4uft selbst einen eigenen \"Lebenszyklus\". Wir kennen Liefecycle-Events bereits aus Angular, z.B. ngOnInit() . Solche Lifecycle-Events existieren auch f\u00fcr service worker. Wir werden sie uns sp\u00e4ter im Detail anschauen. Zuerst betrachten wir aber zur Einf\u00fchrung ein einfaches Beispiel f\u00fcr die Verwendung eines service workers (wie wir gleich im Anschluss dikutieren werden, handelt es sich eigentlich um einen web worker ).","title":"Service-worker-Lifecycle-Ereignisse"},{"location":"serviceworker/#einfaches-beispiel-service-worker","text":"Wir betrachten ein erstes einfaches Beispiel f\u00fcr die Verwendung eines service workers. Wir erstellen folgende index.html . index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE HTML> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker </ title > </ head > < body > < p > Gr\u00f6\u00dfte Primzahl bisher: < output id = \"result\" ></ output ></ p > < script > var worker = new Worker ( 'worker.js' ); worker . onmessage = function ( event ) { document . getElementById ( 'result' ). textContent = event . data ; }; </ script > </ body > </ html > In Zeile 10 wird mithilfe des Worker -Kunstruktors ein Worker -Objekt erzeugt. Dem Konstruktor wird die Implementierung des workers \u00fcbergeben, genauer gesagt, die Implementierung des Event-Handlers f\u00fcr onmessage des Worker -Objektes. Die Implementierung des onmessage -Event-Handlers sieht typischerweise so aus, dass der service worker mit einer postMessage antwortet und diese an die Seite \u00fcbergibt. In unserem Beispiel ist die Implementierung wie folgt: worker.js 1 2 3 4 5 6 7 8 9 var n = 1 ; search : while ( true ) { n += 1 ; for ( var i = 2 ; i <= Math . sqrt ( n ); i += 1 ) if ( n % i == 0 ) continue search ; // found a prime! postMessage ( n ); } Zeile 8 enth\u00e4lt die postMessage . Darin wird eine Zahl n an die Seite geschickt, sobald sie berechnet wurde. Es handelt sich bei der Berechnung um eine Primzahlberechnung. Das hei\u00dft, der service worker arbeitet im Hintergrund und \"sucht\" neue Primzahlen. Sobald der service worker eine neue Primzahl gefunden hat, schickt er diese mithilfe der postMessage() -Funktion an die Webseite. Dadurch wird das onmessage -Ereignis (genauer gesagt, handelt es sich um das message -Event) behandelt. Wann immer onmessage auftritt, aktualisiert die Seite, genauer gesagt, der textContent des <output> -Elementes mit der id= \"result\" (siehe Zeilen 11-13 in index.html ). Dieses Beispiel ist extra einfach gehalten. genauer gesagt, handelt es sich bei dem Beispiel \"nur\" um einen web worker . Das W3C unterscheidet zwischen service workers und web workers . Der Unterschied zwischen web worker und * service worker* wird z.B. hier beschrieben.","title":"Einfaches Beispiel service worker"},{"location":"serviceworker/#web-worker-vs-service-worker","text":"Wir verwenden f\u00fcr die Unterscheidung zwischen web worker und service worker haupts\u00e4chlich dieses Dokument . Darin finden wir auch folgendes Bild zur Beschreibung eines web workers: Ein web worker hat kein spezifisches Einsatzszenario, au\u00dfer dass er unabh\u00e4ngig von Hauptthread der Anwendung l\u00e4uft und Nachrichten mittels postMessage() an die Anwendung schicken kann. Demgegen\u00fcber ist ein service worker ein spezieller web worker , der als Proxy zwischen Anwendung und dem Netzwerk bzw. dem Cache agiert. Service workers verf\u00fcgen \u00fcber mehr Funktionalit\u00e4ten als web workers . Dazu geh\u00f6ren einerseits die Ereignisse, auf die service workers reagieren k\u00f6nnen: install und activate (sogenannte Lifecycle events ), fetch und weitere Ereignisse, die durch Erweiterungen spezifiziert werden, z.B. push , notificationclick , notificationclose , sync , canmakepayment , paymentrequest usw. (sogenannte Functional events ) sowie message und messageerror vom Web worker und andererseits die Status, in denen sich ein service worker befinden kann: parsed , installing , installed , activating , activated und redundant (initial: parsed ) Die prinzipielle Idee der Registrierung eines service workers sieht so aus: Die beiden Lifecycle-Events install und activate sind bereits eingezeichnet. Dabei ist zu betonen, dass ein service worker erst dann aktiviert werden kann, wenn kein anderer service worker mehr (in der gleichen Dom\u00e4ne/im gleichen Scope) l\u00e4uft. Ein anderer service worker, der eventuell noch l\u00e4uft, muss erst geschlossen werden, bevor der neue service worker das activate -Ereignis ausl\u00f6sen kann. Damit ein solcher \"alter\" service worker geschlossen werden kann, m\u00fcssen zumindest alle Tabs im Browser, in denen die Webanwendung l\u00e4uft, geschlossen werden. Selbst dann l\u00e4uft der service worker aber immernoch weiter. Er muss explizit geschlossen werden. das zeigen wir sp\u00e4ter.","title":"Web worker vs. service worker"},{"location":"serviceworker/#registrierung-eines-service-workers","text":"W\u00e4hrend wir f\u00fcr das einfache Beispiel mit dem web worker noch den Worker() -Konstruktor verwendet haben, erfolgt die Registrierung eines service workers mittels navigator.serviceWorker.register('./sw.js') , wobei in sw.js der service worker implementiert ist. Wir schauen uns die prinzipielle Registrierung an: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 <! DOCTYPE HTML > < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker < /title> < /head> < body > < p > \u00d6ffne die developer tools < /p> < script > if ( 'serviceWorker' in navigator ) { // Register a service worker hosted at the root of the // site using the default scope. navigator . serviceWorker . register ( './sw.js' ). then ( function ( registration ) { console . log ( 'Service worker registration succeeded:' , registration ); console . log ( 'Scope ist ' + registration . scope ); // At this point, you can optionally do something // with registration. See https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration }). catch ( function ( error ) { console . log ( 'Service worker registration failed:' , error ); }); // Independent of the registration, let's also display // information about whether the current page is controlled // by an existing service worker, and when that // controller changes. // First, do a one-off check if there's currently a // service worker in control. if ( navigator . serviceWorker . controller ) { console . log ( 'This page is currently controlled by:' , navigator . serviceWorker . controller ); } // Then, register a handler to detect when a new or // updated service worker takes control. navigator . serviceWorker . oncontrollerchange = function () { console . log ( 'This page is now controlled by:' , navigator . serviceWorker . controller ); }; } else { console . log ( 'Service workers are not supported.' ); } < /script> < /body> < /html> Wir haben hier die registrierung des service workers innerhalb des <script> -Elementes. Besser (und das werden wir sp\u00e4ter auch immer machen) ist die Erstellung einer eigenen .js -Datei daf\u00fcr. Wenn wir die Developer Tools \u00f6ffnen, sehen wir auf der Console folgende Ausgabe: F\u00fcr diejenigen, f\u00fcr die das Registrierungs-Beispiel oben zu lang ist, hier die Version von W3C : 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); });","title":"Registrierung eines service workers"},{"location":"serviceworker/#registrierung-eines-service-workers-in-htw-insta","text":"Nun, da wir wissen, wie die Registrierung eines service workers prinzipiell funktioniert, f\u00fcgen wir unserem HTW-Insta -Beispiel einen solchen hinzu. Den aktuellen Stand der Anwendung finden Sie unter IKT-PWA-02 . Das ist die Version, in der bereits das Web-App-Manifest enthalten ist. Zun\u00e4chst beachten wir noch einen besonderen Eintrag in der package.json : package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"name\" : \"IKT-PWA-02\" , \"version\" : \"1.0.0\" , \"description\" : \"Grundger\u00fcst einer PWA mit Web-App-Manifest\" , \"main\" : \"index.js\" , \"scripts\" : { \"start\" : \"http-server -c-1\" }, \"keywords\" : [ \"pwa\" , \"progressive\" , \"web\" , \"app\" , \"ikt\" , \"htw\" , \"fiw\" ], \"author\" : \"J. freiheit\" , \"license\" : \"ISC\" , \"devDependencies\" : { \"http-server\" : \"^0.12.3\" } } In Zeile 7 wird definiert, dass wir bei Aufruf des npm start -Befehls den Webserver http-server starten. Das Argument -c-1 besagt, dass wir f\u00fcr diesen Server nicht den Browser-Cache verwenden wollen. Jede datei, die wir somit vom Webserver anfordern, wird somit auch tats\u00e4chlich neu geladen. Stattdessen wollen wir n\u00e4mlich nur den Cache des service workers verwenden. F\u00fcr unseren service worker erstellen wir uns im public -Ordner eine Datei sw.js . Da der service worker im public -Ordner angelegt wird, ist sein Scope unsere komplette Webanwendung. Wollten wir z.B. einen service worker, der nur f\u00fcr unsere Hilfe-Seiten zust\u00e4ndig ist, so h\u00e4tten wir die Datei im help -Ordner erzeugt. Um unseren service worker zu registrieren, m\u00fcssen wir ihn in alle unsere HTML-Seiten einbinden. Wir haben die /public/index.html -Datei und die /public/help/index.html . Dort k\u00f6nnten wir innerhalb des eines <script> -Elementes die Registrierung durchf\u00fchren. Da wir aber bereits in beiden Dateien die Datei public/src/js/app.js einbinden, erledigen wir die Registrierung einfach dort. Dann ist sie nur an einer Stelle und wir m\u00fcssen die HTML-Dateien nicht anpassen. In die /public/src/js/app.js schreiben wir nun Folgendes: /public/src/js/app.js 1 2 3 4 5 6 7 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then ( function () { console . log ( 'service worker registriert' ) }); } Starten unserer Anwendung und Aufruf im Browser ergibt die Ausgabe service worker registriert in der Konsole der DevTools. Im Zusammenhang mit service workern gibt es folgendes zu beachten: service worker funktionieren nur mit https oder auf localhost! Wundern Sie sich also nicht, wenn Ihr service worker nicht funktioniert, sobald Sie Ihre Anwendung auf einem Webserver ausf\u00fchren, der https nicht unterst\u00fctzt. Anleitungen, wie Sie einen Webserver f\u00fcr https konfigurieren, finden Sie z.B. hier . Schauen Sie ansonsten auch hier und hier .","title":"Registrierung eines service workers in HTW-Insta"},{"location":"serviceworker/#service-worker-life-cycle-ereignisse-behandeln","text":"Nun implementieren wir den service worker. Wir haben ihn bereits registriert, aber die Datei sw.js ist noch leer. Die grundlegende Idee eines service workers ist es, Ereignisse zu behandeln. Wir werden unserem service worker also eine Reihe von addEventListener() -Funktionen hinzuf\u00fcgen. Diese Funktion kennen wir bereits aus \"normalem\" JavaScript-Code. Dort haben h\u00e4ufig so etwas wie addEventListener('click', function() { /* ... */ }) geschrieben. Das click -Ereignis hat aber keine Relevanz f\u00fcr service worker, da ein service worker keine Auswirkungen auf das DOM hat. Vielmehr reagiert ein service worker auf Ereignisse, die wir bereits oben beschrieben haben. Wir f\u00fcgen unserem service worker Ereignisbehandlungen hinzu: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , function ( event ) { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , function ( event ) { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Wir melden uns also an zwei Ereignisse an: an das install -Ereignis und das activate -Ereignis. Beide Ereignisse sind auch gut hier beschrieben. Beide Ereignisbehandlungen sind zun\u00e4chst einfache Ausgaben auf die Konsole. Zwei Sachen sind noch erw\u00e4hnenswert: erstens wird self verwendet, um auf den service worker zu referenzieren. F\u00fcr Erl\u00e4uterungen \u00fcber den Unterschied von this und self k\u00f6nnen Sie sich z.B. hier informieren. Grunds\u00e4tzlich ist es so, dass mit self auf den gesamten Scope referenziert wird. In Webanwendungen ist der Scope h\u00e4ufig window , hier ist es aber die Domain, die den Scope des service workers beschreibt. Wir referenzieren also nicht auf den service worker selbst, sondern auf seinen Scope. Die zweite erw\u00e4hnenswerte Sache steht in Zeile 7 . Wenn ein service worker registriert ist, dann \"kontrolliert\" er nicht automatisch alle Webseiten in seiner Domain. Erst durch das Neuladen dieser Seiten gelangen sie unter seine Kontrolle. Mithilfe der claim() -Funktion aus dem Interface Clients \u00fcbernimmt der service worker die Kontrolle aber sofort, d.h. ohne ein Neuladen der Site. Einzige Ausnahme ist die Seite, die aktuell im Browser gezeigt wird. F\u00fcr diese muss tats\u00e4chlich ein Reload durchgef\u00fchrt werden. Weitere Informationen dazu finden Sie auch hier . Wenn wir die Anwendung nun starten und dann im Browser aufrufen, erhalten wir folgende Ausgabe auf der Konsole: Wir sehen, dass das install -Ereignis ausgel\u00f6st wurde, aber offensichtlich nicht das activate -Ereignis. Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Darum k\u00fcmmern wir uns im folgenden Abschnitt. Noch eine kurze Bemerkung zur Reihenfolge der Ausgaben auf der Konsole. Auf der Konsole haben wir folgende Ausgaben: service worker registriert service worker --> installing ... Das verwundert wahrscheinlich, weil das install -Event ausgel\u00f6st wird, bevor der service worker (existiert und) registriert werden kann. Also m\u00fcssten die Ausgaben eigentlich in der anderen Reihenfolge erscheinen. Wir erinnern uns (siehe zweite Abbildung ganz oben in diesem Kapitel): der service worker l\u00e4uft auf einem anderen Thread, als das \"normale\" JavaScript unserer Webanwendung. Also laufen app.js und sw.js auf verschiedenen Threads. In welchem dieser beiden Threads nun zuerst eine Ausgabe erfolgt, h\u00e4ngt von vielen verschiedenen Faktoren ab, l\u00e4sst sich aber auch nicht beeinflussen. Dieses Mal war es so, dass der app.js -Thread schneller mit der Ausgabe war, als der sw.js -Thread. Das kann beim n\u00e4chsten Mal schon anders sein. Wichtig ist, dass wir wissen, dass diese beiden Threads g\u00e4nzlich nebenl\u00e4ufig und unabh\u00e4ngig voneinander laufen. Sollten sich dabei Ausgaben \"\u00fcberholen\", dann ist das kein Bug, sondern ein Feature.","title":"Service worker: Life-Cycle-Ereignisse behandeln"},{"location":"serviceworker/#service-worker-aktualisieren-und-aktivieren","text":"Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Dazu werfen wir einen Blick in unsere DevTools. Wir w\u00e4hlen den Reiter Application und dann im linken Men\u00fc unter Application den Men\u00fcpunkt Service Woorkers : Wir sehen, dass der service worker im Status des Aktivierens ist, aber noch darauf wartet, aktiviert zu sein ( waiting to activate ). Hierzu ist es wichtig zu wissen: solange Sie im Browser (mindestens) einen Tab mit Ihrer Webanwendung offen haben, wird ein neuer service worker zwar installiert und registriert, aber nicht aktiviert, das liegt daran, dass die offene Seite eventuell noch mit einem alten service worker kommuniziert (evtl. hat der alte service worker noch etwas im Cache, das mit der Webanwendung synchronisiert werden m\u00fcsste). Wenn wir den Tab mit unserer Anwendung schlie\u00dfen und ihn erneut \u00f6ffnen, dann sehen wir: Es wurden also sowohl das install - als auch das activate -Ereignis ausgel\u00f6st. Auf der Konsole erscheint entsprechend: Wenn Sie Ihren service worker aktualisiert haben, m\u00fcssen Sie alle Tabs Ihrer Webanwendung schlie\u00dfen und erneut \u00f6ffnen, um den neuen service worker zu aktivieren! Beherzigen Sie die obige Ausgabe. Es kann Ihnen sehr viel Implementierungskummer bereiten, wenn Sie es nicht tun. Sie ver\u00e4ndern Ihren Code im service worker, aber die \u00c4nderungen sind nicht wirksam? Dann haben Sie vielleicht nur ein Reload Ihrer Webanwendung durchgef\u00fchrt - das reicht aber f\u00fcr den aktualisierten service worker nicht ! Aber zum Gl\u00fcck bieten die DevTools Hilfe, so dass Sie w\u00e4hrend der Entwicklung doch nicht immer den Tab schlie\u00dfen und neu \u00f6ffnen m\u00fcssen. Betrachten wir nochmals die folgende Abbildung: Sie haben drei M\u00f6glichkeiten, den service zu aktivieren: Markieren Sie die Checkbox links neben Update on reload . Dann wird durch das Reload Ihrer Webanwendung der aktualisierte service worker aktiviert. Klicken Sie auf den Link Update oder Klicken Sie auf den Link skipWaiting . Mit einem der drei Hilfen oben vermeiden Sie das Schlie\u00dfen und Neu\u00f6ffnen des Tabs und der Webanwendung. Am einfachsten ist die erste Variante. Dann m\u00fcssen Sie nur noch Reloaden und ansonsten weiter gar nichts machen.","title":"Service worker aktualisieren und aktivieren"},{"location":"serviceworker/#arrow-notation-verwenden","text":"Wenn wir uns die Implementierung des service workers anschauen, dann sehen wir, dass wir etwas \"old school\" unterwegs sind, also so ca. 2017 ;-). Wir sollten anstelle der function() -Notation lieber die Arrow -Notation verwenden, um ein bisschen mehr up-to-date zu sein ;-). Zu Arrow-Notation siehe auch Hilfen\u2192Arrow-Notation . Unsere service worker Implementierung sieht dann so aus: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Die neuere Notation \u00e4ndert an der Funktionalit\u00e4t nat\u00fcrlich nichts.","title":"Arrow-Notation verwenden"},{"location":"serviceworker/#service-worker-andere-ereignisse-behandeln","text":"Bis jetzt haben wir nur Life-Cycle-Events behandelt. Jetzt schauen wir uns einmal das fetch -Ereignis an. Wir wissen bereits , dass das fetch -Ereignis immer dann ausgel\u00f6st wird, wenn etwas vom Webserver geladen wird, wenn also CSS-Dateien oder ein Bild oder JavaScript-Dateien geladen werden. Wir behandeln ein solches Ereignis wiederum mit einer einfachen Konsolen-Ausgabe: /public/src/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Falls wir in den DevTools unter Application \u2192 Application \u2192 Service Workers das H\u00e4kchen bei Update on Reload gesetzt hatten, m\u00fcssen wir tats\u00e4chlich nur ein Reload der Webanwendung durchf\u00fchren und wir sehen auf der Konsole, dass das fetch -Event selbst f\u00fcr unsere bis jetzt sehr kleine Anwendung recht h\u00e4ufig aufgerufen wird: Wenn Sie in die jeweiligen FetchEvent -Objekte hineinklicken, welche Ressourcen jeweils per GET vom Webserver geladen werden.","title":"Service worker: andere Ereignisse behandeln"},{"location":"serviceworker/#anwendung-mit-einem-android-gerat-verbinden","text":"Ich kann es leider (bis jetzt noch) nicht ausprobieren, aber hier ist beschrieben, wie Sie die Anwendung auf einem Android-Ger\u00e4t aufrufen k\u00f6nnen. Nun, da wir service worker verwenden, sollte es funktionieren. Das hier mag auch hilfreich sein.","title":"Anwendung mit einem Android-Ger\u00e4t verbinden"},{"location":"serviceworker/#anwendung-auf-ihrem-iphone-aufrufen","text":"Um die Anwendung auf Ihrem iPhone aufzurufen, m\u00fcssen Sie sich zun\u00e4chst nur anschauen, was im Terminal ausgegeben wird, nachdem Sie npm start aufgerufen haben: Starting up http-server, serving ./public Available on: http://127.0.0.1:8080 htpp://192.168.1.24:8080 Hit CTRL-C to stop the server Rufen Sie in Ihrem iPhone einen Browser auf (z.B. Safari oder Chrome) und geben dort di ezweite der beiden URLs ein (also htpp://192.168.1.24:8080 ). Die Anwendung wird ausgef\u00fchrt. iOS unterst\u00fctzt aber leider (noch) nicht, dass Sie ein Start-Icon daf\u00fcr auf den Startbildschirm ablegen.","title":"Anwendung auf Ihrem iPhone aufrufen"},{"location":"tools/","text":"Werkzeuge \u00b6 Chrome \u00b6 Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen. Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner. Android Studio \u00b6 Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)). https f\u00fcr localhost \u00b6 f\u00fcr Mac siehe hier https f\u00fcr Webserver \u00b6 siehe hier siehe hier Icons erzeugen und in die manifest.webmanifest eintragen \u00b6 Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.webmanifest vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier . WebApp-Manifest-Generator \u00b6 Bei der Erstellung Ihrer manifest.webmanifest k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier . Workbox \u00b6 Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von service workern bereitstellt. Interssante Links zu PWA \u00b6 PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Werkzeuge"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#chrome","text":"Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren.","title":"Chrome"},{"location":"tools/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen.","title":"Lighthouse"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner.","title":"Node.js"},{"location":"tools/#android-studio","text":"Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)).","title":"Android Studio"},{"location":"tools/#https-fur-localhost","text":"f\u00fcr Mac siehe hier","title":"https f\u00fcr localhost"},{"location":"tools/#https-fur-webserver","text":"siehe hier siehe hier","title":"https f\u00fcr Webserver"},{"location":"tools/#icons-erzeugen-und-in-die-manifestwebmanifest-eintragen","text":"Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.webmanifest vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier .","title":"Icons erzeugen und in die manifest.webmanifest eintragen"},{"location":"tools/#webapp-manifest-generator","text":"Bei der Erstellung Ihrer manifest.webmanifest k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier .","title":"WebApp-Manifest-Generator"},{"location":"tools/#workbox","text":"Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von service workern bereitstellt.","title":"Workbox"},{"location":"tools/#interssante-links-zu-pwa","text":"PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Interssante Links zu PWA"},{"location":"uebungen/","text":"\u00dcbungen \u00b6 \u00dcbung 1 (Grundger\u00fcst) \u00b6 \u00dcbung 1 In der ersten \u00dcbung geht es \"nur\" darum, das Grundger\u00fcst zu verstehen. Arbeiten Sie dazu diesen Abschnitt durch. Sie werden feststellen, dass sich die meisten Anweisungen (insb. im HTML -Code) auf Material Design Lite beziehen. Um zu erkennen, was einen Material Design Lite -Bezug hat (und somit nicht wirklich wichtig ist), \u00e4ndern Sie das Grundger\u00fcst so, dass Sie nicht Material Design Lite , sondern Bootstrap verwenden. Werfen Sie also Material Design Lite komplett raus und ersetzen es vollst\u00e4ndig durch Bootstrap. L\u00f6schen Sie die material.min.js aus dem public/js -Ordner. Starten Sie am besten damit, diese drei Zeilen aus den beiden index.html -Dateien zu l\u00f6schen: < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > F\u00fcgen Sie stattdessen den CSS-Link und das JS-Bundle aus https://getbootstrap.com/docs/4.6/getting-started/introduction/ ein. Sie k\u00f6nnen ja versuchen, dass es m\u00f6glichst \u00e4hnlich aussieht: \u00dcbung 2 (Web App Manifest) \u00b6 \u00dcbung 2 Erweitern Sie Ihre Anwendung (oder das Grundger\u00fcst) um ein Web App Manifest. Verwenden Sie zur Erstellung des Manifestes am besten den Web-App-Manifest-Generator . W\u00e4hlen Sie ein eigenes Icon. Beachten Sie, dass das Original-Icon die Ma\u00dfe 512x512 Pixel aufweisen muss. Der Web-App-Manifest-Generator f\u00fcgt das Original-Icon nicht dem Manifest hinzu. Lighthouse beschwert sich dar\u00fcber, dass dem Manifest ein 512x512-Icon fehlt. F\u00fcgen Sie dieses am besten noch h\u00e4ndisch hinzu. Die Anwendung soll in dem Moment installiert werden, wenn die Nutzerin das erste Mal auf den + -Button klickt. Das hei\u00dft, es wird das beforeinstallprompt -Ereignis ausgel\u00f6st und die Behandlung dieses Ereignisses sorgt daf\u00fcr, dass Sie die Anwendung genau dann installieren, wenn Sie das erste Mal den + -Button klicken: Hinweise und Hilfestellungen finden Sie z.B. hier oder im Skript (enth\u00e4lt weitere Links) oder im Video zum Manifest . \u00dcbung 3 (Promises und Fetch API) \u00b6 \u00dcbung 3 Laden Sie hier die Anwendung f\u00fcr \u00dcbung 3 herunter . Es handelt sich um eine zip-Datei. Entpacken Sie diese, \u00f6ffnen Sie sie in Ihrer IDE und folgen Sie der README.MD. In der \u00dcbung \u00fcben wir Promises und die Fetch API. \u00d6ffnen Sie die Datei public/src/js/app.js . Die \u00dcbung besteht aus 3 Teilen: Teil 1 : f\u00fchren Sie ein fetch() als GET nach https://httpbin.org/ip aus und geben Sie die zur\u00fcckgegebene IP in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 2 : f\u00fchren Sie ein fetch() als PUT nach https://httpbin.org/put aus. Das \u00fcbergebene JSON wird von dort einfach zur\u00fcckgespiegelt. Geben Sie einen oder mehrere Werte aus diesem JSON in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 3 : bauen Sie einen Fehler in die Anfrage (z.B. falsche Url) und behandeln Sie diesen Fehler mit einer Ausgabe auf die Konsole. Hinweise und Hilfestellungen finden Sie im Skript unter Promises und die Fetch-API . \u00dcbung 4 (Entwicklungs-Infrastruktur einrichten) \u00b6 \u00dcbung 4 Wir richten unsere Entwicklungs-Infrastruktur, die wir ben\u00f6tigen, um eine Frontend-Backend-Datenbank-App zu erstellen. Lokalen Webserver einrichten: Es sollte etwas Sinnvolles erscheinen, wenn Sie http://localhost/ in den Browser eingeben (also entweder wird eine eigene html- oder php-Datei ge\u00f6ffnet, oder es steht soetwas wie It works ). Wenn das nicht der Fall ist, dann ben\u00f6tigen Sie erst noch einen Webserver. Auf dem Mac und unter Linux existiert aber immer bereits einer, nur unter Windows muss dann z.B. XAMPP installiert werden. Sie m\u00fcssen wissen, aus welchem Ordner die Ressourcen geladen werden, wenn Sie http://localhost/ in den Browser eingeben. Diesen Ordner nennen wir DocumentRoot . Der Standard-DocumentRoot-Ordner auf dem Mac ist /Library/WebServer/Documents , - unter Linux /www/html/ , - unter Windows (XAMPP) /xampp/htdocs . Vor den angegebenen Pfaden kann in Linux und Windows noch etwas stehen, das h\u00e4ngt von der Konfiguration ab und wo Sie Ihr XAMPP unter Windows installiert haben. Wichtig ist, dass Sie gen\u00fcgend Schreibrechte auf den DocumentRoot-Ordner haben! Das ist typischerweise beim Mac unter /Library/WebServer/Documents nicht der Fall. Passen Sie auch auf, dass unter Windows Ihr xampp -Ordner nicht bereits zu tief in der Ordnerstruktur steckt. Gehen Sie entsprechende Anleitungen durch, um Ihr DocumentRoot zu \u00e4ndern. Mein DocumentRoot ist z.B. unter /Users/jornfreiheit/Sites . Hier einige Anleitungen: Windows , Windows , Windows , Mac . Erstellen Sie zum Testen in Ihrem DocumentRoot-Ordner eine index.html -Datei mit folgendem Inhalt: <html><body><h1>DocumentRoot korrekt eingerichtet!</h1></body></html> und rufen Sie dann im Browser http://localhost/ auf. Es sollte im Browser DocumentRoot korrekt eingerichtet! erscheinen. F\u00fcr phpMyAdmin ben\u00f6tigen Sie auch noch php . Erstellen Sie in Ihrem DocumentRoot-Ordner eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen Sie dann im Browser http://localhost/index.php auf. Es sollte etwas in dieser Art erscheinen: Wenn localhost funktioniert, dann gibt es mit PHP eigentlich nur (neuerdings - erst seit Big Sur) unter dem Mac Probleme. Nutzen Sie dann eine der folgenden Anleitungen: 1 , 2 , 3 . Datenbank einrichten: Sie m\u00fcssen nicht unbedingt ein lokales Datenbanksystem installieren, sondern k\u00f6nnen auch den Studi-Server https://studi.f4.htw-berlin.de verwenden. Wenn Sie sich lokal ein Datenbanksystem installieren, was man ruhig einmal gemacht haben sollte, dann ist es egal, ob Sie MariaDB (kommt mit XAMPP) oder MySQL installieren. Beide Systeme sind in der Anwendung v\u00f6llig gleich. Sie k\u00f6nnen auch Postgres verwenden, das habe ich aber nicht lokal und es kann sein, dass meine Anleitungen dann angepasst werden m\u00fcssten (vielleicht aber auch nicht). MariaDB wird mit XAMPP ausgeliefert - betrifft also haupts\u00e4chlich die Windows-Nutzerinnen XAMPP . F\u00fcr Mac ist die Installation von XAMPP nicht notwendig (und auch nicht empfehlenswert, da Sie ansonsten nur mehrere Webserver haben). F\u00fcr die Installation von MySQL unter Mac gibt es viele Videos, sollte aber auch so von hier aus gut funktionieren (eine weitere Anleitung z.B. hier ). phpmyadmin ist eine Weboberfl\u00e4che f\u00fcr die Verwaltung einer MySQl -Datenbank. Es ist sehr zu empfehlen, dass Sie sich phpmyadmin installieren, wenn Sie sich MySQL installiert haben. Installationanleitungen gibt es viele, z.B. f\u00fcr Mac , Linux und Windows . Im Prinzip m\u00fcssen Sie aber das phpmyadmin -Paket nur entpacken und in Ihren DocumentRoot-Ordner bewegen, dann k\u00f6nnen Sie phpmyadmin \u00fcber http://localhost/phpmyadmin aufrufen. Postman installieren: Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen HTTP-Anfragen m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver - PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server - PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen - DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js installieren: Node.js ist eine JavaScript-Laufzeitumgebung f\u00fcr einen Server. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Laden Sie sich hier Node.js herunter und installieren es. Paketmanager npm : Sie k\u00f6nnen testen, ob die Installation von node und npm erfolgreich war, indem Sie im Terminal (Windows-Nutzerinnen bitte als Terminal die GitBash verwenden) eingeben: Mit der Installation von node.js , installieren Sie auch den Paketmanager npm (siehe npmjs ). node --version Sollte etwas, wie v14.15.0 ausgeben und npm --version sollte etwas, wie 7.13.0 ausgeben. Angular-Command-Line-Interface (CLI) installieren: Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Ich hoffe, es klappt alles! Eventuelle Probleme k\u00f6nnen wir in der Vorlesung am 26.5. und/oder in der \u00dcbung am 27.5. besprechen. \u00dcbung 5 (Backend) \u00b6 \u00dcbung 5 Erg\u00e4nzen Sie das in [Backend] erstellte Backend um einen REST-Endpunkt GET http://localhost:3000/posts/title Bei Aufruf dieses Endpunktes soll dem Request-Body ein JSON in der Form { \"title\" : \"first post\" } mitgesendet werden. Der Wert von title in diesem JSON wird verwendet, um den Datensatz/die Datens\u00e4tze auszulesen, die den title haben (also hier der Datensatz mit dem title \"first post\" ). eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 5 In der server.js f\u00fcgen wir einen weiteren Endpunkt hinzu und rufen f\u00fcr diesen request eine Funktion readOneByTitle im PostController auf: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import express from 'express' ; import cors from 'cors' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . use ( cors ()); app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts/title\" , PostController . readOneByTitle ); // R (one) app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Achten Sie dabei darauf, dass Sie den neuen Endpunkt vor den Endpunkt get(\"/posts\" positionieren. In der posts.controller.js definieren wir die readOneByTitle() -Funktion. Da wir den title in einem JSON im body des Requests \u00fcbergeben, lesen wir den body des Requests aus und darin die Eigenschaft title . Wir speichern uns diesen Wert in einer Variable ( title ) und \u00fcbergeben ihn dem Aufruf einer findTitle() -Funktion aus dem PostService : posts.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 readOneByTitle : ( req , res ) => { console . log ( req . body ); const title = req . body . title ; console . log ( 'title:' , title ); PostService . findByTitle ( title , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting one post\" , }); else res . json ( result ); }); }, Die Konsolenausgaben k\u00f6nnen nat\u00fcrlich entfallen. In dem PostService ( db.sqlqueries.js ) wird die Funktion findByTitle() implementiert, indem die passende DB-Anfrage gestellt wird: db.sqlqueries.js 1 2 3 4 5 6 7 8 9 10 findByTitle : async ( title , result ) => { sql . query ( `SELECT * FROM posts WHERE title = ?` , [ title ], ( err , res ) => { if ( err ) result ( err , null ); else if ( res . length ) result ( null , res ); else result ({ message : \"post not found\" }, null ); } ); }, Das war's schon. Ich hoffe, es hat bei Ihnen geklappt! \u00dcbung 6 (Frontend) \u00b6 \u00dcbung 6 Im Abschnitt Frontend haben wir uns ein Frontend erstellt, um mithilfe eines Formulars Daten (insb. ein Bild) einzugeben und diese in einer Datenbank abzuspeichern. Erweiteren Sie dieses Frontend um eine Komponente, die alle in der Datenbank gespeicherten Daten visualisiert, insb. die in der Datenbank gespeicherten Bilder. Erstellen Sie sich dazu eine neue Komponente. Sie m\u00fcssen dazu auch den PostService um die Anbindung an den Endpunkt GET /posts erweitern. Tipps : Es kann sein, dass Sie das vom Backend zur\u00fcckgegebene JSON ver\u00e4ndern m\u00fcssen. Derzeit wird f\u00fcr image ein ArrayBuffer zur\u00fcckgegeben, mit \"type\": \"Buffer\" und einem Array f\u00fcr \"data\" . Wenn Sie dieses Array Frontend-seitig verarbeiten k\u00f6nnen und als ein Bild angezeigt bekommen, dann w\u00fcrde mich sehr interessieren, wie Sie das gemacht haben. Ich habe das Backend angepasst und gebe den Base64 -Code f\u00fcr image zur\u00fcck. Im Frontend muss man diesen base64 -Code dann nur noch hinter den String 'data:image/jpg;base64,' h\u00e4ngen und erh\u00e4lt so den Wert f\u00fcr das src -Attribut eines Images. Schauen Sie sich dazu auch den Typ SafeResourceUrl und die Funktion bypassSecurityTrustResourceUrl(src) von DomSanitizer an. eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 6 In dem Backend f\u00fchren Sie zun\u00e4chst folgende \u00c4nderung durch: Im post.controller.js \u00e4ndern wir die readAll() -Methode wie folgt: post.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { PostService } from './db.sqlqueries.js' ; export const PostController = { readAll : ( req , res ) => { PostService . getAll (( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting all posts\" , }); else { console . log ( result ); let arr = []; result . forEach ( post => { let buff = new Buffer ( post . image , 'base64' ); let text = buff . toString ( 'ascii' ); //console.log(text); post . image = text ; arr . push ( post ); }); res . json ( arr ); } }); }, // hier noch die anderen Funktionen } Davor hatten wir return res.json(result) . Jetzt geben wir ebenfalls ein Array von unseren Posts zur\u00fcck, allerdings ist post.image darin nicht mehr ein ArrayBuffer , sondern ein String mit dem base64 -Code. Starten Sie das Backend ( npm run watch )! Wechseln Sie im Terminal in den frontend -Ordner (der Angular-Projekt-Ordner Ihres Frontends) und geben Sie darin ng generate component read ein. Damit wird die ReadComponent erzeugt. In Ihrem Projektordner wird unter /src/app ein ordner read erzeugt, der 4 Dateien read.component.* enth\u00e4lt. \u00d6ffnen Sie in Ihrer IDE die app-routing.module.ts und f\u00fcgen Sie dort die neue Route /read hinzu, unter der die ReadComponent aufgerufen wird: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { NgModule } from '@angular/core' ; import { RouterModule , Routes } from '@angular/router' ; import { CreateComponent } from './create/create.component' ; import { ReadComponent } from \"./read/read.component\" ; const routes : Routes = [ { path : 'create' , component : CreateComponent }, { path : 'read' , component : ReadComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Nun erscheint die ReadComponent unter der Route http://localhost:4200/read . \u00d6ffnen Sie die nav.component.html und f\u00fcgen Sie dort den neuen Men\u00fcpunkt Read hinzu. Unter diesem Men\u00fcpunkt wird mithilfe von routerLink die Route http://localhost:4200/read aufgerufen. nav.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item routerLink = \"/create\" routerLinkActivate = \"active\" > Create </ a > < a mat-list-item routerLink = \"/read\" routerLinkActivate = \"active\" > Read </ a > < a mat-list-item href = \"#\" > Link 3 </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > PWA Frontend </ span > </ mat-toolbar > <!-- Add Content Here --> < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > \u00d6ffnen Sie die Datei backend.service.ts . Diesem Service wird nun eine weitere Funktion hinzugef\u00fcgt, n\u00e4mlich readAll . Diese Funktion greift, wie bereits die Funktion addPost() auf das Backend zu, nur dass die readAll() -Funktion eine GET -Anfrage an http://localhost:4200/posts stellt. Die R\u00fcckgabe ist ebenfalls ein Promise , dieses Mal aber typisiert mit Post[] , da das Backend alle Posts in einem (JSON-)Array zur\u00fccksendet. backend.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import { HttpClient , HttpHeaders } from '@angular/common/http' ; import { Injectable } from '@angular/core' ; export interface Post { id : number ; title : string ; location : string ; image : string ; } @ Injectable ({ providedIn : 'root' }) export class BackendService { apiURL = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } // POST http://localhost:4200/posts public addPost ( post : Post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiURL } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' }), }) . toPromise (); } // GET http://localhost:4200/posts public readAll () : Promise < Post [] > { return this . http . get < Post [] > ( ` ${ this . apiURL } ` , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' }), }) . toPromise (); } } In der read.component.ts k\u00f6nnen wir nun diese Funktion des BackendService einmal ausprobieren. Wir binden dazu (wie bereits bei der CreateComponent ) den BackendService mittels dependency injection im Konstruktor ein, rufen die readAll -Funktion auf und geben das Ergebnis auf die Konsole aus. read.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import { Component , OnInit } from '@angular/core' ; import { BackendService , Post } from \"../backend.service\" ; @ Component ({ selector : 'app-read' , templateUrl : './read.component.html' , styleUrls : [ './read.component.css' ] }) export class ReadComponent implements OnInit { allPosts !: Post []; constructor ( private bs : BackendService ) { } ngOnInit () : void { this . bs . readAll () . then ( posts => { this . allPosts = posts ; console . log ( posts ); }) . catch ( err => { console . log ( err ); }) } } Au\u00dferdem speichern wir alle posts in einer Objektvariablen allPosts , die vom Typ Post[] ist. Wenn wir nun im Men\u00fcpunkt Read ausw\u00e4hlen, erscheint in den DeveloperTools in der Konsole die Ausgabe des Arrays aller Posts aus der Datenbank. In der read.component.html k\u00f6nnen wir uns nun \u00fcberlegen, wie wir die einzelnen posts darstellen wollen. Hier ist ein Beispiel f\u00fcr die Verwendung einer Card aus Angular Material Design : read.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < div class = \"container\" novalidate > < div * ngFor = \"let post of allPosts\" > < mat-card class = \"polaroid\" > < mat-card-header > < mat-card-title > {{post.title}} </ mat-card-title > </ mat-card-header > < img mat-card-image [ src ]= imageSrc ( post . image ) alt = \"Foto\" > < mat-card-content > < p > {{post.location}} </ p > </ mat-card-content > </ mat-card > </ div > </ div > F\u00fcr jeden Eintrag post aus dem allPosts -Array wird eine Card erstellt. Die wird mithilfe der Strukturdirektive *ngFor erzeugt (siehe z.B. hier ). Es erscheinen jetzt noch zwei Fehler: 1. die Funktion imageSrc() ist noch nicht bekannt und 2. das MatCardModule wurde noch nicht in unser Projekt importiert. Letzteres machen wir zuerst: \u00d6ffnen Sie app.module.ts und importieren Sie das MatCardModule : app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import { NgModule } from '@angular/core' ; import { BrowserModule } from '@angular/platform-browser' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { MatInputModule } from '@angular/material/input' ; import { HttpClientModule } from '@angular/common/http' ; import { ReadComponent } from './read/read.component' ; import { MatCardModule } from \"@angular/material/card\" ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent , ReadComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , MatFormFieldModule , MatInputModule , MatCardModule , FormsModule , ReactiveFormsModule , HttpClientModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } In der read.component.ts f\u00fcgen wir nun die imageSource() -Funktion hinzu. Diese ist im Prinzip von hier und hier . read.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { Component , OnInit } from '@angular/core' ; import { BackendService , Post } from \"../backend.service\" ; import { DomSanitizer , SafeResourceUrl } from \"@angular/platform-browser\" ; @ Component ({ selector : 'app-read' , templateUrl : './read.component.html' , styleUrls : [ './read.component.css' ] }) export class ReadComponent implements OnInit { allPosts !: Post []; constructor ( private bs : BackendService , private sanitizer : DomSanitizer ) { } ngOnInit () : void { this . bs . readAll () . then ( posts => { this . allPosts = posts ; }) . catch ( err => { console . log ( err ); }) } imageSrc ( base64code : string ) : SafeResourceUrl { const src = 'data:image/png;base64,' + base64code ; return this . sanitizer . bypassSecurityTrustResourceUrl ( src ); } } Jetzt werden die Card vollst\u00e4ndig angezeigt. Wenn Sie m\u00f6chten, k\u00f6nnen Sie ja das Layout noch etwas in der read.component.css anpassen: read.component.css 1 2 3 4 5 6 . polaroid { width : 250 px ; box-shadow : 0 4 px 8 px 0 rgba ( 0 , 0 , 0 , 0.2 ), 0 6 px 20 px 0 rgba ( 0 , 0 , 0 , 0.19 ); text-align : center ; margin : 20 px ; } Ich hoffe, es klappt alles. Viel Spa\u00df! \u00dcbung 7 (IndexedDB) \u00b6 \u00dcbung 7 Im Abschnitt IndexedDB haben wir uns mit der Verwendung der In-Browser-datenbank IndexedDB vertraut gemacht. In dem dortigen letzten Abschnitt L\u00f6schen einzelner EIntr\u00e4ge haben wir in der db.js eine Funktion deleteOneData(st, id) geschrieben, die einen einzelnen Datensatz aus der IndexedDB mit der \u00fcbergebenen id l\u00f6scht. Implementieren Sie in der db.js eine Funktion deleteByTitle(st, title) , die den Datensatz (oder die Datens\u00e4tze) l\u00f6scht, der (oder die) in dem title -Attribut den der Methode als title \u00fcbergebenen String enth\u00e4lt. Z.B. soll aus dem Datensatz { id: 1 , title: \"first post\" , location: \"Berlin\" , image: \"/9j/4AA...UgP/9k=\" } { id: 2 , title: \"second post\" , location: \"Wilhelminenhof\" , image: \"/9j/4AA...VY/9k=\" } { id: 5 , title: \"fourth post\" , location: \"Gebaeude C\" , image: \"/9j/4AA...KOX/9k=\" } { id: 10 , title: \"HTW aus der Luft\" , location: \"Campus WH von oben\" , image: \"/9j/4AA...9z//2Q==\" } { id: 11 , title: \"Wilhelminenhofstra\u00dfe\" , location: \"Campus WH Eingang\" , image: \"/9j/4AA...U9D/9k=\" } bei Aufruf von deleteByTitle('posts', 'second') der zweite Datensatz mit der id: 2 gel\u00f6scht werden, bei Aufruf von deleteByTitle('posts', 'post') sollen die ersten drei Datens\u00e4tze (mit id:1 , id:2 und id:5 ) gel\u00f6scht werden. Tipps : Mit der Methode getAllKeys() ermitteln Sie z.B. alle Schl\u00fcssel ( id ) der Datens\u00e4tze und mit der Methode get(key) erhalten Sie den zum Schl\u00fcssel zugeh\u00f6rigen Wert. eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 7 Die Idee ist, dass wir die Datens\u00e4tze suchen, deren Titel das gesuchte Wort enth\u00e4lt und den key von diesen Datens\u00e4tzen verwenden, um die deleteOneData(store, id) aufzurufen. In der db.js f\u00fcgen wir also die neue Funktion deleteByTitle(store, title) hinzu, wobei title das Wort enth\u00e4lt, nachdem wir im title der Datens\u00e4tze suchen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function deleteByTitle ( st , title ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); let myIndex = store . index ( 'id' ); myIndex . getAllKeys () . then ( allKeys => { for ( let key of allKeys ) { myIndex . get ( key ) . then ( value => { console . log ( 'delete title' , value . title ); if ( value . title . includes ( title )) { console . log ( 'treffer ' , value . title ); console . log ( ' id ' , value . id ); console . log ( ' key' , key ); deleteOneData ( st , key ); } } ) } }) }) } In Zeile 7 rufen wir die Funktion getAllKeys() auf. Diese Funktion gibt ein Promise zur\u00fcck. In diesem Promise k\u00f6nnen wir nun durch dieses Array aller Schl\u00fcssel durchlaufen. In Zeile 10 lassen wir uns den Wert f\u00fcr den jeweiligen Schl\u00fcssel zur\u00fcckgeben (in einer Promise). In diesem Wert greifen wir auf die Eigenschaft title zu. In Zeile 14 \u00fcberpr\u00fcfen wir, ob das \u00fcbergebene Wort in dem Titel enthalten ist. Wenn ja, dann l\u00f6schen wir diesen Datensatz mithilfe von deleteOneData(st, key) , wobei wir den key als die id \u00fcbergeben, die diese Funktion erwartet. Ausprobieren k\u00f6nnte man die neue Funktion in dem Service Worker nach dem Schreiben aller Daten in die IndexedDB (ich schicke mal den kompletten Stand der sw.js mit, weil das in der \u00dcbung gew\u00fcnscht wurde): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 importScripts ( '/src/js/idb.js' ); importScripts ( '/src/js/db.js' ); const VERSION = '10' ; const CURRENT_STATIC_CACHE = 'static-v' + VERSION ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v' + VERSION ; const STATIC_FILES = [ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ( STATIC_FILES ); }) ); }); self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) function isInArray ( string , array ) { for ( let value of array ) { if ( value === string ) { return true ; } } return false ; } self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then (() => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); // if (data[key].id === 5) deleteOneData('posts', 5); } deleteByTitle ( 'posts' , 'post' ); }); return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ) } }) self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : data . title , location : data . location , image : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) keine weiteren \u00dcbungen \u00b6 Implementieren Sie lieber schon an der Semesteraufgabe. Die \u00dcbungszeit am Donnerstag um 12:15 Uhr bleibt aber bestehen. Dort k\u00f6nnen wir dann eventuell auftretende Probleme diskutieren. Ich w\u00fcrde mit der Erstellung der Datenbank und des Backends beginnen. Meine Empfehlung ist, mit der Entwicklung des Frontends erst dann zu beginnen, wenn das Backend (und somit auch die Datenbank) steht. Sollten Sie f\u00fcr das Frontend Angular verwenden wollen, gibt es noch ein kleines Starter-Tutorial hier .","title":"\u00dcbungen"},{"location":"uebungen/#ubungen","text":"","title":"\u00dcbungen"},{"location":"uebungen/#ubung-1-grundgerust","text":"\u00dcbung 1 In der ersten \u00dcbung geht es \"nur\" darum, das Grundger\u00fcst zu verstehen. Arbeiten Sie dazu diesen Abschnitt durch. Sie werden feststellen, dass sich die meisten Anweisungen (insb. im HTML -Code) auf Material Design Lite beziehen. Um zu erkennen, was einen Material Design Lite -Bezug hat (und somit nicht wirklich wichtig ist), \u00e4ndern Sie das Grundger\u00fcst so, dass Sie nicht Material Design Lite , sondern Bootstrap verwenden. Werfen Sie also Material Design Lite komplett raus und ersetzen es vollst\u00e4ndig durch Bootstrap. L\u00f6schen Sie die material.min.js aus dem public/js -Ordner. Starten Sie am besten damit, diese drei Zeilen aus den beiden index.html -Dateien zu l\u00f6schen: < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > F\u00fcgen Sie stattdessen den CSS-Link und das JS-Bundle aus https://getbootstrap.com/docs/4.6/getting-started/introduction/ ein. Sie k\u00f6nnen ja versuchen, dass es m\u00f6glichst \u00e4hnlich aussieht:","title":"\u00dcbung 1 (Grundger\u00fcst)"},{"location":"uebungen/#ubung-2-web-app-manifest","text":"\u00dcbung 2 Erweitern Sie Ihre Anwendung (oder das Grundger\u00fcst) um ein Web App Manifest. Verwenden Sie zur Erstellung des Manifestes am besten den Web-App-Manifest-Generator . W\u00e4hlen Sie ein eigenes Icon. Beachten Sie, dass das Original-Icon die Ma\u00dfe 512x512 Pixel aufweisen muss. Der Web-App-Manifest-Generator f\u00fcgt das Original-Icon nicht dem Manifest hinzu. Lighthouse beschwert sich dar\u00fcber, dass dem Manifest ein 512x512-Icon fehlt. F\u00fcgen Sie dieses am besten noch h\u00e4ndisch hinzu. Die Anwendung soll in dem Moment installiert werden, wenn die Nutzerin das erste Mal auf den + -Button klickt. Das hei\u00dft, es wird das beforeinstallprompt -Ereignis ausgel\u00f6st und die Behandlung dieses Ereignisses sorgt daf\u00fcr, dass Sie die Anwendung genau dann installieren, wenn Sie das erste Mal den + -Button klicken: Hinweise und Hilfestellungen finden Sie z.B. hier oder im Skript (enth\u00e4lt weitere Links) oder im Video zum Manifest .","title":"\u00dcbung 2 (Web App Manifest)"},{"location":"uebungen/#ubung-3-promises-und-fetch-api","text":"\u00dcbung 3 Laden Sie hier die Anwendung f\u00fcr \u00dcbung 3 herunter . Es handelt sich um eine zip-Datei. Entpacken Sie diese, \u00f6ffnen Sie sie in Ihrer IDE und folgen Sie der README.MD. In der \u00dcbung \u00fcben wir Promises und die Fetch API. \u00d6ffnen Sie die Datei public/src/js/app.js . Die \u00dcbung besteht aus 3 Teilen: Teil 1 : f\u00fchren Sie ein fetch() als GET nach https://httpbin.org/ip aus und geben Sie die zur\u00fcckgegebene IP in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 2 : f\u00fchren Sie ein fetch() als PUT nach https://httpbin.org/put aus. Das \u00fcbergebene JSON wird von dort einfach zur\u00fcckgespiegelt. Geben Sie einen oder mehrere Werte aus diesem JSON in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 3 : bauen Sie einen Fehler in die Anfrage (z.B. falsche Url) und behandeln Sie diesen Fehler mit einer Ausgabe auf die Konsole. Hinweise und Hilfestellungen finden Sie im Skript unter Promises und die Fetch-API .","title":"\u00dcbung 3 (Promises und Fetch API)"},{"location":"uebungen/#ubung-4-entwicklungs-infrastruktur-einrichten","text":"\u00dcbung 4 Wir richten unsere Entwicklungs-Infrastruktur, die wir ben\u00f6tigen, um eine Frontend-Backend-Datenbank-App zu erstellen. Lokalen Webserver einrichten: Es sollte etwas Sinnvolles erscheinen, wenn Sie http://localhost/ in den Browser eingeben (also entweder wird eine eigene html- oder php-Datei ge\u00f6ffnet, oder es steht soetwas wie It works ). Wenn das nicht der Fall ist, dann ben\u00f6tigen Sie erst noch einen Webserver. Auf dem Mac und unter Linux existiert aber immer bereits einer, nur unter Windows muss dann z.B. XAMPP installiert werden. Sie m\u00fcssen wissen, aus welchem Ordner die Ressourcen geladen werden, wenn Sie http://localhost/ in den Browser eingeben. Diesen Ordner nennen wir DocumentRoot . Der Standard-DocumentRoot-Ordner auf dem Mac ist /Library/WebServer/Documents , - unter Linux /www/html/ , - unter Windows (XAMPP) /xampp/htdocs . Vor den angegebenen Pfaden kann in Linux und Windows noch etwas stehen, das h\u00e4ngt von der Konfiguration ab und wo Sie Ihr XAMPP unter Windows installiert haben. Wichtig ist, dass Sie gen\u00fcgend Schreibrechte auf den DocumentRoot-Ordner haben! Das ist typischerweise beim Mac unter /Library/WebServer/Documents nicht der Fall. Passen Sie auch auf, dass unter Windows Ihr xampp -Ordner nicht bereits zu tief in der Ordnerstruktur steckt. Gehen Sie entsprechende Anleitungen durch, um Ihr DocumentRoot zu \u00e4ndern. Mein DocumentRoot ist z.B. unter /Users/jornfreiheit/Sites . Hier einige Anleitungen: Windows , Windows , Windows , Mac . Erstellen Sie zum Testen in Ihrem DocumentRoot-Ordner eine index.html -Datei mit folgendem Inhalt: <html><body><h1>DocumentRoot korrekt eingerichtet!</h1></body></html> und rufen Sie dann im Browser http://localhost/ auf. Es sollte im Browser DocumentRoot korrekt eingerichtet! erscheinen. F\u00fcr phpMyAdmin ben\u00f6tigen Sie auch noch php . Erstellen Sie in Ihrem DocumentRoot-Ordner eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen Sie dann im Browser http://localhost/index.php auf. Es sollte etwas in dieser Art erscheinen: Wenn localhost funktioniert, dann gibt es mit PHP eigentlich nur (neuerdings - erst seit Big Sur) unter dem Mac Probleme. Nutzen Sie dann eine der folgenden Anleitungen: 1 , 2 , 3 . Datenbank einrichten: Sie m\u00fcssen nicht unbedingt ein lokales Datenbanksystem installieren, sondern k\u00f6nnen auch den Studi-Server https://studi.f4.htw-berlin.de verwenden. Wenn Sie sich lokal ein Datenbanksystem installieren, was man ruhig einmal gemacht haben sollte, dann ist es egal, ob Sie MariaDB (kommt mit XAMPP) oder MySQL installieren. Beide Systeme sind in der Anwendung v\u00f6llig gleich. Sie k\u00f6nnen auch Postgres verwenden, das habe ich aber nicht lokal und es kann sein, dass meine Anleitungen dann angepasst werden m\u00fcssten (vielleicht aber auch nicht). MariaDB wird mit XAMPP ausgeliefert - betrifft also haupts\u00e4chlich die Windows-Nutzerinnen XAMPP . F\u00fcr Mac ist die Installation von XAMPP nicht notwendig (und auch nicht empfehlenswert, da Sie ansonsten nur mehrere Webserver haben). F\u00fcr die Installation von MySQL unter Mac gibt es viele Videos, sollte aber auch so von hier aus gut funktionieren (eine weitere Anleitung z.B. hier ). phpmyadmin ist eine Weboberfl\u00e4che f\u00fcr die Verwaltung einer MySQl -Datenbank. Es ist sehr zu empfehlen, dass Sie sich phpmyadmin installieren, wenn Sie sich MySQL installiert haben. Installationanleitungen gibt es viele, z.B. f\u00fcr Mac , Linux und Windows . Im Prinzip m\u00fcssen Sie aber das phpmyadmin -Paket nur entpacken und in Ihren DocumentRoot-Ordner bewegen, dann k\u00f6nnen Sie phpmyadmin \u00fcber http://localhost/phpmyadmin aufrufen. Postman installieren: Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen HTTP-Anfragen m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver - PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server - PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen - DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js installieren: Node.js ist eine JavaScript-Laufzeitumgebung f\u00fcr einen Server. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Laden Sie sich hier Node.js herunter und installieren es. Paketmanager npm : Sie k\u00f6nnen testen, ob die Installation von node und npm erfolgreich war, indem Sie im Terminal (Windows-Nutzerinnen bitte als Terminal die GitBash verwenden) eingeben: Mit der Installation von node.js , installieren Sie auch den Paketmanager npm (siehe npmjs ). node --version Sollte etwas, wie v14.15.0 ausgeben und npm --version sollte etwas, wie 7.13.0 ausgeben. Angular-Command-Line-Interface (CLI) installieren: Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Ich hoffe, es klappt alles! Eventuelle Probleme k\u00f6nnen wir in der Vorlesung am 26.5. und/oder in der \u00dcbung am 27.5. besprechen.","title":"\u00dcbung 4 (Entwicklungs-Infrastruktur einrichten)"},{"location":"uebungen/#ubung-5-backend","text":"\u00dcbung 5 Erg\u00e4nzen Sie das in [Backend] erstellte Backend um einen REST-Endpunkt GET http://localhost:3000/posts/title Bei Aufruf dieses Endpunktes soll dem Request-Body ein JSON in der Form { \"title\" : \"first post\" } mitgesendet werden. Der Wert von title in diesem JSON wird verwendet, um den Datensatz/die Datens\u00e4tze auszulesen, die den title haben (also hier der Datensatz mit dem title \"first post\" ). eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 5 In der server.js f\u00fcgen wir einen weiteren Endpunkt hinzu und rufen f\u00fcr diesen request eine Funktion readOneByTitle im PostController auf: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import express from 'express' ; import cors from 'cors' ; import { PostController } from './posts.controller.js' ; const app = express (); const PORT = 3000 ; app . use ( cors ()); app . use ( express . urlencoded ({ limit : '20mb' , extended : true })); app . use ( express . json ({ limit : '20mb' })); app . get ( '/' , ( request , response ) => { response . send ( 'HELLO FIW!' ); }); // Endpunkte definieren app . post ( \"/posts\" , PostController . create ); // C app . get ( \"/posts/title\" , PostController . readOneByTitle ); // R (one) app . get ( \"/posts\" , PostController . readAll ); // R (all) app . get ( \"/posts/:postId\" , PostController . readOne ); // R (one) app . put ( \"/posts/:postId\" , PostController . update ); // U app . delete ( \"/posts/:postId\" , PostController . delete ); // D app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ...` ); } }); Achten Sie dabei darauf, dass Sie den neuen Endpunkt vor den Endpunkt get(\"/posts\" positionieren. In der posts.controller.js definieren wir die readOneByTitle() -Funktion. Da wir den title in einem JSON im body des Requests \u00fcbergeben, lesen wir den body des Requests aus und darin die Eigenschaft title . Wir speichern uns diesen Wert in einer Variable ( title ) und \u00fcbergeben ihn dem Aufruf einer findTitle() -Funktion aus dem PostService : posts.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 readOneByTitle : ( req , res ) => { console . log ( req . body ); const title = req . body . title ; console . log ( 'title:' , title ); PostService . findByTitle ( title , ( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting one post\" , }); else res . json ( result ); }); }, Die Konsolenausgaben k\u00f6nnen nat\u00fcrlich entfallen. In dem PostService ( db.sqlqueries.js ) wird die Funktion findByTitle() implementiert, indem die passende DB-Anfrage gestellt wird: db.sqlqueries.js 1 2 3 4 5 6 7 8 9 10 findByTitle : async ( title , result ) => { sql . query ( `SELECT * FROM posts WHERE title = ?` , [ title ], ( err , res ) => { if ( err ) result ( err , null ); else if ( res . length ) result ( null , res ); else result ({ message : \"post not found\" }, null ); } ); }, Das war's schon. Ich hoffe, es hat bei Ihnen geklappt!","title":"\u00dcbung 5 (Backend)"},{"location":"uebungen/#ubung-6-frontend","text":"\u00dcbung 6 Im Abschnitt Frontend haben wir uns ein Frontend erstellt, um mithilfe eines Formulars Daten (insb. ein Bild) einzugeben und diese in einer Datenbank abzuspeichern. Erweiteren Sie dieses Frontend um eine Komponente, die alle in der Datenbank gespeicherten Daten visualisiert, insb. die in der Datenbank gespeicherten Bilder. Erstellen Sie sich dazu eine neue Komponente. Sie m\u00fcssen dazu auch den PostService um die Anbindung an den Endpunkt GET /posts erweitern. Tipps : Es kann sein, dass Sie das vom Backend zur\u00fcckgegebene JSON ver\u00e4ndern m\u00fcssen. Derzeit wird f\u00fcr image ein ArrayBuffer zur\u00fcckgegeben, mit \"type\": \"Buffer\" und einem Array f\u00fcr \"data\" . Wenn Sie dieses Array Frontend-seitig verarbeiten k\u00f6nnen und als ein Bild angezeigt bekommen, dann w\u00fcrde mich sehr interessieren, wie Sie das gemacht haben. Ich habe das Backend angepasst und gebe den Base64 -Code f\u00fcr image zur\u00fcck. Im Frontend muss man diesen base64 -Code dann nur noch hinter den String 'data:image/jpg;base64,' h\u00e4ngen und erh\u00e4lt so den Wert f\u00fcr das src -Attribut eines Images. Schauen Sie sich dazu auch den Typ SafeResourceUrl und die Funktion bypassSecurityTrustResourceUrl(src) von DomSanitizer an. eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 6 In dem Backend f\u00fchren Sie zun\u00e4chst folgende \u00c4nderung durch: Im post.controller.js \u00e4ndern wir die readAll() -Methode wie folgt: post.controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { PostService } from './db.sqlqueries.js' ; export const PostController = { readAll : ( req , res ) => { PostService . getAll (( err , result ) => { if ( err ) res . status ( 500 ). send ({ message : err . message || \"Some error occurred while getting all posts\" , }); else { console . log ( result ); let arr = []; result . forEach ( post => { let buff = new Buffer ( post . image , 'base64' ); let text = buff . toString ( 'ascii' ); //console.log(text); post . image = text ; arr . push ( post ); }); res . json ( arr ); } }); }, // hier noch die anderen Funktionen } Davor hatten wir return res.json(result) . Jetzt geben wir ebenfalls ein Array von unseren Posts zur\u00fcck, allerdings ist post.image darin nicht mehr ein ArrayBuffer , sondern ein String mit dem base64 -Code. Starten Sie das Backend ( npm run watch )! Wechseln Sie im Terminal in den frontend -Ordner (der Angular-Projekt-Ordner Ihres Frontends) und geben Sie darin ng generate component read ein. Damit wird die ReadComponent erzeugt. In Ihrem Projektordner wird unter /src/app ein ordner read erzeugt, der 4 Dateien read.component.* enth\u00e4lt. \u00d6ffnen Sie in Ihrer IDE die app-routing.module.ts und f\u00fcgen Sie dort die neue Route /read hinzu, unter der die ReadComponent aufgerufen wird: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { NgModule } from '@angular/core' ; import { RouterModule , Routes } from '@angular/router' ; import { CreateComponent } from './create/create.component' ; import { ReadComponent } from \"./read/read.component\" ; const routes : Routes = [ { path : 'create' , component : CreateComponent }, { path : 'read' , component : ReadComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Nun erscheint die ReadComponent unter der Route http://localhost:4200/read . \u00d6ffnen Sie die nav.component.html und f\u00fcgen Sie dort den neuen Men\u00fcpunkt Read hinzu. Unter diesem Men\u00fcpunkt wird mithilfe von routerLink die Route http://localhost:4200/read aufgerufen. nav.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < mat-sidenav-container class = \"sidenav-container\" > < mat-sidenav # drawer class = \"sidenav\" fixedInViewport [ attr . role ]=\"( isHandset $ | async ) ? ' dialog ' : ' navigation '\" [ mode ]=\"( isHandset $ | async ) ? ' over ' : ' side '\" [ opened ]=\"( isHandset $ | async ) === false \" > < mat-toolbar > Menu </ mat-toolbar > < mat-nav-list > < a mat-list-item routerLink = \"/create\" routerLinkActivate = \"active\" > Create </ a > < a mat-list-item routerLink = \"/read\" routerLinkActivate = \"active\" > Read </ a > < a mat-list-item href = \"#\" > Link 3 </ a > </ mat-nav-list > </ mat-sidenav > < mat-sidenav-content > < mat-toolbar color = \"primary\" > < button type = \"button\" aria-label = \"Toggle sidenav\" mat-icon-button ( click )=\" drawer . toggle ()\" * ngIf = \"isHandset$ | async\" > < mat-icon aria-label = \"Side nav toggle icon\" > menu </ mat-icon > </ button > < span > PWA Frontend </ span > </ mat-toolbar > <!-- Add Content Here --> < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ mat-sidenav-content > </ mat-sidenav-container > \u00d6ffnen Sie die Datei backend.service.ts . Diesem Service wird nun eine weitere Funktion hinzugef\u00fcgt, n\u00e4mlich readAll . Diese Funktion greift, wie bereits die Funktion addPost() auf das Backend zu, nur dass die readAll() -Funktion eine GET -Anfrage an http://localhost:4200/posts stellt. Die R\u00fcckgabe ist ebenfalls ein Promise , dieses Mal aber typisiert mit Post[] , da das Backend alle Posts in einem (JSON-)Array zur\u00fccksendet. backend.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import { HttpClient , HttpHeaders } from '@angular/common/http' ; import { Injectable } from '@angular/core' ; export interface Post { id : number ; title : string ; location : string ; image : string ; } @ Injectable ({ providedIn : 'root' }) export class BackendService { apiURL = 'http://localhost:3000/posts' ; constructor ( private http : HttpClient ) { } // POST http://localhost:4200/posts public addPost ( post : Post ) : Promise < Post > { return this . http . post < Post > ( ` ${ this . apiURL } ` , post , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' }), }) . toPromise (); } // GET http://localhost:4200/posts public readAll () : Promise < Post [] > { return this . http . get < Post [] > ( ` ${ this . apiURL } ` , { headers : new HttpHeaders ({ 'Content-Type' : 'application/json' , 'Accept-Type' : 'application/json' }), }) . toPromise (); } } In der read.component.ts k\u00f6nnen wir nun diese Funktion des BackendService einmal ausprobieren. Wir binden dazu (wie bereits bei der CreateComponent ) den BackendService mittels dependency injection im Konstruktor ein, rufen die readAll -Funktion auf und geben das Ergebnis auf die Konsole aus. read.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import { Component , OnInit } from '@angular/core' ; import { BackendService , Post } from \"../backend.service\" ; @ Component ({ selector : 'app-read' , templateUrl : './read.component.html' , styleUrls : [ './read.component.css' ] }) export class ReadComponent implements OnInit { allPosts !: Post []; constructor ( private bs : BackendService ) { } ngOnInit () : void { this . bs . readAll () . then ( posts => { this . allPosts = posts ; console . log ( posts ); }) . catch ( err => { console . log ( err ); }) } } Au\u00dferdem speichern wir alle posts in einer Objektvariablen allPosts , die vom Typ Post[] ist. Wenn wir nun im Men\u00fcpunkt Read ausw\u00e4hlen, erscheint in den DeveloperTools in der Konsole die Ausgabe des Arrays aller Posts aus der Datenbank. In der read.component.html k\u00f6nnen wir uns nun \u00fcberlegen, wie wir die einzelnen posts darstellen wollen. Hier ist ein Beispiel f\u00fcr die Verwendung einer Card aus Angular Material Design : read.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < div class = \"container\" novalidate > < div * ngFor = \"let post of allPosts\" > < mat-card class = \"polaroid\" > < mat-card-header > < mat-card-title > {{post.title}} </ mat-card-title > </ mat-card-header > < img mat-card-image [ src ]= imageSrc ( post . image ) alt = \"Foto\" > < mat-card-content > < p > {{post.location}} </ p > </ mat-card-content > </ mat-card > </ div > </ div > F\u00fcr jeden Eintrag post aus dem allPosts -Array wird eine Card erstellt. Die wird mithilfe der Strukturdirektive *ngFor erzeugt (siehe z.B. hier ). Es erscheinen jetzt noch zwei Fehler: 1. die Funktion imageSrc() ist noch nicht bekannt und 2. das MatCardModule wurde noch nicht in unser Projekt importiert. Letzteres machen wir zuerst: \u00d6ffnen Sie app.module.ts und importieren Sie das MatCardModule : app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import { NgModule } from '@angular/core' ; import { BrowserModule } from '@angular/platform-browser' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { BrowserAnimationsModule } from '@angular/platform-browser/animations' ; import { NavComponent } from './nav/nav.component' ; import { LayoutModule } from '@angular/cdk/layout' ; import { MatToolbarModule } from '@angular/material/toolbar' ; import { MatButtonModule } from '@angular/material/button' ; import { MatSidenavModule } from '@angular/material/sidenav' ; import { MatIconModule } from '@angular/material/icon' ; import { MatListModule } from '@angular/material/list' ; import { CreateComponent } from './create/create.component' ; import { FormsModule , ReactiveFormsModule } from '@angular/forms' ; import { MatFormFieldModule } from '@angular/material/form-field' ; import { MatInputModule } from '@angular/material/input' ; import { HttpClientModule } from '@angular/common/http' ; import { ReadComponent } from './read/read.component' ; import { MatCardModule } from \"@angular/material/card\" ; @ NgModule ({ declarations : [ AppComponent , NavComponent , CreateComponent , ReadComponent ], imports : [ BrowserModule , AppRoutingModule , BrowserAnimationsModule , LayoutModule , MatToolbarModule , MatButtonModule , MatSidenavModule , MatIconModule , MatListModule , MatFormFieldModule , MatInputModule , MatCardModule , FormsModule , ReactiveFormsModule , HttpClientModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } In der read.component.ts f\u00fcgen wir nun die imageSource() -Funktion hinzu. Diese ist im Prinzip von hier und hier . read.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { Component , OnInit } from '@angular/core' ; import { BackendService , Post } from \"../backend.service\" ; import { DomSanitizer , SafeResourceUrl } from \"@angular/platform-browser\" ; @ Component ({ selector : 'app-read' , templateUrl : './read.component.html' , styleUrls : [ './read.component.css' ] }) export class ReadComponent implements OnInit { allPosts !: Post []; constructor ( private bs : BackendService , private sanitizer : DomSanitizer ) { } ngOnInit () : void { this . bs . readAll () . then ( posts => { this . allPosts = posts ; }) . catch ( err => { console . log ( err ); }) } imageSrc ( base64code : string ) : SafeResourceUrl { const src = 'data:image/png;base64,' + base64code ; return this . sanitizer . bypassSecurityTrustResourceUrl ( src ); } } Jetzt werden die Card vollst\u00e4ndig angezeigt. Wenn Sie m\u00f6chten, k\u00f6nnen Sie ja das Layout noch etwas in der read.component.css anpassen: read.component.css 1 2 3 4 5 6 . polaroid { width : 250 px ; box-shadow : 0 4 px 8 px 0 rgba ( 0 , 0 , 0 , 0.2 ), 0 6 px 20 px 0 rgba ( 0 , 0 , 0 , 0.19 ); text-align : center ; margin : 20 px ; } Ich hoffe, es klappt alles. Viel Spa\u00df!","title":"\u00dcbung 6 (Frontend)"},{"location":"uebungen/#ubung-7-indexeddb","text":"\u00dcbung 7 Im Abschnitt IndexedDB haben wir uns mit der Verwendung der In-Browser-datenbank IndexedDB vertraut gemacht. In dem dortigen letzten Abschnitt L\u00f6schen einzelner EIntr\u00e4ge haben wir in der db.js eine Funktion deleteOneData(st, id) geschrieben, die einen einzelnen Datensatz aus der IndexedDB mit der \u00fcbergebenen id l\u00f6scht. Implementieren Sie in der db.js eine Funktion deleteByTitle(st, title) , die den Datensatz (oder die Datens\u00e4tze) l\u00f6scht, der (oder die) in dem title -Attribut den der Methode als title \u00fcbergebenen String enth\u00e4lt. Z.B. soll aus dem Datensatz { id: 1 , title: \"first post\" , location: \"Berlin\" , image: \"/9j/4AA...UgP/9k=\" } { id: 2 , title: \"second post\" , location: \"Wilhelminenhof\" , image: \"/9j/4AA...VY/9k=\" } { id: 5 , title: \"fourth post\" , location: \"Gebaeude C\" , image: \"/9j/4AA...KOX/9k=\" } { id: 10 , title: \"HTW aus der Luft\" , location: \"Campus WH von oben\" , image: \"/9j/4AA...9z//2Q==\" } { id: 11 , title: \"Wilhelminenhofstra\u00dfe\" , location: \"Campus WH Eingang\" , image: \"/9j/4AA...U9D/9k=\" } bei Aufruf von deleteByTitle('posts', 'second') der zweite Datensatz mit der id: 2 gel\u00f6scht werden, bei Aufruf von deleteByTitle('posts', 'post') sollen die ersten drei Datens\u00e4tze (mit id:1 , id:2 und id:5 ) gel\u00f6scht werden. Tipps : Mit der Methode getAllKeys() ermitteln Sie z.B. alle Schl\u00fcssel ( id ) der Datens\u00e4tze und mit der Methode get(key) erhalten Sie den zum Schl\u00fcssel zugeh\u00f6rigen Wert. eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 7 Die Idee ist, dass wir die Datens\u00e4tze suchen, deren Titel das gesuchte Wort enth\u00e4lt und den key von diesen Datens\u00e4tzen verwenden, um die deleteOneData(store, id) aufzurufen. In der db.js f\u00fcgen wir also die neue Funktion deleteByTitle(store, title) hinzu, wobei title das Wort enth\u00e4lt, nachdem wir im title der Datens\u00e4tze suchen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function deleteByTitle ( st , title ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); let myIndex = store . index ( 'id' ); myIndex . getAllKeys () . then ( allKeys => { for ( let key of allKeys ) { myIndex . get ( key ) . then ( value => { console . log ( 'delete title' , value . title ); if ( value . title . includes ( title )) { console . log ( 'treffer ' , value . title ); console . log ( ' id ' , value . id ); console . log ( ' key' , key ); deleteOneData ( st , key ); } } ) } }) }) } In Zeile 7 rufen wir die Funktion getAllKeys() auf. Diese Funktion gibt ein Promise zur\u00fcck. In diesem Promise k\u00f6nnen wir nun durch dieses Array aller Schl\u00fcssel durchlaufen. In Zeile 10 lassen wir uns den Wert f\u00fcr den jeweiligen Schl\u00fcssel zur\u00fcckgeben (in einer Promise). In diesem Wert greifen wir auf die Eigenschaft title zu. In Zeile 14 \u00fcberpr\u00fcfen wir, ob das \u00fcbergebene Wort in dem Titel enthalten ist. Wenn ja, dann l\u00f6schen wir diesen Datensatz mithilfe von deleteOneData(st, key) , wobei wir den key als die id \u00fcbergeben, die diese Funktion erwartet. Ausprobieren k\u00f6nnte man die neue Funktion in dem Service Worker nach dem Schreiben aller Daten in die IndexedDB (ich schicke mal den kompletten Stand der sw.js mit, weil das in der \u00dcbung gew\u00fcnscht wurde): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 importScripts ( '/src/js/idb.js' ); importScripts ( '/src/js/db.js' ); const VERSION = '10' ; const CURRENT_STATIC_CACHE = 'static-v' + VERSION ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v' + VERSION ; const STATIC_FILES = [ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ( STATIC_FILES ); }) ); }); self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) function isInArray ( string , array ) { for ( let value of array ) { if ( value === string ) { return true ; } } return false ; } self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then (() => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); // if (data[key].id === 5) deleteOneData('posts', 5); } deleteByTitle ( 'posts' , 'post' ); }); return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ) } }) self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ id : null , title : data . title , location : data . location , image : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } })","title":"\u00dcbung 7 (IndexedDB)"},{"location":"uebungen/#keine-weiteren-ubungen","text":"Implementieren Sie lieber schon an der Semesteraufgabe. Die \u00dcbungszeit am Donnerstag um 12:15 Uhr bleibt aber bestehen. Dort k\u00f6nnen wir dann eventuell auftretende Probleme diskutieren. Ich w\u00fcrde mit der Erstellung der Datenbank und des Backends beginnen. Meine Empfehlung ist, mit der Entwicklung des Frontends erst dann zu beginnen, wenn das Backend (und somit auch die Datenbank) steht. Sollten Sie f\u00fcr das Frontend Angular verwenden wollen, gibt es noch ein kleines Starter-Tutorial hier .","title":"keine weiteren \u00dcbungen"},{"location":"zusammenfassung/","text":"Zusammenfassung \u00b6 Wir haben im Laufe des Semesters eine Webanwendung in eine progressive Webanwendung umgestaltet. Wir haben verschiedene progressive Funktionalit\u00e4ten ausprobiert und implementiert. Das Konzept einer progressive Web App wird zunehmend unterst\u00fctzt, sowohl von den Browser-Herstellern, als auch von den Entwicklern von JavaScript-Frameworks, wie z.B. Angular. Hier nochmal zusammengefasst die Funktionalit\u00e4ten, die das progressive ausmachen und die wir implementiert haben: auffindbar ; die Webanwendungen k\u00f6nnen einfach \u00fcber Suchmaschinen gefunden werden, denn es sind ja Web -Anwendungen, der gleiche Grund gilt auch f\u00fcr verlinkbar , installierbarr ; mithilfe des WebApp-Manifestes werden Anwendungen installierbar und lassen sich durch Klick auf ein Icon im Browser starten - man sieht aber gar nicht, dass es sich um eine Browser handelt, offline ausf\u00fchrbar ; die Webanwendung ist durch die Verwendung von Cache, IndexedDB und Hintergrundsynchronisation auch ohne Netzwerkverbindung ausf\u00fchrbar, plattformunabh\u00e4ngig ; die Webanwendung l\u00e4uft in jedem Browser und ist somit unabh\u00e4ngig vom Betriebssystem, nutzerbindend ; durch die Verwendung von (Push-)Nachrichten kann die Nutzerin stets \u00fcber Aktuelels informiert werden und wird somit daf\u00fcr interessiert, die Anwendung erneut zu starten, responsive ; PWAs sind haupts\u00e4chlich f\u00fcr die Anwendung auf mobilen Ger\u00e4ten konzipiert, k\u00f6nnen aber genau so sinnvoll auf Desktop-PCs sein und sind deshalb typischerweise responsive gestaltet, Zugriff auf Ger\u00e4te ; mit progressiven Webanwendungen kann genau wie mit nativen Anwendungen auf Kamera, Mikrofon, Standard und weitere Sensoren zugegriffen werden. Daf\u00fcr gibt es mittlerweile viele APIs, die zunehmend mehr von Browsern unterst\u00fctzt werden. F\u00fcr den Fall, dass Sie f\u00fcr Ihre Semesteraufgabe planen, das Frontend mithilfe von Angular zu erstellen, hier noch ein kurzes Start-Tutorial . F\u00fcr Angular l\u00e4sst sich aus einer existierenden Anwendung (mit dem Namen *project-name* ) eine PWA mithilfe von ng add @angular/pwa --project *project-name* machen. Beachten Sie f\u00fcr Angular, dass ng serve nicht f\u00fcr Service Worker funktioniert, sondern Sie, wie in unserer HTW-Insta -Anwendung mit dem http-server arbeiten m\u00fcssen. Beispiel: Kurzes Start-Tutorial f\u00fcr Angular \u00b6 Eingabe: ng new AngularPWA Ausgabe: ? Would you like to add Angular routing? Yes ? Which stylesheet format would you like to use? CSS CREATE AngularPWA/README.md ( 1056 bytes ) CREATE AngularPWA/.editorconfig ( 274 bytes ) CREATE AngularPWA/.gitignore ( 604 bytes ) CREATE AngularPWA/angular.json ( 3063 bytes ) CREATE AngularPWA/package.json ( 1073 bytes ) CREATE AngularPWA/tsconfig.json ( 783 bytes ) CREATE AngularPWA/.browserslistrc ( 703 bytes ) CREATE AngularPWA/karma.conf.js ( 1427 bytes ) CREATE AngularPWA/tsconfig.app.json ( 287 bytes ) CREATE AngularPWA/tsconfig.spec.json ( 333 bytes ) CREATE AngularPWA/src/favicon.ico ( 948 bytes ) CREATE AngularPWA/src/index.html ( 296 bytes ) CREATE AngularPWA/src/main.ts ( 372 bytes ) CREATE AngularPWA/src/polyfills.ts ( 2820 bytes ) CREATE AngularPWA/src/styles.css ( 80 bytes ) CREATE AngularPWA/src/test.ts ( 743 bytes ) CREATE AngularPWA/src/assets/.gitkeep ( 0 bytes ) CREATE AngularPWA/src/environments/environment.prod.ts ( 51 bytes ) CREATE AngularPWA/src/environments/environment.ts ( 658 bytes ) CREATE AngularPWA/src/app/app-routing.module.ts ( 245 bytes ) CREATE AngularPWA/src/app/app.module.ts ( 393 bytes ) CREATE AngularPWA/src/app/app.component.css ( 0 bytes ) CREATE AngularPWA/src/app/app.component.html ( 23809 bytes ) CREATE AngularPWA/src/app/app.component.spec.ts ( 1069 bytes ) CREATE AngularPWA/src/app/app.component.ts ( 214 bytes ) \u2714 Packages installed successfully. Successfully initialized git. Eingabe: cd AngularPWA ng add @angular/pwa --project AngularPWA Ausgabe: \u2139 Using package manager: npm \u2714 Found compatible package version: @angular/pwa@latest. \u2714 Package information loaded. The package @angular/pwa will be installed and executed. Would you like to proceed? Yes \u2714 Package successfully installed. Option \"configuration\" is deprecated: No longer has an effect. CREATE ngsw-config.json ( 624 bytes ) CREATE src/manifest.webmanifest ( 1344 bytes ) CREATE src/assets/icons/icon-128x128.png ( 1253 bytes ) CREATE src/assets/icons/icon-144x144.png ( 1394 bytes ) CREATE src/assets/icons/icon-152x152.png ( 1427 bytes ) CREATE src/assets/icons/icon-192x192.png ( 1790 bytes ) CREATE src/assets/icons/icon-384x384.png ( 3557 bytes ) CREATE src/assets/icons/icon-512x512.png ( 5008 bytes ) CREATE src/assets/icons/icon-72x72.png ( 792 bytes ) CREATE src/assets/icons/icon-96x96.png ( 958 bytes ) UPDATE angular.json ( 3232 bytes ) UPDATE package.json ( 1115 bytes ) UPDATE src/app/app.module.ts ( 789 bytes ) UPDATE src/index.html ( 478 bytes ) \u2714 Packages installed successfully. Eingabe: ng build Ausgabe: \u280b Generating browser application bundles ( phase: setup ) ...Compiling @angular/core : es2015 as esm2015 Compiling @angular/common : es2015 as esm2015 Compiling @angular/platform-browser : es2015 as esm2015 Compiling @angular/router : es2015 as esm2015 Compiling @angular/platform-browser-dynamic : es2015 as esm2015 Compiling @angular/service-worker : es2015 as esm2015 \u2714 Browser application bundle generation complete. \u2714 Copying assets complete. \u2714 Index html generation complete. \u2714 Service worker generation complete. Initial Chunk Files | Names | Size main.91513f6b1472da6ef484.js | main | 222 .83 kB polyfills.7483c3136b6130f43c00.js | polyfills | 35 .95 kB runtime.edf4ff6924b895aead86.js | runtime | 1 .00 kB styles.31d6cfe0d16ae931b73c.css | styles | 0 bytes | Initial Total | 259 .79 kB Build at: 2021 -06-22T09:36:03.581Z - Hash: 01998ed491556b85bad3 - Time: 28665ms Eingabe: http-server -p 8080 -c-1 dist/AngularPWA Ausgabe: Starting up http-server, serving dist/AngularPWA Available on: http://127.0.0.1:8080 http://192.168.1.2:8080 Hit CTRL-C to stop the server Angular empfiehlt auch noch die Verwendung des App Shell Models . Dies kann erfolgen durch Eingabe: ng generate app-shell Ausgabe: CREATE src/main.server.ts ( 698 bytes ) CREATE src/app/app.server.module.ts ( 598 bytes ) CREATE tsconfig.server.json ( 379 bytes ) CREATE src/app/app-shell/app-shell.component.css ( 0 bytes ) CREATE src/app/app-shell/app-shell.component.html ( 24 bytes ) CREATE src/app/app-shell/app-shell.component.spec.ts ( 641 bytes ) CREATE src/app/app-shell/app-shell.component.ts ( 286 bytes ) UPDATE package.json ( 1158 bytes ) UPDATE angular.json ( 4638 bytes ) UPDATE src/main.ts ( 432 bytes ) UPDATE src/app/app.module.ts ( 900 bytes ) \u2714 Packages installed successfully. Die Anwendung kann nun entweder im Development- ( ng run my-app:app-shell:development ) oder im Production-Modus ( ng run my-app:app-shell:production ) gestartet werden: Eingabe: ng run AngularPWA:app-shell:development Ausgabe: \u280b Generating server application bundles ( phase: setup ) ...\u280b Generating browser application bundles ( phase: setup ) ...Compiling @angular/animations : es2015 as esm2015 Compiling @angular/common/http : es2015 as esm2015 Compiling @angular/platform-server/init : es2015 as esm2015 Compiling @angular/animations/browser : es2015 as esm2015 Compiling @angular/platform-browser/animations : es2015 as esm2015 Compiling @angular/platform-server : es2015 as esm2015 \u2714 Browser application bundle generation complete. \u2714 Copying assets complete. \u2714 Index html generation complete. Initial Chunk Files | Names | Size vendor.js | vendor | 2 .05 MB polyfills.js | polyfills | 128 .55 kB main.js | main | 54 .76 kB runtime.js | runtime | 6 .22 kB styles.css | styles | 119 bytes | Initial Total | 2 .24 MB Build at: 2021 -06-22T09:46:11.341Z - Hash: a1c812f62e199879cc3c - Time: 9895ms \u2714 Server application bundle generation complete. Initial Chunk Files | Names | Size main.js | main | 4 .61 MB | Initial Total | 4 .61 MB Build at: 2021 -06-22T09:46:11.391Z - Hash: 0fbcd120e039051af1c2 - Time: 19807ms \u280b Generating application shell...Angular is running in development mode. Call enableProdMode () to enable production mode. \u2714 Application shell generation complete. Um nicht immer die Cache-Versionen h\u00e4ndisch \u00e4ndern zu m\u00fcssen - so, wie wir das f\u00fcr die HTW-Insta -Anwendung gemacht haben - kann ein Service eingerichtet werden, der die Updates in der Webanwendung erkennt und automatisch die Versionen verwaltet. Eingabe: ng generate service log-update Ausgabe: CREATE src/app/log-update.service.spec.ts ( 373 bytes ) CREATE src/app/log-update.service.ts ( 138 bytes ) Dazu wird das SwUpdate -Packet aus dem @angular/service-worker -Modul verwendet. Die log-update.service.ts sieht dann so aus: src/app/log-update.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Injectable } from '@angular/core' ; import { SwUpdate } from \"@angular/service-worker\" ; @ Injectable ({ providedIn : 'root' }) export class LogUpdateService { constructor ( updates : SwUpdate ) { updates . available . subscribe ( event => { console . log ( 'current version is' , event . current ); console . log ( 'available version is' , event . available ); }); updates . activated . subscribe ( event => { console . log ( 'old version was' , event . previous ); console . log ( 'new version is' , event . current ); }); } } Dieser Service erkennt also neue Updates. Der eigentliche Reload der Anwendung bei neuen Updates kann mit dem folgenden Service durchgef\u00fchrt werden: Eingabe: ng generate service prompt-update Ausgabe: CREATE src/app/prompt-update.service.spec.ts ( 388 bytes ) CREATE src/app/prompt-update.service.ts ( 141 bytes ) Dazu wird das SwUpdate -Packet aus dem @angular/service-worker -Modul verwendet. Die log-update.service.ts sieht dann so aus: src/app/prompt-update.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Injectable } from '@angular/core' ; import { SwUpdate } from \"@angular/service-worker\" ; @ Injectable ({ providedIn : 'root' }) export class LogUpdateService { constructor ( updates : SwUpdate ) { updates . available . subscribe ( event => { console . log ( 'current version is' , event . current ); console . log ( 'available version is' , event . available ); }); updates . activated . subscribe ( event => { console . log ( 'old version was' , event . previous ); console . log ( 'new version is' , event . current ); }); } } Wenn Sie eine solch konfigurierte Angular-Anwendung starten, dann ist Lighthouse schonmal recht zufrieden: Weitere Information zu Angular + PWA finden Sie z.B. hier oder hier oder hier oder hier oder hier . Ausblick \u00b6 Zun\u00e4chst herzlichen Gl\u00fcckwunsch - Sie haben es geschafft! Ich hoffe, Sie haben eine Menge gelernt. Ich denke, dass uns das Thema Progressive Web Apps noch eine Weile besch\u00e4ftigen wird, denn die grunds\u00e4tzliche Idee dieses Konzeptes ist gut. Wenn die nativen Apps durch progressive Web Apps ersetzt werden w\u00fcrden, dann w\u00e4ren wir nicht nur komplett plattformunabh\u00e4ngig bei der Verwendung von Apps, es w\u00e4re nicht mehr notwendig, unterschiedliche Implementierungen f\u00fcr unterschiedliche Plattformen zu erstellen, sondern wir w\u00e4ren insbesondere komplett unabh\u00e4ngig von irgendwelchen App- oder Play-Stores! Sie k\u00f6nnen nun mehrere Sachen tun, wenn Sie m\u00f6chten: erstellen Sie Ihr n\u00e4chstes Projekt gleich als eine PWA oder f\u00fcgen Sie f\u00fcr ein existierendes Projekt PWA-Funktionalit\u00e4t hinzu oder tauchen Sie tiefer ein in die APIs, die wir betrachtet haben oder verfolgen Sie die Entwicklung neuer APIs, z.B. Payments-API ( Google Pay API , PayPal Payments API ) oder \u00dcbersicht oder Sie ruhen sich erstmal aus. Einen sch\u00f6nen Sommer!","title":"Zusammenfassung"},{"location":"zusammenfassung/#zusammenfassung","text":"Wir haben im Laufe des Semesters eine Webanwendung in eine progressive Webanwendung umgestaltet. Wir haben verschiedene progressive Funktionalit\u00e4ten ausprobiert und implementiert. Das Konzept einer progressive Web App wird zunehmend unterst\u00fctzt, sowohl von den Browser-Herstellern, als auch von den Entwicklern von JavaScript-Frameworks, wie z.B. Angular. Hier nochmal zusammengefasst die Funktionalit\u00e4ten, die das progressive ausmachen und die wir implementiert haben: auffindbar ; die Webanwendungen k\u00f6nnen einfach \u00fcber Suchmaschinen gefunden werden, denn es sind ja Web -Anwendungen, der gleiche Grund gilt auch f\u00fcr verlinkbar , installierbarr ; mithilfe des WebApp-Manifestes werden Anwendungen installierbar und lassen sich durch Klick auf ein Icon im Browser starten - man sieht aber gar nicht, dass es sich um eine Browser handelt, offline ausf\u00fchrbar ; die Webanwendung ist durch die Verwendung von Cache, IndexedDB und Hintergrundsynchronisation auch ohne Netzwerkverbindung ausf\u00fchrbar, plattformunabh\u00e4ngig ; die Webanwendung l\u00e4uft in jedem Browser und ist somit unabh\u00e4ngig vom Betriebssystem, nutzerbindend ; durch die Verwendung von (Push-)Nachrichten kann die Nutzerin stets \u00fcber Aktuelels informiert werden und wird somit daf\u00fcr interessiert, die Anwendung erneut zu starten, responsive ; PWAs sind haupts\u00e4chlich f\u00fcr die Anwendung auf mobilen Ger\u00e4ten konzipiert, k\u00f6nnen aber genau so sinnvoll auf Desktop-PCs sein und sind deshalb typischerweise responsive gestaltet, Zugriff auf Ger\u00e4te ; mit progressiven Webanwendungen kann genau wie mit nativen Anwendungen auf Kamera, Mikrofon, Standard und weitere Sensoren zugegriffen werden. Daf\u00fcr gibt es mittlerweile viele APIs, die zunehmend mehr von Browsern unterst\u00fctzt werden. F\u00fcr den Fall, dass Sie f\u00fcr Ihre Semesteraufgabe planen, das Frontend mithilfe von Angular zu erstellen, hier noch ein kurzes Start-Tutorial . F\u00fcr Angular l\u00e4sst sich aus einer existierenden Anwendung (mit dem Namen *project-name* ) eine PWA mithilfe von ng add @angular/pwa --project *project-name* machen. Beachten Sie f\u00fcr Angular, dass ng serve nicht f\u00fcr Service Worker funktioniert, sondern Sie, wie in unserer HTW-Insta -Anwendung mit dem http-server arbeiten m\u00fcssen. Beispiel:","title":"Zusammenfassung"},{"location":"zusammenfassung/#kurzes-start-tutorial-fur-angular","text":"Eingabe: ng new AngularPWA Ausgabe: ? Would you like to add Angular routing? Yes ? Which stylesheet format would you like to use? CSS CREATE AngularPWA/README.md ( 1056 bytes ) CREATE AngularPWA/.editorconfig ( 274 bytes ) CREATE AngularPWA/.gitignore ( 604 bytes ) CREATE AngularPWA/angular.json ( 3063 bytes ) CREATE AngularPWA/package.json ( 1073 bytes ) CREATE AngularPWA/tsconfig.json ( 783 bytes ) CREATE AngularPWA/.browserslistrc ( 703 bytes ) CREATE AngularPWA/karma.conf.js ( 1427 bytes ) CREATE AngularPWA/tsconfig.app.json ( 287 bytes ) CREATE AngularPWA/tsconfig.spec.json ( 333 bytes ) CREATE AngularPWA/src/favicon.ico ( 948 bytes ) CREATE AngularPWA/src/index.html ( 296 bytes ) CREATE AngularPWA/src/main.ts ( 372 bytes ) CREATE AngularPWA/src/polyfills.ts ( 2820 bytes ) CREATE AngularPWA/src/styles.css ( 80 bytes ) CREATE AngularPWA/src/test.ts ( 743 bytes ) CREATE AngularPWA/src/assets/.gitkeep ( 0 bytes ) CREATE AngularPWA/src/environments/environment.prod.ts ( 51 bytes ) CREATE AngularPWA/src/environments/environment.ts ( 658 bytes ) CREATE AngularPWA/src/app/app-routing.module.ts ( 245 bytes ) CREATE AngularPWA/src/app/app.module.ts ( 393 bytes ) CREATE AngularPWA/src/app/app.component.css ( 0 bytes ) CREATE AngularPWA/src/app/app.component.html ( 23809 bytes ) CREATE AngularPWA/src/app/app.component.spec.ts ( 1069 bytes ) CREATE AngularPWA/src/app/app.component.ts ( 214 bytes ) \u2714 Packages installed successfully. Successfully initialized git. Eingabe: cd AngularPWA ng add @angular/pwa --project AngularPWA Ausgabe: \u2139 Using package manager: npm \u2714 Found compatible package version: @angular/pwa@latest. \u2714 Package information loaded. The package @angular/pwa will be installed and executed. Would you like to proceed? Yes \u2714 Package successfully installed. Option \"configuration\" is deprecated: No longer has an effect. CREATE ngsw-config.json ( 624 bytes ) CREATE src/manifest.webmanifest ( 1344 bytes ) CREATE src/assets/icons/icon-128x128.png ( 1253 bytes ) CREATE src/assets/icons/icon-144x144.png ( 1394 bytes ) CREATE src/assets/icons/icon-152x152.png ( 1427 bytes ) CREATE src/assets/icons/icon-192x192.png ( 1790 bytes ) CREATE src/assets/icons/icon-384x384.png ( 3557 bytes ) CREATE src/assets/icons/icon-512x512.png ( 5008 bytes ) CREATE src/assets/icons/icon-72x72.png ( 792 bytes ) CREATE src/assets/icons/icon-96x96.png ( 958 bytes ) UPDATE angular.json ( 3232 bytes ) UPDATE package.json ( 1115 bytes ) UPDATE src/app/app.module.ts ( 789 bytes ) UPDATE src/index.html ( 478 bytes ) \u2714 Packages installed successfully. Eingabe: ng build Ausgabe: \u280b Generating browser application bundles ( phase: setup ) ...Compiling @angular/core : es2015 as esm2015 Compiling @angular/common : es2015 as esm2015 Compiling @angular/platform-browser : es2015 as esm2015 Compiling @angular/router : es2015 as esm2015 Compiling @angular/platform-browser-dynamic : es2015 as esm2015 Compiling @angular/service-worker : es2015 as esm2015 \u2714 Browser application bundle generation complete. \u2714 Copying assets complete. \u2714 Index html generation complete. \u2714 Service worker generation complete. Initial Chunk Files | Names | Size main.91513f6b1472da6ef484.js | main | 222 .83 kB polyfills.7483c3136b6130f43c00.js | polyfills | 35 .95 kB runtime.edf4ff6924b895aead86.js | runtime | 1 .00 kB styles.31d6cfe0d16ae931b73c.css | styles | 0 bytes | Initial Total | 259 .79 kB Build at: 2021 -06-22T09:36:03.581Z - Hash: 01998ed491556b85bad3 - Time: 28665ms Eingabe: http-server -p 8080 -c-1 dist/AngularPWA Ausgabe: Starting up http-server, serving dist/AngularPWA Available on: http://127.0.0.1:8080 http://192.168.1.2:8080 Hit CTRL-C to stop the server Angular empfiehlt auch noch die Verwendung des App Shell Models . Dies kann erfolgen durch Eingabe: ng generate app-shell Ausgabe: CREATE src/main.server.ts ( 698 bytes ) CREATE src/app/app.server.module.ts ( 598 bytes ) CREATE tsconfig.server.json ( 379 bytes ) CREATE src/app/app-shell/app-shell.component.css ( 0 bytes ) CREATE src/app/app-shell/app-shell.component.html ( 24 bytes ) CREATE src/app/app-shell/app-shell.component.spec.ts ( 641 bytes ) CREATE src/app/app-shell/app-shell.component.ts ( 286 bytes ) UPDATE package.json ( 1158 bytes ) UPDATE angular.json ( 4638 bytes ) UPDATE src/main.ts ( 432 bytes ) UPDATE src/app/app.module.ts ( 900 bytes ) \u2714 Packages installed successfully. Die Anwendung kann nun entweder im Development- ( ng run my-app:app-shell:development ) oder im Production-Modus ( ng run my-app:app-shell:production ) gestartet werden: Eingabe: ng run AngularPWA:app-shell:development Ausgabe: \u280b Generating server application bundles ( phase: setup ) ...\u280b Generating browser application bundles ( phase: setup ) ...Compiling @angular/animations : es2015 as esm2015 Compiling @angular/common/http : es2015 as esm2015 Compiling @angular/platform-server/init : es2015 as esm2015 Compiling @angular/animations/browser : es2015 as esm2015 Compiling @angular/platform-browser/animations : es2015 as esm2015 Compiling @angular/platform-server : es2015 as esm2015 \u2714 Browser application bundle generation complete. \u2714 Copying assets complete. \u2714 Index html generation complete. Initial Chunk Files | Names | Size vendor.js | vendor | 2 .05 MB polyfills.js | polyfills | 128 .55 kB main.js | main | 54 .76 kB runtime.js | runtime | 6 .22 kB styles.css | styles | 119 bytes | Initial Total | 2 .24 MB Build at: 2021 -06-22T09:46:11.341Z - Hash: a1c812f62e199879cc3c - Time: 9895ms \u2714 Server application bundle generation complete. Initial Chunk Files | Names | Size main.js | main | 4 .61 MB | Initial Total | 4 .61 MB Build at: 2021 -06-22T09:46:11.391Z - Hash: 0fbcd120e039051af1c2 - Time: 19807ms \u280b Generating application shell...Angular is running in development mode. Call enableProdMode () to enable production mode. \u2714 Application shell generation complete. Um nicht immer die Cache-Versionen h\u00e4ndisch \u00e4ndern zu m\u00fcssen - so, wie wir das f\u00fcr die HTW-Insta -Anwendung gemacht haben - kann ein Service eingerichtet werden, der die Updates in der Webanwendung erkennt und automatisch die Versionen verwaltet. Eingabe: ng generate service log-update Ausgabe: CREATE src/app/log-update.service.spec.ts ( 373 bytes ) CREATE src/app/log-update.service.ts ( 138 bytes ) Dazu wird das SwUpdate -Packet aus dem @angular/service-worker -Modul verwendet. Die log-update.service.ts sieht dann so aus: src/app/log-update.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Injectable } from '@angular/core' ; import { SwUpdate } from \"@angular/service-worker\" ; @ Injectable ({ providedIn : 'root' }) export class LogUpdateService { constructor ( updates : SwUpdate ) { updates . available . subscribe ( event => { console . log ( 'current version is' , event . current ); console . log ( 'available version is' , event . available ); }); updates . activated . subscribe ( event => { console . log ( 'old version was' , event . previous ); console . log ( 'new version is' , event . current ); }); } } Dieser Service erkennt also neue Updates. Der eigentliche Reload der Anwendung bei neuen Updates kann mit dem folgenden Service durchgef\u00fchrt werden: Eingabe: ng generate service prompt-update Ausgabe: CREATE src/app/prompt-update.service.spec.ts ( 388 bytes ) CREATE src/app/prompt-update.service.ts ( 141 bytes ) Dazu wird das SwUpdate -Packet aus dem @angular/service-worker -Modul verwendet. Die log-update.service.ts sieht dann so aus: src/app/prompt-update.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Injectable } from '@angular/core' ; import { SwUpdate } from \"@angular/service-worker\" ; @ Injectable ({ providedIn : 'root' }) export class LogUpdateService { constructor ( updates : SwUpdate ) { updates . available . subscribe ( event => { console . log ( 'current version is' , event . current ); console . log ( 'available version is' , event . available ); }); updates . activated . subscribe ( event => { console . log ( 'old version was' , event . previous ); console . log ( 'new version is' , event . current ); }); } } Wenn Sie eine solch konfigurierte Angular-Anwendung starten, dann ist Lighthouse schonmal recht zufrieden: Weitere Information zu Angular + PWA finden Sie z.B. hier oder hier oder hier oder hier oder hier .","title":"Kurzes Start-Tutorial f\u00fcr Angular"},{"location":"zusammenfassung/#ausblick","text":"Zun\u00e4chst herzlichen Gl\u00fcckwunsch - Sie haben es geschafft! Ich hoffe, Sie haben eine Menge gelernt. Ich denke, dass uns das Thema Progressive Web Apps noch eine Weile besch\u00e4ftigen wird, denn die grunds\u00e4tzliche Idee dieses Konzeptes ist gut. Wenn die nativen Apps durch progressive Web Apps ersetzt werden w\u00fcrden, dann w\u00e4ren wir nicht nur komplett plattformunabh\u00e4ngig bei der Verwendung von Apps, es w\u00e4re nicht mehr notwendig, unterschiedliche Implementierungen f\u00fcr unterschiedliche Plattformen zu erstellen, sondern wir w\u00e4ren insbesondere komplett unabh\u00e4ngig von irgendwelchen App- oder Play-Stores! Sie k\u00f6nnen nun mehrere Sachen tun, wenn Sie m\u00f6chten: erstellen Sie Ihr n\u00e4chstes Projekt gleich als eine PWA oder f\u00fcgen Sie f\u00fcr ein existierendes Projekt PWA-Funktionalit\u00e4t hinzu oder tauchen Sie tiefer ein in die APIs, die wir betrachtet haben oder verfolgen Sie die Entwicklung neuer APIs, z.B. Payments-API ( Google Pay API , PayPal Payments API ) oder \u00dcbersicht oder Sie ruhen sich erstmal aus. Einen sch\u00f6nen Sommer!","title":"Ausblick"}]}